/**
 * <p class='availableIn'><b>Supported Script Types:</b> Assignment Client Scripts</p>The <code>Agent</code> API enables an assignment client to emulate an avatar. Setting <code>isAvatar = true</code> connects
the assignment client to the avatar and audio mixers, and enables the {@link Avatar} API to be used.
 * @property isAvatar - <code>true</code> if the assignment client script is emulating an avatar, otherwise
    <code>false</code>.
 * @property isPlayingAvatarSound - <code>true</code> if the script has a sound to play, otherwise <code>false</code>.
    Sounds are played when <code>isAvatar</code> is <code>true</code>, from the position and with the orientation of the
    scripted avatar's head. <em>Read-only.</em>
 * @property isListeningToAudioStream - <code>true</code> if the agent is "listening" to the audio stream from the
    domain, otherwise <code>false</code>.
 * @property isNoiseGateEnabled - <code>true</code> if the noise gate is enabled, otherwise <code>false</code>. When
enabled, the input audio stream is blocked (fully attenuated) if it falls below an adaptive threshold.
 * @property lastReceivedAudioLoudness - The current loudness of the audio input. Nominal range [<code>0.0</code> (no
    sound) &ndash; <code>1.0</code> (the onset of clipping)]. <em>Read-only.</em>
 * @property sessionUUID - The unique ID associated with the agent's current session in the domain. <em>Read-only.</em>
 */
declare namespace Agent {
    /**
     * Sets whether the script should emulate an avatar.
     * @example
     * <caption>Make an assignment client script emulate an avatar.</caption>
    (function () {
        Agent.setIsAvatar(true);
        Avatar.displayName = "AC avatar";
        print("Position: " + JSON.stringify(Avatar.position));  // 0, 0, 0
    }());
     * @param isAvatar - <code>true</code> if the script emulates an avatar, otherwise <code>false</code>.
     */
    function setIsAvatar(isAvatar: boolean): void;
    /**
     * Checks whether the script is emulating an avatar.
     * @example
     * <caption>Check whether the agent is emulating an avatar.</caption>
    (function () {
        print("Agent is avatar: " + Agent.isAvatar());
        print("Agent is avatar: " + Agent.isAvatar); // Same result.
    }());
     * @returns <code>true</code> if the script is emulating an avatar, otherwise <code>false</code>.
     */
    function isAvatar(): boolean;
    /**
     * Plays a sound from the position and with the orientation of the emulated avatar's head. No sound is played unless
    <code>isAvatar == true</code>.
     * @example
     * <caption>Play a sound from an emulated avatar.</caption>
    (function () {
        Agent.isAvatar = true;
        var sound = SoundCache.getSound(Script.resourcesPath() + "sounds/sample.wav");
        Script.setTimeout(function () { // Give the sound time to load.
            Agent.playAvatarSound(sound);
        }, 1000);
    }());
     *
     * @param avatarSound - The sound played.
     */
    function playAvatarSound(avatarSound: SoundObject): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Assignment Client Scripts</p>The <code>Avatar</code> API is used to manipulate scriptable avatars on the domain. This API is a subset of the
{@link MyAvatar} API. To enable this API, set {@link Agent|Agent.isAvatar} to <code>true</code>.

<p>For Interface, client entity, and avatar scripts, see {@link MyAvatar}.</p>
 * @example
 * <caption>Create a scriptable avatar.</caption>
(function () {
    Agent.setIsAvatar(true);
    print("Position: " + JSON.stringify(Avatar.position));  // 0, 0, 0
}());
 * @property position - The position of the avatar.
 * @property scale - The scale of the avatar. The value can be set to anything between <code>0.005</code> and
    <code>1000.0</code>. When the scale value is fetched, it may temporarily be further limited by the domain's settings.
 * @property density - The density of the avatar in kg/m<sup>3</sup>. The density is used to work out its mass in
    the application of physics. <em>Read-only.</em>
 * @property handPosition - A user-defined hand position, in world coordinates. The position moves with the avatar
   but is otherwise not used or changed by Interface.
 * @property bodyYaw - The left or right rotation about an axis running from the head to the feet of the avatar.
    Yaw is sometimes called "heading".
 * @property bodyPitch - The rotation about an axis running from shoulder to shoulder of the avatar. Pitch is
    sometimes called "elevation".
 * @property bodyRoll - The rotation about an axis running from the chest to the back of the avatar. Roll is
    sometimes called "bank".
 * @property orientation - The orientation of the avatar.
 * @property headOrientation - The orientation of the avatar's head.
 * @property headPitch - The rotation about an axis running from ear to ear of the avatar's head. Pitch is
    sometimes called "elevation".
 * @property headYaw - The rotation left or right about an axis running from the base to the crown of the avatar's
    head. Yaw is sometimes called "heading".
 * @property headRoll - The rotation about an axis running from the nose to the back of the avatar's head. Roll is
    sometimes called "bank".
 * @property velocity - The current velocity of the avatar.
 * @property angularVelocity - The current angular velocity of the avatar.
 * @property audioLoudness - The instantaneous loudness of the audio input that the avatar is injecting into the
    domain.
 * @property audioAverageLoudness - The rolling average loudness of the audio input that the avatar is injecting
    into the domain.
 * @property displayName - The avatar's display name.
 * @property sessionDisplayName - <code>displayName's</code> sanitized and default version defined by the avatar mixer
    rather than Interface clients. The result is unique among all avatars present in the domain at the time.
 * @property lookAtSnappingEnabled - <code>true</code> if the avatar's eyes snap to look at another avatar's
    eyes when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.
 * @property skeletonModelURL - The avatar's FST file.
 * @property attachmentData - Information on the avatar's attachments.
    <p class="important">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>
 * @property jointNames - The list of joints in the current avatar model. <em>Read-only.</em>
 * @property sessionUUID - Unique ID of the avatar in the domain. <em>Read-only.</em>
 * @property sensorToWorldMatrix - The scale, rotation, and translation transform from the user's real world to the
    avatar's size, orientation, and position in the virtual world. <em>Read-only.</em>
 * @property controllerLeftHandMatrix - The rotation and translation of the left hand controller relative to the
    avatar. <em>Read-only.</em>
 * @property controllerRightHandMatrix - The rotation and translation of the right hand controller relative to the
    avatar. <em>Read-only.</em>
 * @property sensorToWorldScale - The scale that transforms dimensions in the user's real world to the avatar's
    size in the virtual world. <em>Read-only.</em>
 * @property hasPriority - <code>true</code> if the avatar is in a "hero" zone, <code>false</code> if it isn't.
    <em>Read-only.</em>
 * @property hasScriptedBlendshapes - <code>true</code> if blend shapes are controlled by scripted actions,
    otherwise <code>false</code>. Set this to <code>true</code> before using the {@link MyAvatar.setBlendshape} method,
    and set back to <code>false</code> after you no longer want scripted control over the blend shapes.
    <p><strong>Note:</strong> This property will automatically be set to true if the Controller system has valid facial
    blend shape actions.</p>
 * @property hasProceduralBlinkFaceMovement - <code>true</code> if avatars blink automatically by animating
    facial blend shapes, <code>false</code> if automatic blinking is disabled. Set to <code>false</code> to fully control
    the blink facial blend shapes via the {@link MyAvatar.setBlendshape} method.
 * @property hasProceduralEyeFaceMovement - <code>true</code> if the facial blend shapes for an avatar's eyes
    adjust automatically as the eyes move, <code>false</code> if this automatic movement is disabled. Set this property
    to <code>true</code> to prevent the iris from being obscured by the upper or lower lids. Set to <code>false</code> to
    fully control the eye blend shapes via the {@link MyAvatar.setBlendshape} method.
 * @property hasAudioEnabledFaceMovement - <code>true</code> if the avatar's mouth blend shapes animate
    automatically based on detected microphone input, <code>false</code> if this automatic movement is disabled. Set
    this property to <code>false</code> to fully control the mouth facial blend shapes via the
    {@link MyAvatar.setBlendshape} method.
 */
declare namespace Avatar {
    /**
     * Starts playing an animation on the avatar.
     * @param url - The animation file's URL. Animation files need to be in glTF or FBX format but only need to
        contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (".gltf" or ".glb" URLs
        respectively).
        <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>
     * @param [fps = 30] - The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.
     * @param [priority = 1] - <em>Not used.</em>
     * @param [loop = false] - <code>true</code> if the animation should loop, <code>false</code> if it shouldn't.
     * @param [hold = false] - <em>Not used.</em>
     * @param [firstFrame = 0] - The frame at which the animation starts.
     * @param [lastFrame = 3.403e+38] - The frame at which the animation stops.
     * @param [maskedJoints = []] - The names of joints that should not be animated.
     */
    function startAnimation(url: string, fps?: number, priority?: number, loop?: boolean, hold?: boolean, firstFrame?: number, lastFrame?: number, maskedJoints?: string[]): void;
    /**
     * Stops playing the current animation.
     */
    function stopAnimation(): void;
    /**
     * Gets the details of the current avatar animation that is being or was recently played.
     * @example
     * <caption>Report the current animation details.</caption>
    var animationDetails = Avatar.getAnimationDetails();
    print("Animation details: " + JSON.stringify(animationDetails));
     * @returns The current or recent avatar animation.
     */
    function getAnimationDetails(): Avatar.AnimationDetails;
    /**
     * Gets details of all avatar entities.
    <p><strong>Warning:</strong> Potentially an expensive call. Do not use if possible.</p>
     * @example
     * <caption>Report the current avatar entities.</caption>
    var avatarEntityData = Avatar.getAvatarEntityData();
    print("Avatar entities: " + JSON.stringify(avatarEntityData));
     * @returns Details of all avatar entities.
     */
    function getAvatarEntityData(): AvatarEntityMap;
    /**
     * Sets all avatar entities from an object.
    <p><strong>Warning:</strong> Potentially an expensive call. Do not use if possible.</p>
     * @param avatarEntityData - Details of the avatar entities.
     */
    function setAvatarEntityData(avatarEntityData: AvatarEntityMap): void;
    /**
     * @param deltaTime - Delta time.
     */
    function update(deltaTime: number): void;
    function setJointMappingsFromNetworkReply(): void;
    /**
     * Gets the minimum scale allowed for this avatar in the current domain.
    This value can change as the user changes avatars or when changing domains.
     * @returns The minimum scale allowed for this avatar in the current domain.
     */
    function getDomainMinScale(): number;
    /**
     * Gets the maximum scale allowed for this avatar in the current domain.
    This value can change as the user changes avatars or when changing domains.
     * @returns The maximum scale allowed for this avatar in the current domain.
     */
    function getDomainMaxScale(): number;
    /**
     * Gets the current eye height of the avatar.
    This height is only an estimate and might be incorrect for avatars that are missing standard joints.
     * @returns The eye height of the avatar.
     */
    function getEyeHeight(): number;
    /**
     * Gets the current height of the avatar.
    This height is only an estimate and might be incorrect for avatars that are missing standard joints.
     * @returns The height of the avatar.
     */
    function getHeight(): number;
    /**
     * Sets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the
    laser emanates from the tip of that finger, otherwise it emanates from the palm.
     * @param state - The pointing state of the hand.
     */
    function setHandState(state: HandState): void;
    /**
     * Gets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the
    laser emanates from the tip of that finger, otherwise it emanates from the palm.
     * @returns The pointing state of the hand.
     */
    function getHandState(): HandState;
    /**
     * Sets a specific joint's rotation and position relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @param name - The name of the joint.
     * @param rotation - The rotation of the joint relative to its parent.
     * @param translation - The translation of the joint relative to its parent, in model coordinates.
     */
    function setJointData(name: string, rotation: TQuat, translation: TVec3): void;
    /**
     * Sets a specific joint's rotation relative to its parent.
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @example
     * <caption>Set your avatar to its default T-pose then rotate its right arm.<br />
    <img alt="Avatar in T-pose with arm rotated" src="https://apidocs.overte.org/examples/armpose.png" /></caption>
    // Set all joint translations and rotations to defaults.
    var i, length, rotation, translation;
    for (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {
        rotation = MyAvatar.getDefaultJointRotation(i);
        translation = MyAvatar.getDefaultJointTranslation(i);
        MyAvatar.setJointData(i, rotation, translation);
    }
    
    // Rotate the right arm.
    var newArmRotation = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };
    MyAvatar.setJointRotation("RightArm", newArmRotation);
    
    // Restore your avatar's motion after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointsData();
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @param rotation - The rotation of the joint relative to its parent.
     */
    function setJointRotation(name: string, rotation: TQuat): void;
    /**
     * Sets a specific joint's translation relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @example
     * <caption>Stretch your avatar's neck. Depending on the avatar you are using, you will either see a gap between
    the head and body or you will see the neck stretched.<br />
    <img alt="Avatar with neck stretched" src="https://apidocs.overte.org/examples/stretched-neck.png" /></caption>
    // Stretch your avatar's neck.
    MyAvatar.setJointTranslation("Neck", Vec3.multiply(2, MyAvatar.getJointTranslation("Neck")));
    
    // Restore your avatar's neck after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointData("Neck");
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @param translation - The translation of the joint relative to its parent, in model coordinates.
     */
    function setJointTranslation(name: string, translation: TVec3): void;
    /**
     * Clears joint translations and rotations set by script for a specific joint. This restores all motion from the default
    animation system including inverse kinematics for that joint.
    <p>Note: This is slightly slower than the function variation that specifies the joint index.</p>
     * @example
     * <caption>Offset and restore the position of your avatar's head.</caption>
    // Stretch your avatar's neck.
    MyAvatar.setJointTranslation("Neck", Vec3.multiply(2, MyAvatar.getJointTranslation("Neck")));
    
    // Restore your avatar's neck after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointData("Neck");
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     */
    function clearJointData(name: string): void;
    /**
     * Checks if the data for a joint are valid.
     * @param name - The name of the joint.
     * @returns <code>true</code> if the joint data are valid, <code>false</code> if not.
     */
    function isJointDataValid(name: string): boolean;
    /**
     * Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.
     * @example
     * <caption>Report the rotation of your avatar's hips joint.</caption>
    print(JSON.stringify(MyAvatar.getJointRotation("Hips")));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @returns The rotation of the joint relative to its parent.
     */
    function getJointRotation(name: string): TQuat;
    /**
     * Gets the translation of a joint relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @example
     * <caption>Report the translation of your avatar's hips joint.</caption>
    print(JSON.stringify(MyAvatar.getJointRotation("Hips")));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @returns The translation of the joint relative to its parent, in model coordinates.
     */
    function getJointTranslation(name: number): TVec3;
    /**
     * Gets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.
     * @example
     * <caption>Report the rotations of all your avatar's joints.</caption>
    print(JSON.stringify(MyAvatar.getJointRotations()));
    
    // Note: If using from the Avatar API, replace all "MyAvatar" with "Avatar".
     * @returns The rotations of all joints relative to each's parent. The values are in the same order as the array
    returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.
     */
    function getJointRotations(): TQuat[];
    /**
     * Gets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in
    model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
     * @returns The translations of all joints relative to each's parent, in model coordinates. The values are in the
        same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the
        <code>Avatar</code> API.
     */
    function getJointTranslations(): TVec3[];
    /**
     * Sets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @example
     * <caption>Set your avatar to its default T-pose then rotate its right arm.<br />
    <img alt="Avatar in T-pose" src="https://apidocs.overte.org/examples/armpose.png" /></caption>
    // Set all joint translations and rotations to defaults.
    var i, length, rotation, translation;
    for (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {
        rotation = MyAvatar.getDefaultJointRotation(i);
        translation = MyAvatar.getDefaultJointTranslation(i);
        MyAvatar.setJointData(i, rotation, translation);
    }
    
    // Get all join rotations.
    var jointRotations = MyAvatar.getJointRotations();
    
    // Update the rotation of the right arm in the array.
    jointRotations[MyAvatar.getJointIndex("RightArm")] = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };
    
    // Update all joint rotations.
    MyAvatar.setJointRotations(jointRotations);
    
    // Restore your avatar's motion after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointsData();
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param jointRotations - The rotations for all joints in the avatar. The values are in the same order as the
    array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.
     */
    function setJointRotations(jointRotations: TQuat[]): void;
    /**
     * Sets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in
    model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @param translations - The translations for all joints in the avatar, in model coordinates. The values are in
        the same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the
        <code>Avatar</code> API.
     */
    function setJointTranslations(translations: TVec3[]): void;
    /**
     * Clears all joint translations and rotations that have been set by script. This restores all motion from the default
    animation system including inverse kinematics for all joints.
     * @example
     * <caption>Set your avatar to it's default T-pose for a while.</caption>
    // Set all joint translations and rotations to defaults.
    var i, length, rotation, translation;
    for (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {
        rotation = MyAvatar.getDefaultJointRotation(i);
        translation = MyAvatar.getDefaultJointTranslation(i);
        MyAvatar.setJointData(i, rotation, translation);
    }
    
    // Restore your avatar's motion after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointsData();
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     */
    function clearJointsData(): void;
    /**
     * Gets the joint index for a named joint. The joint index value is the position of the joint in the array returned by
    {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.
     * @example
     * <caption>Report the index of your avatar's left arm joint.</caption>
    print(JSON.stringify(MyAvatar.getJointIndex("LeftArm")));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @returns The index of the joint if valid, otherwise <code>-1</code>.
     */
    function getJointIndex(name: string): number;
    /**
     * Gets the names of all the joints in the current avatar.
     * @example
     * <caption>Report the names of all the joints in your current avatar.</caption>
    print(JSON.stringify(MyAvatar.getJointNames()));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns The joint names.
     */
    function getJointNames(): string[];
    /**
     * Sets the value of a blend shape to animate your avatar's face. In order for other users to see the resulting animations
    on your avatar's face, set <code>hasScriptedBlendshapes</code> to <code>true</code>. When you are done using this API,
    set <code>hasScriptedBlendshapes</code> back to <code>false</code> when the animation is complete.
     * @example
     * <caption>Open your avatar's mouth wide.</caption>
    MyAvatar.hasScriptedBlendshapes = true;
    MyAvatar.setBlendshape("JawOpen", 1.0);
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the blendshape, per the
        {@link https://docs.overte.org/create/avatars/avatar-standards.html#blendshapes Avatar Standards}.
     * @param value - A value between <code>0.0</code> and <code>1.0</code>.
     */
    function setBlendshape(name: string, value: number): void;
    /**
     * Gets information about the models currently attached to your avatar.
     * @returns Information about all models attached to your avatar.
     */
    function getAttachmentsVariant(): AttachmentData[];
    /**
     * Sets all models currently attached to your avatar. For example, if you retrieve attachment data using
    {@link MyAvatar.getAttachmentsVariant} or {@link Avatar.getAttachmentsVariant}, make changes to it, and then want to
    update your avatar's attachments per the changed data.
     * @param variant - The attachment data defining the models to have attached to your avatar.
     */
    function setAttachmentsVariant(variant: AttachmentData[]): void;
    /**
     * @param entityID - The entity ID.
     * @param entityData - Entity data.
     */
    function updateAvatarEntity(entityID: Uuid, entityData: ArrayBuffer): void;
    /**
     * @param entityID - The entity ID.
     * @param [requiresRemovalFromTree = true] - unused
     */
    function clearAvatarEntity(entityID: Uuid, requiresRemovalFromTree?: boolean): void;
    /**
     * Enables blend shapes set using {@link Avatar.setBlendshape} or {@link MyAvatar.setBlendshape} to be transmitted to other
    users so that they can see the animation of your avatar's face.
    <p class="important">Deprecated: This method is deprecated and will be removed. Use the
    <code>Avatar.hasScriptedBlendshapes</code> or <code>MyAvatar.hasScriptedBlendshapes</code>  property instead.</p>
     * @param connected - <code>true</code> to enable blend shape changes to be transmitted to other users,
        <code>false</code> to disable.
     */
    function setForceFaceTrackerConnected(connected: boolean): void;
    /**
     * Sets the avatar's skeleton model.
     * @param url - The avatar's FST file.
     */
    function setSkeletonModelURL(url: string): void;
    /**
     * Gets information about the models currently attached to your avatar.
     * @example
     * <caption>Report the URLs of all current attachments.</caption>
    var attachments = MyAvatar.getaAttachmentData();
    for (var i = 0; i < attachments.length; i++) {
        print(attachments[i].modelURL);
    }
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns Information about all models attached to your avatar.
     */
    function getAttachmentData(): AttachmentData[];
    /**
     * Sets all models currently attached to your avatar. For example, if you retrieve attachment data using
    {@link MyAvatar.getAttachmentData} or {@link Avatar.getAttachmentData}, make changes to it, and then want to update your avatar's attachments per the
    changed data. You can also remove all attachments by using setting <code>attachmentData</code> to <code>null</code>.
     * @example
     * <caption>Remove a hat attachment if your avatar is wearing it.</caption>
    var hatURL = "https://apidocs.overte.org/examples/cowboy-hat.fbx";
    var attachments = MyAvatar.getAttachmentData();
    
    for (var i = 0; i < attachments.length; i++) {
        if (attachments[i].modelURL === hatURL) {
            attachments.splice(i, 1);
            MyAvatar.setAttachmentData(attachments);
            break;
        }
     }
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param attachmentData - The attachment data defining the models to have attached to your avatar. Use
        <code>null</code> to remove all attachments.
     */
    function setAttachmentData(attachmentData: AttachmentData[]): void;
    /**
     * Attaches a model to your avatar. For example, you can give your avatar a hat to wear, a guitar to hold, or a surfboard to
    stand on.
     * @example
     * <caption>Attach a cowboy hat to your avatar's head.</caption>
    var attachment = {
        modelURL: "https://apidocs.overte.org/examples/cowboy-hat.fbx",
        jointName: "Head",
        translation: {"x": 0, "y": 0.25, "z": 0},
        rotation: {"x": 0, "y": 0, "z": 0, "w": 1},
        scale: 0.01,
        isSoft: false
    };
    
     MyAvatar.attach(attachment.modelURL,
                     attachment.jointName,
                     attachment.translation,
                     attachment.rotation,
                     attachment.scale,
                     attachment.isSoft);
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param modelURL - The URL of the glTF, FBX, or OBJ model to attach. glTF models may be in JSON or binary format
        (".gltf" or ".glb" URLs respectively).
     * @param [jointName = ""] - The name of the avatar joint (see {@link MyAvatar.getJointNames} or
        {@link Avatar.getJointNames}) to attach the model to.
     * @param [translation = Vec3.ZERO] - The offset to apply to the model relative to the joint position.
     * @param [rotation = Quat.IDENTITY] - The rotation to apply to the model relative to the joint orientation.
     * @param [scale = 1.0] - The scale to apply to the model.
     * @param [isSoft = false] - If the model has a skeleton, set this to <code>true</code> so that the bones of the
        attached model's skeleton are rotated to fit the avatar's current pose. <code>isSoft</code> is used, for example,
        to have clothing that moves with the avatar.
        <p>If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and <code>scale</code> parameters are
        ignored.</p>
     * @param [allowDuplicates = false] - If <code>true</code> then more than one copy of any particular model may be
        attached to the same joint; if <code>false</code> then the same model cannot be attached to the same joint.
     * @param [useSaved = true] - <em>Not used.</em>
     */
    function attach(modelURL: string, jointName?: string, translation?: TVec3, rotation?: TQuat, scale?: number, isSoft?: boolean, allowDuplicates?: boolean, useSaved?: boolean): void;
    /**
     * Detaches the most recently attached instance of a particular model from either a specific joint or any joint.
     * @param modelURL - The URL of the model to detach.
     * @param [jointName = ""] - The name of the joint to detach the model from. If <code>""</code>, then the most
        recently attached model is removed from which ever joint it was attached to.
     */
    function detachOne(modelURL: string, jointName?: string): void;
    /**
     * Detaches all instances of a particular model from either a specific joint or all joints.
     * @param modelURL - The URL of the model to detach.
     * @param [jointName = ""] - The name of the joint to detach the model from. If <code>""</code>, then the model is
        detached from all joints.
     */
    function detachAll(modelURL: string, jointName?: string): void;
    /**
     * Gets the transform from the user's real world to the avatar's size, orientation, and position in the virtual world.
     * @example
     * <caption>Report the sensor to world matrix.</caption>
    var sensorToWorldMatrix = MyAvatar.getSensorToWorldMatrix();
    print("Sensor to woprld matrix: " + JSON.stringify(sensorToWorldMatrix));
    print("Rotation: " + JSON.stringify(Mat4.extractRotation(sensorToWorldMatrix)));
    print("Translation: " + JSON.stringify(Mat4.extractTranslation(sensorToWorldMatrix)));
    print("Scale: " + JSON.stringify(Mat4.extractScale(sensorToWorldMatrix)));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns The scale, rotation, and translation transform from the user's real world to the avatar's size,
        orientation, and position in the virtual world.
     */
    function getSensorToWorldMatrix(): TMat4;
    /**
     * Gets the scale that transforms dimensions in the user's real world to the avatar's size in the virtual world.
     * @returns The scale that transforms dimensions in the user's real world to the avatar's size in the virtual
        world.
     */
    function getSensorToWorldScale(): number;
    /**
     * Gets the rotation and translation of the left hand controller relative to the avatar.
     * @example
     * <caption>Report the left hand controller matrix.</caption>
    var leftHandMatrix = MyAvatar.getControllerLeftHandMatrix();
    print("Controller left hand matrix: " + JSON.stringify(leftHandMatrix));
    print("Rotation: " + JSON.stringify(Mat4.extractRotation(leftHandMatrix)));
    print("Translation: " + JSON.stringify(Mat4.extractTranslation(leftHandMatrix)));
    print("Scale: " + JSON.stringify(Mat4.extractScale(leftHandMatrix))); // Always 1,1,1.
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns The rotation and translation of the left hand controller relative to the avatar.
     */
    function getControllerLeftHandMatrix(): TMat4;
    /**
     * Gets the rotation and translation of the right hand controller relative to the avatar.
     * @returns The rotation and translation of the right hand controller relative to the avatar.
     */
    function getControllerRightHandMatrix(): TMat4;
    /**
     * Gets the amount of avatar mixer data being generated by the avatar.
     * @param [rateName = ""] - The type of avatar mixer data to get the data rate of.
     * @returns The data rate in kbps.
     */
    function getDataRate(rateName?: AvatarDataRate): number;
    /**
     * Gets the update rate of avatar mixer data being generated by the avatar.
     * @param [rateName = ""] - The type of avatar mixer data to get the update rate of.
     * @returns The update rate in Hz.
     */
    function getUpdateRate(rateName?: AvatarUpdateRate): number;
    /**
     * @param [sendAll = false] - Send all.
     */
    function sendAvatarDataPacket(sendAll?: boolean): number;
    function sendIdentityPacket(): number;
    /**
     * @param sessionUUID - Session UUID.
     */
    function setSessionUUID(sessionUUID: Uuid): void;
    /**
     * Gets the rotation of a joint relative to the avatar.
    <p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>
     * @param index - The index of the joint. <em>Not used.</em>
     * @returns <code>Quat.IDENTITY</code>.
     */
    function getAbsoluteJointRotationInObjectFrame(index: number): TQuat;
    /**
     * Gets the translation of a joint relative to the avatar.
    <p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>
     * @param index - The index of the joint. <em>Not used.</em>
     * @returns <code>Vec3.ZERO</code>.
     */
    function getAbsoluteJointTranslationInObjectFrame(index: number): TVec3;
    /**
     * Sets the rotation of a joint relative to the avatar.
    <p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>
     * @param index - The index of the joint. <em>Not used.</em>
     * @param rotation - The rotation of the joint relative to the avatar. <em>Not used.</em>
     * @returns <code>false</code>.
     */
    function setAbsoluteJointRotationInObjectFrame(index: number, rotation: TQuat): boolean;
    /**
     * Sets the translation of a joint relative to the avatar.
    <p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>
     * @param index - The index of the joint. <em>Not used.</em>
     * @param translation - The translation of the joint relative to the avatar. <em>Not used.</em>
     * @returns <code>false</code>.
     */
    function setAbsoluteJointTranslationInObjectFrame(index: number, translation: TVec3): boolean;
    /**
     * Gets the target scale of the avatar without any restrictions on permissible values imposed by the domain. In contrast, the
    <code>scale</code> property's value may be limited by the domain's settings.
     * @example
     * <caption>Compare the target and current avatar scales.</caption>
    print("Current avatar scale: " + MyAvatar.scale);
    print("Target avatar scale:  " + MyAvatar.getTargetScale());
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @returns The target scale of the avatar.
     */
    function getTargetScale(): number;
    function resetLastSent(): void;
    /**
     * The details of an animation that is playing.
     */
    type AnimationDetails = {
        /**
         * <em>Not used.</em>
         */
        role: string;
        /**
         * The URL to the animation file. Animation files need to be in glTF or FBX format but only need to
         * contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (".gltf" or ".glb" URLs
         * respectively).
         * <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>
         */
        url: string;
        /**
         * The frames per second(FPS) rate for the animation playback. 30 FPS is normal speed.
         */
        fps: number;
        /**
         * <em>Not used.</em>
         */
        priority: number;
        /**
         * <code>true</code> if the animation should loop, <code>false</code> if it shouldn't.
         */
        loop: boolean;
        /**
         * <em>Not used.</em>
         */
        hold: boolean;
        /**
         * The frame the animation should start at.
         */
        firstFrame: number;
        /**
         * The frame the animation should stop at.
         */
        lastFrame: number;
        /**
         * <em>Not used.</em>
         */
        running: boolean;
        /**
         * The current frame being played.
         */
        currentFrame: number;
        /**
         * <em>Not used.</em>
         */
        startAutomatically: boolean;
        /**
         * <em>Not used.</em>
         */
        allowTranslation: boolean;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Assignment Client Scripts</p>The <code>EntityViewer</code> API provides a headless viewer for assignment client scripts, so that they can "see" entities
in order for them to be available in the {@link Entities} API.
 */
declare namespace EntityViewer {
    /**
     * Updates the entities currently in view.
     */
    function queryOctree(): void;
    /**
     * Sets the position of the view frustum.
     * @param position - The position of the view frustum.
     */
    function setPosition(position: TVec3): void;
    /**
     * Sets the orientation of the view frustum.
     * @param orientation - The orientation of the view frustum.
     */
    function setOrientation(orientation: TQuat): void;
    /**
     * Sets the radius of the center "keyhole" in the view frustum.
     * @param radius - The radius of the center "keyhole" in the view frustum.
     */
    function setCenterRadius(radius: number): void;
    /**
     * Sets the radius of the center "keyhole" in the view frustum.
     * @param radius - The radius of the center "keyhole" in the view frustum.
     */
    function setKeyholeRadius(radius: number): void;
    /**
     * @param sizeScale - The voxel size scale.
     */
    function setVoxelSizeScale(sizeScale: number): void;
    /**
     * @param boundaryLevelAdjust - The boundary level adjust factor.
     */
    function setBoundaryLevelAdjust(boundaryLevelAdjust: number): void;
    /**
     * Sets the maximum number of entity packets to receive from the domain server per second.
     * @param maxPacketsPerSecond - The maximum number of entity packets to receive per second.
     */
    function setMaxPacketsPerSecond(maxPacketsPerSecond: number): void;
    /**
     * Gets the position of the view frustum.
     * @returns The position of the view frustum.
     */
    function getPosition(): TVec3;
    /**
     * Gets the orientation of the view frustum.
     * @returns The orientation of the view frustum.
     */
    function getOrientation(): TQuat;
    /**
     * @returns The voxel size scale.
     */
    function getVoxelSizeScale(): number;
    /**
     * @returns The boundary level adjust factor.
     */
    function getBoundaryLevelAdjust(): number;
    /**
     * Gets the maximum number of entity packets to receive from the domain server per second.
     * @returns The maximum number of entity packets to receive per second.
     */
    function getMaxPacketsPerSecond(): number;
    /**
     * Gets the number of nodes in the octree.
     * @returns The number of nodes in the octree.
     */
    function getOctreeElementsCount(): number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>About</code> API provides information about the version of Interface that is currently running. It also has the
functionality to open a web page in an Interface browser window.
 * @example
 * <caption>Report information on the version of Interface currently running.</caption>
print("Interface platform: " + About.platform);
print("Interface build date: " + About.buildDate);
print("Interface version: " + About.buildVersion);
print("Interface release name: " + About.releaseName);
print("Qt version: " + About.qtVersion);
 * @property platform - The name of the Interface platform running, e,g., <code>"Overte"</code> for the Overte.
    <em>Read-only.</em>
 * @property buildDate - The build date of Interface that is currently running. <em>Read-only.</em>
 * @property buildVersion - The build version of Interface that is currently running. <em>Read-only.</em>
 * @property releaseName - The release codename of the version that Interface is currently running. <em>Read-only.</em>
 * @property qtVersion - The Qt version used in Interface that is currently running. <em>Read-only.</em>
 * @property qtWebEngineVersion - The Qt WebEngine version used in Interface that is currently running. <em>Read-only.</em>
 * @property qtChromiumVersion - The Qt Chromium version used in Interface that is currently running. <em>Read-only.</em>
 */
declare namespace About {
    /**
     * Display a web page in an Interface browser window or the tablet.
     * @param url - The URL of the web page you want to view in Interface.
     */
    function openUrl(url: string): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>HifiAbout</code> API provides information about the version of Interface that is currently running. It also
has the functionality to open a web page in an Interface browser window.
 * @property platform - The name of the Interface platform running, e,g., <code>"Overte"</code> for the Overte.
    <em>Read-only.</em>
 * @property buildDate - The build date of Interface that is currently running. <em>Read-only.</em>
 * @property buildVersion - The build version of Interface that is currently running. <em>Read-only.</em>
 * @property qtVersion - The Qt version used in Interface that is currently running. <em>Read-only.</em>
 */
declare namespace HifiAbout {
    /**
     * Display a web page in an Interface browser window or the tablet.
     * @param url - The URL of the web page you want to view in Interface.
     */
    function openUrl(url: string): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AvatarBookmarks</code> API provides facilities for working with avatar bookmarks ("favorites" in the Avatar app).
An avatar bookmark associates a name with an avatar model, scale, and avatar entities (wearables).
 */
declare namespace AvatarBookmarks {
    /**
     * Details of an avatar bookmark.
     */
    type BookmarkData = {
        /**
         * The version of the bookmark data format.
         */
        version: number;
        /**
         * The URL of the avatar model.
         */
        avatarUrl: string;
        /**
         * The target scale of the avatar.
         */
        avatarScale: number;
        /**
         * The avatar entities included with the
         * bookmark.
         */
        avatarEntites?: {
            [key: string]: Entities.EntityProperties;
        }[];
        /**
         * The attachments included with the bookmark.
         * <p class="important">Deprecated: Use avatar entities instead.
         */
        attachments?: AttachmentData[];
    };
    /**
     * Gets the details of an avatar bookmark.
     * @param bookmarkName - The name of the avatar bookmark (case sensitive).
     * @returns The bookmark data if the bookmark exists, <code>{}</code> if it doesn't.
     */
    function getBookmark(bookmarkName: string): AvatarBookmarks.BookmarkData | any;
    /**
     * Adds a new (or updates an existing) avatar bookmark with your current avatar model, scale, and avatar entities.
     * @example
     * <caption>Add a new avatar bookmark and report the bookmark data.</caption>
    var bookmarkName = "New Bookmark";
    AvatarBookmarks.addBookmark(bookmarkName);
    var bookmarkData = AvatarBookmarks.getBookmark(bookmarkName);
    print("Bookmark data: " + JSON.stringify(bookmarkData));
     * @param bookmarkName - The name of the avatar bookmark (case sensitive).
     */
    function addBookmark(bookmarkName: string): void;
    /**
     * Updates an existing bookmark with your current avatar model, scale, and wearables. No action is taken if the bookmark
    doesn't exist.
     * @param bookmarkName - The name of the avatar bookmark (case sensitive).
     */
    function saveBookmark(bookmarkName: string): void;
    /**
     * Loads an avatar bookmark, setting your avatar model, scale, and avatar entities (or attachments if an old bookmark) to
    those in the bookmark.
     * @param bookmarkName - The name of the avatar bookmark to load (case sensitive).
     */
    function loadBookmark(bookmarkName: string): void;
    /**
     * Deletes an avatar bookmark.
     * @param bookmarkName - The name of the avatar bookmark to delete (case sensitive).
     */
    function removeBookmark(bookmarkName: string): void;
    /**
     * Updates the avatar entities and their properties. Current avatar entities not included in the list provided are deleted.
     * @param avatarEntities - The avatar entity IDs and properties.
     */
    function updateAvatarEntities(avatarEntities: MyAvatar.AvatarEntityData[]): void;
    /**
     * Gets the details of all avatar bookmarks.
     * @example
     * <caption>List the names and URLs of all the avatar bookmarks.</caption>
    var bookmarks = AvatarBookmarks.getBookmarks();
    print("Avatar bookmarks:");
    for (var key in bookmarks) {
        print("- " + key + " " + bookmarks[key].avatarUrl);
    };
     * @returns The current avatar bookmarks in an object where the keys are the
        bookmark names and the values are the bookmark details.
     */
    function getBookmarks(): {
        [key: string]: AvatarBookmarks.BookmarkData;
    };
    /**
     * Performs no action.
     */
    function deleteBookmark(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Camera</code> API provides access to the "camera" that defines your view in desktop and HMD display modes.
The Overte camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.
 * @property position - The position of the camera. You can set this value only when the camera is in independent
    mode.
 * @property orientation - The orientation of the camera. You can set this value only when the camera is in
    independent mode.
 * @property mode - The camera mode.
 * @property frustum - The camera frustum.
 * @property cameraEntity - The ID of the entity that is used for the camera position and orientation when the
    camera is in entity mode.
 * @property captureMouse - The mouse capture state.  When <code>true</code>, the mouse is invisible and cannot leave the bounds of
Interface, as long as Interface is the active window and no menu item is selected.  When <code>false</code>, the mouse
behaves normally.
 * @property sensitivity - The current camera sensitivity.  Must be positive.
 */
declare namespace Camera {
    /**
     * Gets the ID of the entity that the camera is set to follow (i.e., use the position and orientation from) when it's in
    entity mode. You can also get the entity ID using the {@link Camera|Camera.cameraEntity} property.
     * @returns The ID of the entity that the camera is set to follow when in entity mode; <code>null</code> if no
        camera entity has been set.
     */
    function getCameraEntity(): Uuid;
    /**
     * Sets the entity that the camera should follow (i.e., use the position and orientation from) when it's in entity mode.
    You can also set the entity using the {@link Camera|Camera.cameraEntity} property.
     * @example
     * <caption>Move your camera to the position and orientation of the closest entity.</caption>
    Camera.setModeString("entity");
    var entity = Entities.findClosestEntity(MyAvatar.position, 100.0);
    Camera.setCameraEntity(entity);
     *
     * @param entityID - The entity that the camera should follow when it's in entity mode.
     */
    function setCameraEntity(entityID: Uuid): void;
    /**
     * <p>Camera modes affect the position of the camera and the controls for camera movement. The camera can be in one of the
    following modes:</p>
    <table>
      <thead>
        <tr>
          <th>Mode</th>
          <th>String</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><strong>First&nbsp;Person</strong></td>
          <td><code>"first&nbsp;person"</code></td>
          <td><p>The camera is positioned such that you have the same view as your avatar. The camera moves and rotates with
          your avatar.</p>
          <p><em>Legacy first person camera mode.</em></p></td>
        </tr>
        <tr>
          <td><strong>First&nbsp;Person&nbsp;Look&nbsp;At</strong></td>
          <td><code>"first&nbsp;person&nbsp;look&nbsp;at"</code></td>
          <td><p>The camera is positioned such that you have the same view as your avatar. The camera moves and rotates with
          your avatar's head.</p>
          <p><em>Default first person camera mode.</em></p></td>
        </tr>
        <tr>
          <td><strong>Third&nbsp;Person</strong></td>
          <td><code>"third&nbsp;person"</code></td>
          <td><p>The camera is positioned such that you have a view from just behind your avatar. The camera moves and rotates
          with your avatar.</p>
          <p><em>Legacy third person camera camera mode.</em></p>
          <pre class="prettyprint"><code>Camera.mode = "third person";</code></pre></td>
        </tr>
        <tr>
          <td><strong>Look&nbsp;At</strong></td>
          <td><code>"look&nbsp;at"</code></td>
          <td><p>The camera is positioned behind your avatar. The camera moves and rotates independently from your avatar. The
          avatar's head always faces the camera look at point.</p>
          <p><em>Default third person camera mode.</em></td>
        </tr>
        <tr>
          <td><strong>Selfie</strong></td>
          <td><code>"selfie"</code></td>
          <td><p>The camera is positioned in front of your avatar. The camera moves and rotates independently from your avatar.
          Your avatar's head is always facing the camera.</p>
          <p><em>Default "look at myself" camera mode.</em></p></td>
        </tr>
        <tr>
          <td><strong>Mirror</strong></td>
          <td><code>"mirror"</code></td>
          <td><p>The camera is positioned such that you are looking directly at your avatar. The camera is fixed and does not
          move with your avatar.</p>
          <p><em>Legacy "look at myself" behavior.</em></p>
          <pre class="prettyprint"><code>Camera.mode = "mirror";</code></pre></td>
        </tr>
        <tr>
          <td><strong>Independent</strong></td>
          <td><code>"independent"</code></td>
          <td>The camera's position and orientation don't change with your avatar movement. Instead, they can be set via
          scripting.</td>
        </tr>
        <tr>
          <td><strong>Entity</strong></td>
          <td><code>"entity"</code></td>
          <td>The camera's position and orientation are set to be the same as a specified entity's, and move with the entity as
          it moves.
        </tr>
      </tbody>
    </table>
     */
    type Mode = string;
    /**
     * Gets the current camera mode. You can also get the mode using the {@link Camera|Camera.mode} property.
     * @returns The current camera mode.
     */
    function getModeString(): Camera.Mode;
    /**
     * Sets the camera mode. You can also set the mode using the {@link Camera|Camera.mode} property.
     * @param mode - The mode to set the camera to.
     */
    function setModeString(mode: Camera.Mode): void;
    /**
     * Gets the current camera position. You can also get the position using the {@link Camera|Camera.position} property.
     * @returns The current camera position.
     */
    function getPosition(): TVec3;
    /**
     * Sets the camera position. You can also set the position using the {@link Camera|Camera.position} property. Only works if
    the camera is in independent mode.
     * @param position - The position to set the camera at.
     */
    function setPosition(position: TVec3): void;
    /**
     * Gets the current camera orientation. You can also get the orientation using the {@link Camera|Camera.orientation}
    property.
     * @returns The current camera orientation.
     */
    function getOrientation(): TQuat;
    /**
     * Sets the camera orientation. You can also set the orientation using the {@link Camera|Camera.orientation} property. Only
    works if the camera is in independent mode.
     * @param orientation - The orientation to set the camera to.
     */
    function setOrientation(orientation: TQuat): void;
    /**
     * Gets the current mouse capture state.
     * @returns <code>true</code> if the mouse is captured (is invisible and cannot leave the bounds of Interface,
    if Interface is the active window and no menu item is selected), <code>false</code> if the mouse is behaving normally.
     */
    function getCaptureMouse(): boolean;
    /**
     * Sets the mouse capture state.  When <code>true</code>, the mouse is invisible and cannot leave the bounds of
    Interface, as long as Interface is the active window and no menu item is selected.  When <code>false</code>, the mouse
    behaves normally.
     * @param captureMouse - <code>true</code> to capture the mouse, <code>false</code> to release the mouse.
     */
    function setCaptureMouse(captureMouse: boolean): void;
    /**
     * Gets the current camera sensitivity.
     * @returns The current camera sensitivity.  Must be positive.
     */
    function getSensitivity(): number;
    /**
     * Sets the camera sensitivity.  Higher values mean that the camera will be more sensitive to mouse movements.
     * @param sensitivity - The desired camera sensitivity.  Must be positive.
     */
    function setSensitivity(sensitivity: number): void;
    /**
     * Computes a {@link PickRay} based on the current camera configuration and the specified <code>x, y</code> position on the
    screen. The {@link PickRay} can be used in functions such as {@link Entities.findRayIntersection} and
    {@link Overlays.findRayIntersection}.
     * @example
     * <caption>Use a PickRay to detect mouse clicks on entities.</caption>
    function onMousePressEvent(event) {
        var pickRay = Camera.computePickRay(event.x, event.y);
        var intersection = Entities.findRayIntersection(pickRay);
        if (intersection.intersects) {
            print("You clicked on entity " + intersection.entityID);
        }
    }
    
    Controller.mousePressEvent.connect(onMousePressEvent);
     * @param x - X-coordinate on screen.
     * @param y - Y-coordinate on screen.
     * @returns The computed {@link PickRay}.
     */
    function computePickRay(x: number, y: number): PickRay;
    /**
     * Rotates the camera to look at the specified <code>position</code>. Only works if the camera is in independent mode.
     * @example
     * <caption>Rotate your camera to look at entities as you click on them with your mouse.</caption>
    function onMousePressEvent(event) {
        var pickRay = Camera.computePickRay(event.x, event.y);
        var intersection = Entities.findRayIntersection(pickRay);
        if (intersection.intersects) {
            // Switch to independent mode.
            Camera.mode = "independent";
            // Look at the entity that was clicked.
            var properties = Entities.getEntityProperties(intersection.entityID, "position");
            Camera.lookAt(properties.position);
        }
    }
    
    Controller.mousePressEvent.connect(onMousePressEvent);
     * @param position - The position to look at.
     */
    function lookAt(position: TVec3): void;
    /**
     * Sets the camera to continue looking at the specified <code>position</code> even while the camera moves. Only works if
    the camera is in independent mode.
     * @param position - The position to keep looking at.
     */
    function keepLookingAt(position: TVec3): void;
    /**
     * Stops the camera from continually looking at the position that was set with {@link Camera.keepLookingAt}.
     */
    function stopLookingAt(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>LocationBookmarks</code> API provides facilities for working with location bookmarks. A location bookmark
associates a name with a directory services address.
 */
declare namespace LocationBookmarks {
    /**
     * Prompts the user to delete a bookmark. The user can select the bookmark to delete in the dialog that is opened.
     */
    function deleteBookmark(): void;
    /**
     * Gets the directory services address associated with a bookmark.
     * @example
     * <caption>Report the "Home" bookmark's directory services address.</caption>
    print("Home bookmark's address: " + LocationBookmarks.getAddress("Home"));
     * @param bookmarkName - Name of the bookmark to get the directory services address for (case sensitive).
     * @returns The directory services address for the bookmark. If the bookmark does not exist, <code>""</code> is returned.
     */
    function getAddress(bookmarkName: string): string;
    /**
     * Prompts the user to bookmark their current location. The user can specify the name of the bookmark in the dialog that is
    opened.
     */
    function addBookmark(): void;
    /**
     * Sets the directory services address associated with the "Home" bookmark.
     * @param address - The directory services address to set the "Home" bookmark to.
     */
    function setHomeLocationToAddress(address: string): void;
    /**
     * Gets the directory services address associated with the "Home" bookmark.
     * @returns The directory services address for the "Home" bookmark.
     */
    function getHomeLocationAddress(): string;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>LODManager</code> API manages the Level of Detail displayed in Interface. If the LOD is being automatically
adjusted, the LOD is decreased if the measured frame rate is lower than the target FPS, and increased if the measured frame
rate is greater than the target FPS.
 * @property worldDetailQuality - The quality of the rendered world detail.
    <p>Setting this value updates the current desktop or HMD target LOD FPS.</p>
 * @property lodQualityLevel - <em>Not used.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property automaticLODAdjust - <code>true</code> to automatically adjust the LOD, <code>false</code> to manually
    adjust it.
 * @property engineRunTime - The time spent in the "render" thread to produce the most recent frame, in ms.
    <em>Read-only.</em>
 * @property batchTime - The time spent in the "present" thread processing the batches of the most recent frame, in ms.
    <em>Read-only.</em>
 * @property presentTime - The time spent in the "present" thread between the last buffer swap, i.e., the total time
    to submit the most recent frame, in ms.
    <em>Read-only.</em>
 * @property gpuTime - The time spent in the GPU executing the most recent frame, in ms.
    <em>Read-only.</em>
 * @property nowRenderTime - The current, instantaneous time spend to produce frames, in ms. This is the worst of
    <code>engineRunTime</code>, <code>batchTime</code>, <code>presentTime</code>, and <code>gpuTime</code>.
    <em>Read-only.</em>
 * @property nowRenderFPS - The current, instantaneous frame rate, in Hz.
    <em>Read-only.</em>
 * @property smoothScale - The amount of smoothing applied to calculate <code>smoothRenderTime</code> and
    <code>smoothRenderFPS</code>.
 * @property smoothRenderTime - The average time spend to produce frames, in ms.
    <em>Read-only.</em>
 * @property smoothRenderFPS - The average frame rate, in Hz.
    <em>Read-only.</em>
 * @property lodTargetFPS - The target LOD FPS per the current desktop or HMD display mode, capped by the target
    refresh rate set by the {@link Performance} API.
    <em>Read-only.</em>
 * @property lodAngleDeg - The minimum angular dimension (relative to the camera position) of an entity in order for
    it to be rendered, in degrees. The angular dimension is calculated as a sphere of radius half the diagonal of the
    entity's AA box.
 * @property pidKp - <em>Not used.</em>
 * @property pidKi - <em>Not used.</em>
 * @property pidKd - <em>Not used.</em>
 * @property pidKv - <em>Not used.</em>
 * @property pidOp - <em>Not used.</em> <em>Read-only.</em>
 * @property pidOi - <em>Not used.</em> <em>Read-only.</em>
 * @property pidOd - <em>Not used.</em> <em>Read-only.</em>
 * @property pidO - <em>Not used.</em> <em>Read-only.</em>
 */
declare namespace LODManager {
    /**
     * <p>The world detail quality rendered.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>Low world detail quality.</td></tr>
        <tr><td><code>1</code></td><td>Medium world detail quality.</td></tr>
        <tr><td><code>2</code></td><td>High world detail quality.</td></tr>
      </tbody>
    </table>
     */
    type WorldDetailQuality = number;
    /**
     * Sets whether the LOD should be automatically adjusted.
     * @param value - <code>true</code> to automatically adjust the LOD, <code>false</code> to manually adjust it.
     */
    function setAutomaticLODAdjust(value: boolean): void;
    /**
     * Gets whether the LOD is being automatically adjusted.
     * @returns <code>true</code> if the LOD is being automatically adjusted, <code>false</code> if it is being
        manually adjusted.
     */
    function getAutomaticLODAdjust(): boolean;
    /**
     * Sets the target desktop LOD FPS.
     * @param value - The target desktop LOD FPS, in Hz.
     */
    function setDesktopLODTargetFPS(value: number): void;
    /**
     * Gets the target desktop LOD FPS.
     * @returns The target desktop LOD FPS, in Hz.
     */
    function getDesktopLODTargetFPS(): number;
    /**
     * Sets the target HMD LOD FPS.
     * @param value - The target HMD LOD FPS, in Hz.
     */
    function setHMDLODTargetFPS(value: number): void;
    /**
     * Gets the target HMD LOD FPS.
    The target FPS in HMD mode. The LOD is adjusted to ...
     * @returns The target HMD LOD FPS, in Hz.
     */
    function getHMDLODTargetFPS(): number;
    /**
     * Gets a text description of the current level of detail rendered.
     * @example
     * <caption>Report the current level of detail rendered.</caption>
    print("You can currently see: " + LODManager.getLODFeedbackText());
     * @returns A text description of the current level of detail rendered.
     */
    function getLODFeedbackText(): string;
    /**
     * @param sizeScale - The octree size scale.
     */
    function setOctreeSizeScale(sizeScale: number): void;
    /**
     * @returns The octree size scale.
     */
    function getOctreeSizeScale(): number;
    /**
     * @param boundaryLevelAdjust - The boundary level adjust factor.
     */
    function setBoundaryLevelAdjust(boundaryLevelAdjust: number): void;
    /**
     * @returns The boundary level adjust factor.
     */
    function getBoundaryLevelAdjust(): number;
    /**
     * The target LOD FPS per the current desktop or HMD display mode, capped by the target refresh rate.
     * @returns The target LOD FPS, in Hz.
     */
    function getLODTargetFPS(): number;
}

/**
 * <p>Refresh rate profile.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"Eco"</code></td><td>Low refresh rate, which is reduced when Interface doesn't have focus or is
        minimized.</td></tr>
    <tr><td><code>"Interactive"</code></td><td>Medium refresh rate, which is reduced when Interface doesn't have focus or is
        minimized.</td></tr>
    <tr><td><code>"Realtime"</code></td><td>High refresh rate, even when Interface doesn't have focus or is minimized.
  </tbody>
</table>
 */
declare type RefreshRateProfileName = string;

/**
 * <p>Interface states that affect the refresh rate.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"FocusActive"</code></td><td>Interface has focus and the user is active or is in VR.</td></tr>
    <tr><td><code>"FocusInactive"</code></td><td>Interface has focus and the user is inactive.</td></tr>
    <tr><td><code>"Unfocus"</code></td><td>Interface doesn't have focus.</td></tr>
    <tr><td><code>"Minimized"</code></td><td>Interface is minimized.</td></tr>
    <tr><td><code>"StartUp"</code></td><td>Interface is starting up.</td></tr>
    <tr><td><code>"ShutDown"</code></td><td>Interface is shutting down.</td></tr>
  </tbody>
</table>
 */
declare type RefreshRateRegimeName = string;

/**
 * <p>User experience (UX) modes.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"Desktop"</code></td><td>Desktop user experience.</td></tr>
    <tr><td><code>"VR"</code></td><td>VR user experience.</td></tr>
  </tbody>
</table>
 */
declare type UXModeName = string;

/**
 * <p>Interface states that affect the refresh rate.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Name</th><th>Description</th>
  </thead>
  <tbody>
    <tr><td><code>0</code></td><td>FOCUS_ACTIVE</td><td>Interface has focus and the user is active or is in VR.</td></tr>
    <tr><td><code>1</code></td><td>FOCUS_INACTIVE</td><td>Interface has focus and the user is inactive.</td></tr>
    <tr><td><code>2</code></td><td>UNFOCUS</td><td>Interface doesn't have focus.</td></tr>
    <tr><td><code>3</code></td><td>MINIMIZED</td><td>Interface is minimized.</td></tr>
    <tr><td><code>4</code></td><td>STARTUP</td><td>Interface is starting up.</td></tr>
    <tr><td><code>5</code></td><td>SHUTDOWN</td><td>Interface is shutting down.</td></tr>
  </tbody>
</table>
 */
declare type RefreshRateRegime = number;

/**
 * <p>User experience (UX) modes.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Name</th><th>Description</th>
  </thead>
  <tbody>
    <tr><td><code>0</code></td><td>DESKTOP</td><td>Desktop user experience.</td></tr>
    <tr><td><code>1</code></td><td>VR</td><td>VR use experience.</td></tr>
  </tbody>
</table>
 */
declare type UXMode = number;

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>SpeechRecognizer</code> API provides facilities to recognize voice commands.
<p>Speech recognition is enabled or disabled via the Developer &gt; Scripting &gt; Enable Speech Control API menu item or
the {@link SpeechRecognizer.setEnabled} method.</p>
 */
declare namespace SpeechRecognizer {
    /**
     * Enables or disables speech recognition.
     * @param enabled - <code>true</code> to enable speech recognition, <code>false</code> to disable.
     */
    function setEnabled(enabled: boolean): void;
    /**
     * Adds a voice command to the speech recognizer.
     * @param command - The voice command to recognize.
     */
    function addCommand(command: string): void;
    /**
     * Removes a voice command from the speech recognizer.
     * @param command - The voice command to stop recognizing.
     */
    function removeCommand(command: string): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AvatarManager</code> API provides information about avatars within the current domain. The avatars available are
those that Interface has displayed and therefore knows about.

<p><strong>Warning:</strong> This API is also provided to Interface, client entity, and avatar scripts as the synonym,
"<code>AvatarList</code>". For assignment client scripts, see the separate {@link AvatarList} API.</p>
 */
declare namespace AvatarManager {
    /**
     * PAL (People Access List) data for an avatar.
     */
    type PalData = {
        /**
         * The avatar's session ID. <code>""</code> if the avatar is your own.
         */
        sessionUUID: Uuid;
        /**
         * The avatar's display name, sanitized and versioned, as defined by the avatar mixer.
         * It is unique among all avatars present in the domain at the time.
         */
        sessionDisplayName: string;
        /**
         * The instantaneous loudness of the audio input that the avatar is injecting into the
         * domain.
         */
        audioLoudness: number;
        /**
         * <span class="important">Deprecated: This property is deprecated and will be
         * removed.</span>
         */
        isReplicated: boolean;
        /**
         * The position of the avatar.
         */
        position: TVec3;
        /**
         * The vertical offset from the avatar's position that an overlay orb should be displayed at.
         */
        palOrbOffset: number;
    };
    /**
     * Gets the IDs of all avatars known about in the domain.
    Your own avatar is included in the list as a <code>null</code> value.
     * @example
     * <caption>Report the IDS of all avatars within the domain.</caption>
    var avatars = AvatarManager.getAvatarIdentifiers();
    print("Avatars in the domain: " + JSON.stringify(avatars));
    // A null item is included for your avatar.
     * @returns The IDs of all known avatars in the domain.
     */
    function getAvatarIdentifiers(): Uuid[];
    /**
     * Gets the IDs of all avatars known about within a specified distance from a point.
    Your own avatar's ID is included in the list if it is in range.
     * @example
     * <caption>Report the IDs of all avatars within 10m of your avatar.</caption>
    var RANGE = 10;
    var avatars = AvatarManager.getAvatarsInRange(MyAvatar.position, RANGE);
    print("Nearby avatars: " + JSON.stringify(avatars));
    print("Own avatar: " + MyAvatar.sessionUUID);
     * @param position - The point about which the search is performed.
     * @param range - The search radius.
     * @returns The IDs of all known avatars within the search distance from the position.
     */
    function getAvatarsInRange(position: TVec3, range: number): Uuid[];
    /**
     * Gets the amount of avatar mixer data being generated by an avatar other than your own.
     * @param sessionID - The ID of the avatar whose data rate you're retrieving.
     * @param [rateName = ""] - The type of avatar mixer data to get the data rate of.
     * @returns The data rate in kbps; <code>0</code> if the avatar is your own.
     */
    function getAvatarDataRate(sessionID: Uuid, rateName?: AvatarDataRate): number;
    /**
     * Gets the update rate of avatar mixer data being generated by an avatar other than your own.
     * @param sessionID - The ID of the avatar whose update rate you're retrieving.
     * @param [rateName = ""] - The type of avatar mixer data to get the update rate of.
     * @returns The update rate in Hz; <code>0</code> if the avatar is your own.
     */
    function getAvatarUpdateRate(sessionID: Uuid, rateName?: AvatarUpdateRate): number;
    /**
     * Gets the simulation rate of an avatar other than your own.
     * @param sessionID - The ID of the avatar whose simulation you're retrieving.
     * @param [rateName = ""] - The type of avatar data to get the simulation rate of.
     * @returns The simulation rate in Hz; <code>0</code> if the avatar is your own.
     */
    function getAvatarSimulationRate(sessionID: Uuid, rateName?: AvatarSimulationRate): number;
    /**
     * Find the first avatar intersected by a {@link PickRay}.
     * @example
     * <caption>Find the first avatar directly in front of you.</caption>
    var pickRay = {
        origin: MyAvatar.position,
        direction: Quat.getFront(MyAvatar.orientation)
    };
    
    var intersection = AvatarManager.findRayIntersection(pickRay);
    if (intersection.intersects) {
        print("Avatar found: " + JSON.stringify(intersection));
    } else {
        print("No avatar found.");
    }
     * @param ray - The ray to use for finding avatars.
     * @param [avatarsToInclude = []] - If not empty then search is restricted to these avatars.
     * @param [avatarsToDiscard = []] - Avatars to ignore in the search.
     * @param [pickAgainstMesh = true] - If <code>true</code> then the exact intersection with the avatar mesh is
        calculated, if <code>false</code> then the intersection is approximate.
     * @returns The result of the search for the first intersected avatar.
     */
    function findRayIntersection(ray: PickRay, avatarsToInclude?: Uuid[], avatarsToDiscard?: Uuid[], pickAgainstMesh?: boolean): RayToAvatarIntersectionResult;
    /**
     * @param ray - Ray.
     * @param avatarsToInclude - Avatars to include.
     * @param avatarsToDiscard - Avatars to discard.
     * @param pickAgainstMesh - Pick against mesh.
     * @returns Intersection result.
     */
    function findRayIntersectionVector(ray: PickRay, avatarsToInclude: Uuid[], avatarsToDiscard: Uuid[], pickAgainstMesh: boolean): RayToAvatarIntersectionResult;
    /**
     * @param pick - Pick.
     * @param avatarsToInclude - Avatars to include.
     * @param avatarsToDiscard - Avatars to discard.
     * @returns Intersection result.
     */
    function findParabolaIntersectionVector(pick: PickParabola, avatarsToInclude: Uuid[], avatarsToDiscard: Uuid[]): ParabolaToAvatarIntersectionResult;
    /**
     * @param name - Name.
     * @returns Value.
     */
    function getAvatarSortCoefficient(name: string): number;
    /**
     * @param name - Name
     * @param value - Value.
     */
    function setAvatarSortCoefficient(name: string, value: number): void;
    /**
     * Gets PAL (People Access List) data for one or more avatars. Using this method is faster than iterating over each avatar
    and obtaining data about each individually.
     * @example
     * <caption>Report the PAL data for an avatar nearby.</caption>
    var palData = AvatarManager.getPalData();
    print("PAL data for one avatar: " + JSON.stringify(palData.data[0]));
     * @param [avatarIDs = []] - The IDs of the avatars to get the PAL data for. If empty, then PAL data is obtained
        for all avatars.
     * @returns An array of objects, each object being the PAL data for an avatar.
     */
    function getPalData(avatarIDs?: string[]): {
        [key: string]: AvatarManager.PalData[];
    };
    /**
     * @param shouldRenderAvatars - Should render avatars.
     */
    function updateAvatarRenderStatus(shouldRenderAvatars: boolean): void;
    /**
     * Displays other avatars skeletons debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawOtherSkeletons(enabled: boolean): void;
    /**
     * Gets information about an avatar.
     * @param avatarID - The ID of the avatar.
     * @returns Information about the avatar.
     */
    function getAvatar(avatarID: Uuid): ScriptAvatar;
    /**
     * Checks whether there is an avatar within a specified distance from a point.
     * @param position - The test position.
     * @param range - The test distance.
     * @returns <code>true</code> if there's an avatar within the specified distance of the point, <code>false</code>
        if not.
     */
    function isAvatarInRange(position: string, range: string): boolean;
    /**
     * @param sessionUUID - New session ID.
     * @param oldSessionUUID - Old session ID.
     */
    function sessionUUIDChanged(sessionUUID: Uuid, oldSessionUUID: Uuid): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processAvatarDataPacket(message: any, sendingNode: any): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processAvatarIdentityPacket(message: any, sendingNode: any): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processBulkAvatarTraits(message: any, sendingNode: any): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processKillAvatar(message: any, sendingNode: any): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Your avatar is your in-world representation of you. The <code>MyAvatar</code> API is used to manipulate the avatar.
For example, you can customize the avatar's appearance, run custom avatar animations,
change the avatar's position within the domain, or manage the avatar's collisions with the environment and other avatars.

<p>For assignment client scripts, see {@link Avatar}.</p>
 * @property position - The position of the avatar.
 * @property scale - The scale of the avatar. The value can be set to anything between <code>0.005</code> and
    <code>1000.0</code>. When the scale value is fetched, it may temporarily be further limited by the domain's settings.
 * @property density - The density of the avatar in kg/m<sup>3</sup>. The density is used to work out its mass in
    the application of physics. <em>Read-only.</em>
 * @property handPosition - A user-defined hand position, in world coordinates. The position moves with the avatar
   but is otherwise not used or changed by Interface.
 * @property bodyYaw - The left or right rotation about an axis running from the head to the feet of the avatar.
    Yaw is sometimes called "heading".
 * @property bodyPitch - The rotation about an axis running from shoulder to shoulder of the avatar. Pitch is
    sometimes called "elevation".
 * @property bodyRoll - The rotation about an axis running from the chest to the back of the avatar. Roll is
    sometimes called "bank".
 * @property orientation - The orientation of the avatar.
 * @property headOrientation - The orientation of the avatar's head.
 * @property headPitch - The rotation about an axis running from ear to ear of the avatar's head. Pitch is
    sometimes called "elevation".
 * @property headYaw - The rotation left or right about an axis running from the base to the crown of the avatar's
    head. Yaw is sometimes called "heading".
 * @property headRoll - The rotation about an axis running from the nose to the back of the avatar's head. Roll is
    sometimes called "bank".
 * @property velocity - The current velocity of the avatar.
 * @property angularVelocity - The current angular velocity of the avatar.
 * @property audioLoudness - The instantaneous loudness of the audio input that the avatar is injecting into the
    domain.
 * @property audioAverageLoudness - The rolling average loudness of the audio input that the avatar is injecting
    into the domain.
 * @property displayName - The avatar's display name.
 * @property sessionDisplayName - <code>displayName's</code> sanitized and default version defined by the avatar
    mixer rather than Interface clients. The result is unique among all avatars present in the domain at the time.
 * @property lookAtSnappingEnabled - <code>true</code> if the avatar's eyes snap to look at another avatar's
    eyes when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.
 * @property skeletonModelURL - The avatar's FST file.
 * @property attachmentData - Information on the avatar's attachments.
    <p class="important">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>
 * @property jointNames - The list of joints in the current avatar model. <em>Read-only.</em>
 * @property sessionUUID - Unique ID of the avatar in the domain. <em>Read-only.</em>
 * @property sensorToWorldMatrix - The scale, rotation, and translation transform from the user's real world to the
    avatar's size, orientation, and position in the virtual world. <em>Read-only.</em>
 * @property controllerLeftHandMatrix - The rotation and translation of the left hand controller relative to the
    avatar. <em>Read-only.</em>
 * @property controllerRightHandMatrix - The rotation and translation of the right hand controller relative to the
    avatar. <em>Read-only.</em>
 * @property sensorToWorldScale - The scale that transforms dimensions in the user's real world to the avatar's
    size in the virtual world. <em>Read-only.</em>
 * @property hasPriority - <code>true</code> if the avatar is in a "hero" zone, <code>false</code> if it isn't.
    <em>Read-only.</em>
 * @property hasScriptedBlendshapes - <code>true</code> if blend shapes are controlled by scripted actions,
    otherwise <code>false</code>. Set this to <code>true</code> before using the {@link MyAvatar.setBlendshape} method,
    and set back to <code>false</code> after you no longer want scripted control over the blend shapes.
    <p><strong>Note:</strong> This property will automatically be set to <code>true</code> if the controller system has
    valid facial blend shape actions.</p>
 * @property hasProceduralBlinkFaceMovement - <code>true</code> if avatars blink automatically by animating
    facial blend shapes, <code>false</code> if automatic blinking is disabled. Set to <code>false</code> to fully control
    the blink facial blend shapes via the {@link MyAvatar.setBlendshape} method.
 * @property hasProceduralEyeFaceMovement - <code>true</code> if the facial blend shapes for an avatar's eyes
    adjust automatically as the eyes move, <code>false</code> if this automatic movement is disabled. Set this property
    to <code>true</code> to prevent the iris from being obscured by the upper or lower lids. Set to <code>false</code> to
    fully control the eye blend shapes via the {@link MyAvatar.setBlendshape} method.
 * @property hasAudioEnabledFaceMovement - <code>true</code> if the avatar's mouth blend shapes animate
    automatically based on detected microphone input, <code>false</code> if this automatic movement is disabled. Set
    this property to <code>false</code> to fully control the mouth facial blend shapes via the
    {@link MyAvatar.setBlendshape} method.
 * @property skeletonOffset - Can be used to apply a translation offset between the avatar's position and the
    registration point of the 3D model.
 * @property qmlPosition - A synonym for <code>position</code> for use by QML.
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property feetPosition - The position of the avatar's feet.
 * @property shouldRenderLocally - If <code>true</code> then your avatar is rendered for you in Interface,
    otherwise it is not rendered for you (but it is still rendered for other users).
 * @property motorVelocity - The target velocity of your avatar to be achieved by a scripted motor.
 * @property motorTimescale - The timescale for the scripted motor to achieve the target
    <code>motorVelocity</code> avatar velocity. Smaller values result in higher acceleration.
 * @property motorReferenceFrame - Reference frame of the <code>motorVelocity</code>. Must be one of the
    following: <code>"camera"</code>, <code>"avatar"</code>, and <code>"world"</code>.
 * @property motorMode - The Type of scripted motor behavior: <code>"simple"</code> to use the
    <code>motorTimescale</code> time scale; <code>"dynamic"</code> to use character controller timescales.
 * @property collisionSoundURL - The sound that's played when the avatar experiences a
    collision. It can be a mono or stereo 16-bit WAV file running at either 24kHz or 48kHz. The latter is down-sampled
    by the audio mixer, so all audio effectively plays back at a 24khz. 48kHz RAW files are also supported.
 * @property audioListenerMode - Specifies the listening position when hearing spatialized audio. Must be one
    of the following property values:
    <ul>
        <li><code>MyAvatar.audioListenerModeHead</code></li>
        <li><code>MyAvatar.audioListenerModeCamera</code></li>
        <li><code>MyAvatar.audioListenerModeCustom</code></li>
    </ul>
 * @property audioListenerModeHead - The audio listening position is at the avatar's head. <em>Read-only.</em>
 * @property audioListenerModeCamera - The audio listening position is at the camera. <em>Read-only.</em>
 * @property audioListenerModeCustom - The audio listening position is at a the position specified by set by the
    <code>customListenPosition</code> and <code>customListenOrientation</code> property values. <em>Read-only.</em>
 * @property customListenPosition - The listening position used when the <code>audioListenerMode</code>
    property value is <code>audioListenerModeCustom</code>.
 * @property customListenOrientation - The listening orientation used when the
    <code>audioListenerMode</code> property value is <code>audioListenerModeCustom</code>.
 * @property rotationRecenterFilterLength - Configures how quickly the avatar root rotates to recenter its facing
    direction to match that of the user's torso based on head and hands orientation. A smaller value makes the
    recentering happen more quickly. The minimum value is <code>0.01</code>.
 * @property rotationThreshold - The angle in radians that the user's torso facing direction (based on head and
    hands orientation) can differ from that of the avatar before the avatar's root is rotated to match the user's torso.
 * @property enableStepResetRotation - If <code>true</code> then after the user's avatar takes a step, the
    avatar's root immediately rotates to recenter its facing direction to match that of the user's torso based on head
    and hands orientation.
 * @property enableDrawAverageFacing - If <code>true</code>, debug graphics are drawn that show the average
    facing direction of the user's torso (based on head and hands orientation). This can be useful if you want to try
    out different filter lengths and thresholds.
 * @property leftHandPosition - The position of the left hand in avatar coordinates if it's being positioned by
    controllers, otherwise {@link TVec3(0)|Vec3.ZERO}. <em>Read-only.</em>
 * @property rightHandPosition - The position of the right hand in avatar coordinates if it's being positioned by
    controllers, otherwise {@link TVec3(0)|Vec3.ZERO}. <em>Read-only.</em>
 * @property leftHandTipPosition - The position 0.3m in front of the left hand's position, in the direction along the
    palm, in avatar coordinates. If the hand isn't being positioned by a controller, the value is
    {@link TVec3(0)|Vec3.ZERO}. <em>Read-only.</em>
 * @property rightHandTipPosition - The position 0.3m in front of the right hand's position, in the direction along
    the palm, in avatar coordinates. If the hand isn't being positioned by a controller, the value is
    {@link TVec3(0)|Vec3.ZERO}. <em>Read-only.</em>
 * @property leftHandPose - The left hand's pose as determined by the hand controllers, relative to the avatar.
    <em>Read-only.</em>
 * @property rightHandPose - The right hand's pose as determined by the hand controllers, relative to the avatar.
    <em>Read-only.</em>
 * @property leftHandTipPose - The left hand's pose as determined by the hand controllers, relative to the avatar,
    with the position adjusted by 0.3m along the direction of the palm. <em>Read-only.</em>
 * @property rightHandTipPose - The right hand's pose as determined by the hand controllers, relative to the avatar,
    with the position adjusted by 0.3m along the direction of the palm. <em>Read-only.</em>
 * @property energy - <span class="important">Deprecated: This property will be removed.</span>
 * @property isAway - <code>true</code> if your avatar is away (i.e., inactive), <code>false</code> if it is
    active.
 * @property centerOfGravityModelEnabled - <code>true</code> if the avatar hips are placed according to
    the center of gravity model that balances the center of gravity over the base of support of the feet. Set the
    value to <code>false</code> for default behavior where the hips are positioned under the head.
 * @property hmdLeanRecenterEnabled - <code>true</code> IF the avatar is re-centered to be under the
    head's position. In room-scale VR, this behavior is what causes your avatar to follow your HMD as you walk around
    the room. Setting the value <code>false</code> is useful if you want to pin the avatar to a fixed position.
 * @property collisionsEnabled - Set to <code>true</code> to enable the avatar to collide with the environment,
    <code>false</code> to disable collisions with the environment. May return <code>true</code> even though the value
    was set <code>false</code> because the zone may disallow collisionless avatars.
 * @property otherAvatarsCollisionsEnabled - Set to <code>true</code> to enable the avatar to collide with other
    avatars, <code>false</code> to disable collisions with other avatars.
 * @property characterControllerEnabled - Synonym of <code>collisionsEnabled</code>.
    <p class="important">Deprecated: This property is deprecated and will be removed. Use <code>collisionsEnabled</code>
    instead.</p>
 * @property useAdvancedMovementControls - Returns and sets the value of the Interface setting, Settings >
    Controls > Walking. Note: Setting the value has no effect unless Interface is restarted.
 * @property showPlayArea - Returns and sets the value of the Interface setting, Settings > Controls > Show room
    boundaries while teleporting.
    <p><strong>Note:</strong> Setting the value has no effect unless Interface is restarted.</p>
 * @property yawSpeed - The mouse X sensitivity value in Settings > General. <em>Read-only.</em>
 * @property pitchSpeed - The mouse Y sensitivity value in Settings > General. <em>Read-only.</em>
 * @property hmdRollControlEnabled - If <code>true</code>, the roll angle of your HMD turns your avatar
    while flying.
 * @property hmdRollControlDeadZone - The amount of HMD roll, in degrees, required before your avatar turns if
   <code>hmdRollControlEnabled</code> is enabled.
 * @property hmdRollControlRate - If <code>MyAvatar.hmdRollControlEnabled</code> is true, this value determines the
    maximum turn rate of your avatar when rolling your HMD in degrees per second.
 * @property userHeight - The height of the user in sensor space.
 * @property userEyeHeight - The estimated height of the user's eyes in sensor space. <em>Read-only.</em>
 * @property SELF_ID - UUID representing "my avatar". Only use for local-only entities in situations
    where MyAvatar.sessionUUID is not available (e.g., if not connected to a domain). Note: Likely to be deprecated.
    <em>Read-only.</em>
 * @property walkSpeed - The walk speed of your avatar for the current control scheme (see
    {@link MyAvatar.getControlScheme|getControlScheme}).
 * @property walkBackwardSpeed - The walk backward speed of your avatar for the current control scheme (see
    {@link MyAvatar.getControlScheme|getControlScheme}).
 * @property sprintSpeed - The sprint (run) speed of your avatar for the current control scheme (see
    {@link MyAvatar.getControlScheme|getControlScheme}).
 * @property analogPlusWalkSpeed - The walk speed of your avatar for the "AnalogPlus" control scheme.
    <p><strong>Warning:</strong> Setting this value also sets the value of <code>analogPlusSprintSpeed</code> to twice
    the value.</p>
 * @property analogPlusSprintSpeed - The sprint (run) speed of your avatar for the "AnalogPlus" control scheme.
 * @property userRecenterModel - Controls avatar leaning and recentering behavior.
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property isInSittingState - <code>true</code> if the user wearing the HMD is determined to be sitting;
    <code>false</code> if the user wearing the HMD is determined to be standing.  This can affect whether the avatar
    is allowed to stand, lean or recenter its footing, depending on user preferences.
    The property value automatically updates as the user sits or stands. Setting the property value overrides the current
    sitting / standing state, which is updated when the user next sits or stands.
 * @property isSitStandStateLocked - <code>true</code> to lock the avatar sitting/standing state, i.e., use this
    to disable automatically changing state.
    <p class="important">Deprecated: This property is deprecated and will be removed.
    See also: <code>getUserRecenterModel</code> and <code>setUserRecenterModel</code>.</p>
 * @property allowTeleporting - <code>true</code> if teleporting is enabled in the Interface settings,
    <code>false</code> if it isn't. <em>Read-only.</em>
 */
declare namespace MyAvatar {
    /**
     * <p>Information about an avatar entity.</p>
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>id</code></td><td>Uuid</td><td>Entity ID.</td></tr>
        <tr><td><code>properties</code></td><td>{@link Entities.EntityProperties}</td><td>Entity properties.</td></tr>
       </tbody>
    </table>
     */
    type AvatarEntityData = any;
    /**
     * A teleport target.
     */
    type GoToProperties = {
        /**
         * The avatar's new position.
         */
        position: TVec3;
        /**
         * The avatar's new orientation.
         */
        orientation?: TQuat;
    };
    /**
     * A collision capsule is a cylinder with hemispherical ends. It is often used to approximate the extents of an avatar.
     */
    type CollisionCapsule = {
        /**
         * The bottom end of the cylinder, excluding the bottom hemisphere.
         */
        start: TVec3;
        /**
         * The top end of the cylinder, excluding the top hemisphere.
         */
        end: TVec3;
        /**
         * The radius of the cylinder and the hemispheres.
         */
        radius: number;
    };
    /**
     * Physics options to use in the flow simulation of a joint.
     */
    type FlowPhysicsOptions = {
        /**
         * <code>true</code> to enable flow on the joint, otherwise <code>false</code>.
         * @defaultValue true
         */
        active?: boolean;
        /**
         * The thickness of segments and knots (needed for collisions).
         * @defaultValue 0.01
         */
        radius?: number;
        /**
         * Y-value of the gravity vector.
         * @defaultValue -0.0096
         */
        gravity?: number;
        /**
         * Rotational inertia multiplier.
         * @defaultValue 0.8
         */
        inertia?: number;
        /**
         * The amount of damping on joint oscillation.
         * @defaultValue 0.85
         */
        damping?: number;
        /**
         * The stiffness of each thread.
         * @defaultValue 0.0
         */
        stiffness?: number;
        /**
         * Delta time for every integration step.
         * @defaultValue 0.55
         */
        delta?: number;
    };
    /**
     * Collision options to use in the flow simulation of a joint.
     */
    type FlowCollisionsOptions = {
        /**
         * Currently, only <code>"sphere"</code> is supported.
         * @defaultValue "sphere"
         */
        type?: string;
        /**
         * Collision sphere radius.
         * @defaultValue 0.05
         */
        radius?: number;
        /**
         * Offset of the collision sphere from the joint.
         * @defaultValue Vec3.ZERO
         */
        offset?: number;
    };
    /**
     * Flow options currently used in flow simulation.
     */
    type FlowData = {
        /**
         * <code>true</code> if flow has been initialized for the current avatar, <code>false</code>
         * if it hasn't.
         */
        initialized: boolean;
        /**
         * <code>true</code> if flow is enabled, <code>false</code> if it isn't.
         */
        active: boolean;
        /**
         * <code>true</code> if collisions are enabled, <code>false</code> if they aren't.
         */
        colliding: boolean;
        /**
         * The physics configuration for each group of joints
         * that has been configured.
         */
        physicsData: {
            [key: string]: MyAvatar.FlowPhysicsData;
        };
        /**
         * The collisions configuration for each joint that
         * has collisions configured.
         */
        collisions: {
            [key: string]: MyAvatar.FlowCollisionsData;
        };
        /**
         * The threads that have been configured, with the first joint's name as the
         * <code>ThreadName</code> and value as an array of the indexes of all the joints in the thread.
         */
        threads: {
            [key: string]: number[];
        };
    };
    /**
     * A set of physics options currently used in flow simulation.
     */
    type FlowPhysicsData = {
        /**
         * <code>true</code> to enable flow on the joint, otherwise <code>false</code>.
         */
        active: boolean;
        /**
         * The thickness of segments and knots. (Needed for collisions.)
         */
        radius: number;
        /**
         * Y-value of the gravity vector.
         */
        gravity: number;
        /**
         * Rotational inertia multiplier.
         */
        inertia: number;
        /**
         * The amount of damping on joint oscillation.
         */
        damping: number;
        /**
         * The stiffness of each thread.
         */
        stiffness: number;
        /**
         * Delta time for every integration step.
         */
        delta: number;
        /**
         * The indexes of the joints the options are applied to.
         */
        jointIndices: number[];
    };
    /**
     * A set of collision options currently used in flow simulation.
     */
    type FlowCollisionsData = {
        /**
         * Collision sphere radius.
         */
        radius: number;
        /**
         * Offset of the collision sphere from the joint.
         */
        offset: number;
        /**
         * The index of the joint the options are applied to.
         */
        jointIndex: number;
    };
    /**
     * <p>Locomotion control types.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>Default</td><td>Your walking speed is constant; it doesn't change depending on how far
          forward you push your controller's joystick. Fully pushing your joystick forward makes your avatar run.</td></tr>
        <tr><td><code>1</code></td><td>Analog</td><td>Your walking speed changes in steps based on how far forward you push your
          controller's joystick. Fully pushing your joystick forward makes your avatar run.</td></tr>
        <tr><td><code>2</code></td><td>AnalogPlus</td><td>Your walking speed changes proportionally to how far forward you push
          your controller's joystick. Fully pushing your joystick forward makes your avatar run.</td></tr>
      </tbody>
    </table>
     */
    type LocomotionControlsMode = number;
    /**
     * <p>Specifies different avatar leaning and recentering behaviors.</p>
    <p class="important">Deprecated: This type is deprecated and will be removed.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>ForceSit</td><td>Assumes the user is seated in the real world. Disables avatar
          leaning regardless of what the avatar is doing in the virtual world (i.e., avatar always recenters).</td></tr>
        <tr><td><code>1</code></td><td>ForceStand</td><td>Assumes the user is standing in the real world. Enables avatar
          leaning regardless of what the avatar is doing in the virtual world (i.e., avatar leans, then if leans too far it
          recenters).</td></tr>
        <tr><td><code>2</code></td><td>Auto</td><td>Interface detects when the user is standing or seated in the real world.
          Avatar leaning is disabled when the user is sitting (i.e., avatar always recenters), and avatar leaning is enabled
          when the user is standing (i.e., avatar leans, then if leans too far it recenters).</td></tr>
        <tr><td><code>3</code></td><td>DisableHMDLean</td><td><p>Both avatar leaning and recentering are disabled regardless of
          what the user is doing in the real world and no matter what their avatar is doing in the virtual world. Enables
          the avatar to sit on the floor when the user sits on the floor.</p>
          <p><strong>Note:</strong> Experimental.</p></td></tr>
      </tbody>
    </table>
     */
    type SitStandModelType = number;
    /**
     * Unique ID of the avatar in the domain. Read-only.
     */
    const sessionUUID: Uuid;
    /**
     * Resets the sensor positioning of your HMD (if in use) and recenters your avatar body and head.
     */
    function resetSensorsAndBody(): void;
    /**
     * Moves and orients the avatar, such that it is directly underneath the HMD, with toes pointed forward in the direction of
    the HMD.
     */
    function centerBody(): void;
    /**
     * Clears inverse kinematics joint limit history.
    <p>The internal inverse-kinematics system maintains a record of which joints are "locked". Sometimes it is useful to
    forget this history to prevent contorted joints, e.g., after finishing with an override animation.</p>
     */
    function clearIKJointLimitHistory(): void;
    /**
     * Gets the avatar orientation. Suitable for use in QML.
     * @param newOrientationVar - The avatar's orientation.
     */
    function setOrientationVar(newOrientationVar: any): void;
    /**
     * Gets the avatar orientation. Suitable for use in QML.
     * @returns The avatar's orientation.
     */
    function getOrientationVar(): any;
    /**
     * Gets the position in world coordinates of the point directly between your avatar's eyes assuming your avatar was in its
    default pose. This is a reference position; it does not change as your avatar's head moves relative to the avatar
    position.
     * @example
     * <caption>Report your avatar's default eye position.</caption>
    var defaultEyePosition = MyAvatar.getDefaultEyePosition();
    print(JSON.stringify(defaultEyePosition));
     * @returns Default position between your avatar's eyes in world coordinates.
     */
    function getDefaultEyePosition(): TVec3;
    /**
     * Overrides the default avatar animations.
    <p>The avatar animation system includes a set of default animations along with rules for how those animations are blended
    together with procedural data (such as look at vectors, hand sensors etc.). <code>overrideAnimation()</code> is used to
    completely override all motion from the default animation system (including inverse kinematics for hand and head
    controllers) and play a set of specified animations. To end these animations and restore the default animations, use
    {@link MyAvatar.restoreAnimation}.</p>
    <p>Note: When using pre-built animation data, it's critical that the joint orientation of the source animation and target
    rig are equivalent, since the animation data applies absolute values onto the joints. If the orientations are different,
    the avatar will move in unpredictable ways. For more information about avatar joint orientation standards, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @example
     * <caption> Play a clapping animation on your avatar for three seconds. </caption>
    var ANIM_URL = "https://apidocs.overte.org/examples/ClapHands_Standing.fbx";
    MyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);
    Script.setTimeout(function () {
        MyAvatar.restoreAnimation();
        MyAvatar.clearIKJointLimitHistory();
    }, 3000);
     * @param url - The URL to the animation file. Animation files may be in glTF or FBX format, but only need to
        contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (".gltf" or ".glb" URLs
        respectively).
        <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>
     * @param fps - The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.
     * @param loop - <code>true</code> if the animation should loop, <code>false</code> if it shouldn't.
     * @param firstFrame - The frame to start the animation at.
     * @param lastFrame - The frame to end the animation at.
     */
    function overrideAnimation(url: string, fps: number, loop: boolean, firstFrame: number, lastFrame: number): void;
    /**
     * Overrides the default hand poses that are triggered with controller buttons.
    Use {@link MyAvatar.restoreHandAnimation} to restore the default poses.
     * @example
     * <caption> Override left hand animation for three seconds.</caption>
    var ANIM_URL = "https://apidocs.overte.org/examples/ClapHands_Standing.fbx";
    MyAvatar.overrideHandAnimation(isLeft, ANIM_URL, 30, true, 0, 53);
    Script.setTimeout(function () {
        MyAvatar.restoreHandAnimation();
    }, 3000);
     * @param isLeft - <code>true</code> to override the left hand, <code>false</code> to override the right hand.
     * @param url - The URL of the animation file. Animation files need to be in glTF or FBX format, but only need to
        contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (".gltf" or ".glb" URLs
        respectively).
        <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>
     * @param fps - The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.
     * @param loop - <code>true</code> if the animation should loop, <code>false</code> if it shouldn't.
     * @param firstFrame - The frame to start the animation at.
     * @param lastFrame - The frame to end the animation at.
     */
    function overrideHandAnimation(isLeft: boolean, url: string, fps: number, loop: boolean, firstFrame: number, lastFrame: number): void;
    /**
     * Restores the default animations.
    <p>The avatar animation system includes a set of default animations along with rules for how those animations are blended
    together with procedural data (such as look at vectors, hand sensors etc.). Playing your own custom animations will
    override the  default animations. <code>restoreAnimation()</code> is used to restore all motion from the default
    animation system including inverse kinematics for hand and head controllers. If you aren't currently playing an override
    animation, this function has no effect.</p>
     * @example
     * <caption> Play a clapping animation on your avatar for three seconds. </caption>
    var ANIM_URL = "https://apidocs.overte.org/examples/ClapHands_Standing.fbx";
    MyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);
    Script.setTimeout(function () {
        MyAvatar.restoreAnimation();
    }, 3000);
     */
    function restoreAnimation(): void;
    /**
     * Restores the default hand animation state machine that is driven by the state machine in the avatar-animation JSON.
    <p>The avatar animation system includes a set of default animations along with rules for how those animations are blended
    together with procedural data (such as look at vectors, hand sensors etc.). Playing your own custom animations will
    override the  default animations. <code>restoreHandAnimation()</code> is used to restore the default hand poses.
    If you aren't currently playing an override hand animation, this function has no effect.</p>
     * @example
     * <caption> Override left hand animation for three seconds. </caption>
    var ANIM_URL = "https://apidocs.overte.org/examples/ClapHands_Standing.fbx";
    MyAvatar.overrideHandAnimation(isLeft, ANIM_URL, 30, true, 0, 53);
    Script.setTimeout(function () {
        MyAvatar.restoreHandAnimation();
    }, 3000);
     * @param isLeft - Set to true if using the left hand
     */
    function restoreHandAnimation(isLeft: boolean): void;
    /**
     * Gets the current animation roles.
    <p>Each avatar has an avatar-animation.json file that defines which animations are used and how they are blended together
    with procedural data (such as look at vectors, hand sensors etc.). Each animation specified in the avatar-animation.json
    file is known as an animation role. Animation roles map to easily understandable actions that the avatar can perform,
    such as <code>"idleStand"</code>, <code>"idleTalk"</code>, or <code>"walkFwd"</code>. <code>getAnimationRoles()</code>
    is used get the list of animation roles defined in the avatar-animation.json.</p>
     * @example
     * <caption>Print the list of animation roles defined in the avatar's avatar-animation.json file to the debug log.</caption>
    var roles = MyAvatar.getAnimationRoles();
    print("Animation Roles:");
    for (var i = 0; i < roles.length; i++) {
        print(roles[i]);
    }
     * @returns Array of role strings.
     */
    function getAnimationRoles(): string[];
    /**
     * Overrides a specific animation role.
    <p>Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily
    understandable actions that the avatar can perform, such as <code>"idleStand"</code>, <code>"idleTalk"</code>, or
    <code>"walkFwd"</code>. To get the full list of roles, use {@ link MyAvatar.getAnimationRoles}.
    For each role, the avatar-animation.json defines when the animation is used, the animation clip (glTF or FBX) used, and
    how animations are blended together with procedural data (such as look at vectors, hand sensors etc.).
    <code>overrideRoleAnimation()</code> is used to change the animation clip (glTF or FBX) associated with a specified
    animation role. To end the role animation and restore the default, use {@link MyAvatar.restoreRoleAnimation}.</p>
    <p>Note: Hand roles only affect the hand. Other "main" roles, like "idleStand", "idleTalk", and "takeoffStand", are full
    body.</p>
    <p>Note: When using pre-built animation data, it's critical that the joint orientation of the source animation and target
    rig are equivalent, since the animation data applies absolute values onto the joints. If the orientations are different,
    the avatar will move in unpredictable ways. For more information about avatar joint orientation standards, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.
     * @example
     * <caption>The default avatar-animation.json defines an "idleStand" animation role. This role specifies that when the avatar is not moving,
    an animation clip of the avatar idling with hands hanging at its side will be used. It also specifies that when the avatar moves, the animation
    will smoothly blend to the walking animation used by the "walkFwd" animation role.
    In this example, the "idleStand" role animation clip has been replaced with a clapping animation clip. Now instead of standing with its arms
    hanging at its sides when it is not moving, the avatar will stand and clap its hands. Note that just as it did before, as soon as the avatar
    starts to move, the animation will smoothly blend into the walk animation used by the "walkFwd" animation role.</caption>
    // An animation of the avatar clapping its hands while standing. Restore default after 30s.
    var ANIM_URL = "https://apidocs.overte.org/examples/ClapHands_Standing.fbx";
    MyAvatar.overrideRoleAnimation("idleStand", ANIM_URL, 30, true, 0, 53);
    Script.setTimeout(function () {
        MyAvatar.restoreRoleAnimation();
    }, 30000);
     * @param role - The animation role to override
     * @param url - The URL to the animation file. Animation files need to be in glTF or FBX format, but only need to
        contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (".gltf" or ".glb" URLs
        respectively).
        <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>
     * @param fps - The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.
     * @param loop - <code>true</code> if the animation should loop, <code>false</code> if it shouldn't.
     * @param firstFrame - The frame the animation should start at.
     * @param lastFrame - The frame the animation should end at.
     */
    function overrideRoleAnimation(role: string, url: string, fps: number, loop: boolean, firstFrame: number, lastFrame: number): void;
    /**
     * Restores a default role animation.
    <p>Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily
    understandable actions that the avatar can perform, such as <code>"idleStand"</code>, <code>"idleTalk"</code>, or
    <code>"walkFwd"</code>. To get the full list of roles, use {@link MyAvatar.getAnimationRoles}. For each role,
    the avatar-animation.json defines when the animation is used, the animation clip (glTF or FBX) used, and how animations
    are blended together with procedural data (such as look-at vectors, hand sensors etc.). You can change the animation
    clip (glTF or FBX) associated with a specified animation role using {@link MyAvatar.overrideRoleAnimation}.
    <code>restoreRoleAnimation()</code> is used to restore a specified animation role's default animation clip. If you have
    not specified an override animation for the specified role, this function has no effect.
     * @param role - The animation role clip to restore.
     */
    function restoreRoleAnimation(role: string): void;
    /**
     * Adds an animation state handler function that is invoked just before each animation graph update. More than one
    animation state handler function may be added by calling <code>addAnimationStateHandler</code> multiple times. It is not
    specified in what order multiple handlers are called.
    <p>The animation state handler function is called with an {@link MyAvatar.AnimStateDictionary|AnimStateDictionary}
    "<code>animStateDictionaryIn</code>" parameter and is expected to return an
    {@link MyAvatar.AnimStateDictionary|AnimStateDictionary} "<code>animStateDictionaryOut</code>" object. The
    <code>animStateDictionaryOut</code> object can be the same object as <code>animStateDictionaryIn</code>, or it can be a
    different object. The <code>animStateDictionaryIn</code> may be shared among multiple handlers and thus may contain
    additional properties specified when adding the different handlers.</p>
    <p>A handler may change a value from <code>animStateDictionaryIn</code> or add different values in the
    <code>animStateDictionaryOut</code> returned. Any property values set in <code>animStateDictionaryOut</code> will
    override those of the internal animation machinery.</p>
     * @example
     * <caption>Log all the animation state dictionary parameters for a short while.</caption>
    function animStateHandler(dictionary) {
        print("Anim state dictionary: " + JSON.stringify(dictionary));
    }
    
    var handler = MyAvatar.addAnimationStateHandler(animStateHandler, null);
    
    Script.setTimeout(function () {
        MyAvatar.removeAnimationStateHandler(handler);
    }, 100);
     * @param handler - The animation state handler function to add.
     * @param propertiesList - The list of {@link MyAvatar.AnimStateDictionary|AnimStateDictionary}
        properties that should be included in the parameter that the handler function is called with. If <code>null</code>
        then all properties are included in the call parameter.
     * @returns The ID of the animation state handler function if successfully added, <code>undefined</code> if not.
     */
    function addAnimationStateHandler(handler: (...params: any[]) => any, propertiesList: string[] | null): number;
    /**
     * Removes an animation state handler function.
     * @param handler - The ID of the animation state handler function to remove.
     */
    function removeAnimationStateHandler(handler: number): void;
    /**
     * Gets whether you do snap turns in HMD mode.
     * @returns <code>true</code> if you do snap turns in HMD mode; <code>false</code> if you do smooth turns in HMD
        mode.
     */
    function getSnapTurn(): boolean;
    /**
     * Sets whether you do snap turns or smooth turns in HMD mode.
     * @param on - <code>true</code> to do snap turns in HMD mode; <code>false</code> to do smooth turns in HMD mode.
     */
    function setSnapTurn(on: boolean): void;
    /**
     * Gets the control scheme that is in use.
     * @returns The control scheme that is in use.
     */
    function getControlScheme(): MyAvatar.LocomotionControlsMode;
    /**
     * Sets the control scheme to use.
     * @param controlScheme - The control scheme to use.
     */
    function setControlScheme(controlScheme: MyAvatar.LocomotionControlsMode): void;
    /**
     * Gets whether your avatar hovers when its feet are not on the ground.
     * @returns <code>true</code> if your avatar hovers when its feet are not on the ground, <code>false</code> if it
        falls.
     */
    function hoverWhenUnsupported(): boolean;
    /**
     * Sets whether your avatar hovers when its feet are not on the ground.
     * @param hover - <code>true</code> if your avatar hovers when its feet are not on the ground, <code>false</code>
        if it falls.
     */
    function setHoverWhenUnsupported(hover: boolean): void;
    /**
     * Sets the avatar's dominant hand.
     * @param hand - The dominant hand: <code>"left"</code> for the left hand or <code>"right"</code> for the right
        hand. Any other value has no effect.
     */
    function setDominantHand(hand: string): void;
    /**
     * Gets the avatar's dominant hand.
     * @returns <code>"left"</code> for the left hand, <code>"right"</code> for the right hand.
     */
    function getDominantHand(): string;
    /**
     * Sets whether strafing is enabled.
     * @param enabled - <code>true</code> if strafing is enabled, <code>false</code> if it isn't.
     */
    function setStrafeEnabled(enabled: boolean): void;
    /**
     * Gets whether strafing is enabled.
     * @returns <code>true</code> if strafing is enabled, <code>false</code> if it isn't.
     */
    function getStrafeEnabled(): boolean;
    /**
     * Sets the HMD alignment relative to your avatar.
     * @param type - <code>"head"</code> to align your head and your avatar's head, <code>"eyes"</code> to align your
        eyes and your avatar's eyes.
     */
    function setHmdAvatarAlignmentType(type: string): void;
    /**
     * Gets the HMD alignment relative to your avatar.
     * @returns <code>"head"</code> if aligning your head and your avatar's head, <code>"eyes"</code> if aligning your
        eyes and your avatar's eyes.
     */
    function getHmdAvatarAlignmentType(): string;
    /**
     * Sets whether the avatar's hips are balanced over the feet or positioned under the head.
     * @param enabled - <code>true</code> to balance the hips over the feet, <code>false</code> to position the hips
        under the head.
     */
    function setCenterOfGravityModelEnabled(enabled: boolean): void;
    /**
     * Gets whether the avatar hips are being balanced over the feet or placed under the head.
     * @returns <code>true</code> if the hips are being balanced over the feet, <code>false</code> if the hips are
        being positioned under the head.
     */
    function getCenterOfGravityModelEnabled(): boolean;
    /**
     * Sets whether the avatar's position updates to recenter the avatar under the head. In room-scale VR, recentering
    causes your avatar to follow your HMD as you walk around the room. Disabling recentering is useful if you want to pin
    the avatar to a fixed position.
     * @param enabled - <code>true</code> to recenter the avatar under the head as it moves, <code>false</code> to
        disable recentering.
     */
    function setHMDLeanRecenterEnabled(enabled: boolean): void;
    /**
     * Gets whether the avatar's position updates to recenter the avatar under the head. In room-scale VR, recentering
    causes your avatar to follow your HMD as you walk around the room.
     * @returns <code>true</code> if recentering is enabled, <code>false</code> if not.
     */
    function getHMDLeanRecenterEnabled(): boolean;
    /**
     * Requests that the hand touch effect is disabled for your avatar. Any resulting change in the status of the hand touch
    effect will be signaled by {@link MyAvatar.shouldDisableHandTouchChanged}.
    <p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that
    it is really touching that object.</p>
     */
    function requestEnableHandTouch(): void;
    /**
     * Requests that the hand touch effect is enabled for your avatar. Any resulting change in the status of the hand touch
    effect will be signaled by {@link MyAvatar.shouldDisableHandTouchChanged}.
    <p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that
    it is really touching that object.</p>
     */
    function requestDisableHandTouch(): void;
    /**
     * Disables the hand touch effect on a specific entity.
    <p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that
    it is really touching that object.</p>
     * @param entityID - The entity that the hand touch effect will be disabled for.
     */
    function disableHandTouchForID(entityID: Uuid): void;
    /**
     * Enables the hand touch effect on a specific entity.
    <p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that
    it is really touching that object.</p>
     * @param entityID - The entity that the hand touch effect will be enabled for.
     */
    function enableHandTouchForID(entityID: Uuid): void;
    /**
     * Gets the value of a drive key, regardless of whether it is disabled.
     * @param key - The drive key.
     * @returns The value of the drive key.
     */
    function getRawDriveKey(key: DriveKey): number;
    /**
     * Disables the action associated with a drive key.
     * @example
     * <caption>Disable rotating your avatar using the keyboard for a couple of seconds.</caption>
    print("Disable");
    MyAvatar.disableDriveKey(DriveKeys.YAW);
    Script.setTimeout(function () {
        print("Enable");
        MyAvatar.enableDriveKey(YAW);
    }, 5000);
     * @param key - The drive key to disable.
     */
    function disableDriveKey(key: DriveKey): void;
    /**
     * Enables the action associated with a drive key. The action may have been disabled with
    {@link MyAvatar.disableDriveKey|disableDriveKey}.
     * @param key - The drive key to enable.
     */
    function enableDriveKey(key: DriveKey): void;
    /**
     * Checks whether a drive key is disabled.
     * @param key - The drive key to check.
     * @returns <code>true</code> if the drive key is disabled, <code>false</code> if it isn't.
     */
    function isDriveKeyDisabled(key: DriveKey): boolean;
    /**
     * Recenter the avatar in the vertical direction, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is
    <code>false</code>.
     */
    function triggerVerticalRecenter(): void;
    /**
     * Recenter the avatar in the horizontal direction, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is
    <code>false</code>.
     */
    function triggerHorizontalRecenter(): void;
    /**
     * Recenter the avatar's rotation, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is <code>false</code>.
     */
    function triggerRotationRecenter(): void;
    /**
     * Gets whether the avatar is configured to keep its center of gravity under its head.
     * @returns <code>true</code> if the avatar is keeping its center of gravity under its head position,
        <code>false</code> if not.
     */
    function isRecenteringHorizontally(): boolean;
    /**
     * Gets the current position of the avatar's "Head" joint.
     * @example
     * <caption>Report the current position of your avatar's head.</caption>
    print(JSON.stringify(MyAvatar.getHeadPosition()));
     * @returns The current position of the avatar's "Head" joint.
     */
    function getHeadPosition(): TVec3;
    /**
     * Gets the yaw of the avatar's head relative to its body.
     * @returns The yaw of the avatar's head, in degrees.
     */
    function getHeadFinalYaw(): number;
    /**
     * Gets the roll of the avatar's head relative to its body.
     * @returns The roll of the avatar's head, in degrees.
     */
    function getHeadFinalRoll(): number;
    /**
     * Gets the pitch of the avatar's head relative to its body.
     * @returns The pitch of the avatar's head, in degrees.
     */
    function getHeadFinalPitch(): number;
    /**
     * If a face tracker is connected and being used, gets the estimated pitch of the user's head scaled. This is scale such
    that the avatar looks at the edge of the view frustum when the user looks at the edge of their screen.
     * @returns The pitch that the avatar's head should be if a face tracker is connected and being used, otherwise
        <code>0</code>, in degrees.
     */
    function getHeadDeltaPitch(): number;
    /**
     * Gets the current position of the point directly between the avatar's eyes.
     * @example
     * <caption>Report your avatar's current eye position.</caption>
    var eyePosition = MyAvatar.getEyePosition();
    print(JSON.stringify(eyePosition));
     * @returns The current position of the point directly between the avatar's eyes.
     */
    function getEyePosition(): TVec3;
    /**
     * Gets the position of the avatar your avatar is currently looking at.
     * @example
     * <caption>Report the position of the avatar you're currently looking at.</caption>
    print(JSON.stringify(MyAvatar.getTargetAvatarPosition()));
     * @returns The position of the avatar beeing looked at.
     */
    function getTargetAvatarPosition(): TVec3;
    /**
     * Gets information on the avatar your avatar is currently looking at.
     * @returns Information on the avatar being looked at, <code>null</code> if no avatar is being looked at.
     */
    function getTargetAvatar(): ScriptAvatar;
    /**
     * Gets the position of the avatar's left hand, relative to the avatar, as positioned by a hand controller (e.g., Oculus
    Touch or Vive).
    <p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints
    for hand animation.)</p>
     * @example
     * <caption>Report the position of your left hand relative to your avatar.</caption>
    print(JSON.stringify(MyAvatar.getLeftHandPosition()));
     * @returns The position of the left hand in avatar coordinates if positioned by a hand controller, otherwise
        <code>{@link TVec3(0)|Vec3.ZERO}</code>.
     */
    function getLeftHandPosition(): TVec3;
    /**
     * Gets the position of the avatar's right hand, relative to the avatar, as positioned by a hand controller (e.g., Oculus
    Touch or Vive).
    <p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints
    for hand animation.)</p>
     * @example
     * <caption>Report the position of your right hand relative to your avatar.</caption>
    print(JSON.stringify(MyAvatar.getLeftHandPosition()));
     * @returns The position of the right hand in avatar coordinates if positioned by a hand controller, otherwise
        <code>{@link TVec3(0)|Vec3.ZERO}</code>.
     */
    function getRightHandPosition(): TVec3;
    /**
     * Gets the position 0.3m in front of the left hand's position in the direction along the palm, in avatar coordinates, as
    positioned by a hand controller.
     * @returns The position 0.3m in front of the left hand's position in the direction along the palm, in avatar
        coordinates. If the hand isn't being positioned by a controller, <code>{@link TVec3(0)|Vec3.ZERO}</code> is returned.
     */
    function getLeftHandTipPosition(): TVec3;
    /**
     * Gets the position 0.3m in front of the right hand's position in the direction along the palm, in avatar coordinates, as
    positioned by a hand controller.
     * @returns The position 0.3m in front of the right hand's position in the direction along the palm, in avatar
        coordinates. If the hand isn't being positioned by a controller, <code>{@link TVec3(0)|Vec3.ZERO}</code> is returned.
     */
    function getRightHandTipPosition(): TVec3;
    /**
     * Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand as positioned by a
    hand controller (e.g., Oculus Touch or Vive).
    <p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints
    for hand animation.) If you are using the Leap Motion, the return value's <code>valid</code> property will be
    <code>false</code> and any pose values returned will not be meaningful.</p>
     * @example
     * <caption>Report the pose of your avatar's left hand.</caption>
    print(JSON.stringify(MyAvatar.getLeftHandPose()));
     * @returns The pose of the avatar's left hand, relative to the avatar, as positioned by a hand controller.
     */
    function getLeftHandPose(): Pose;
    /**
     * Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand as positioned by a
    hand controller (e.g., Oculus Touch or Vive).
    <p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints
    for hand animation.) If you are using the Leap Motion, the return value's <code>valid</code> property will be
    <code>false</code> and any pose values returned will not be meaningful.</p>
     * @example
     * <caption>Report the pose of your avatar's right hand.</caption>
    print(JSON.stringify(MyAvatar.getRightHandPose()));
     * @returns The pose of the avatar's right hand, relative to the avatar, as positioned by a hand controller.
     */
    function getRightHandPose(): Pose;
    /**
     * Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand, relative to the avatar, as
    positioned by a hand controller (e.g., Oculus Touch or Vive), and translated 0.3m along the palm.
    <p>Note: Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints
    for hand animation.) If you are using Leap Motion, the return value's <code>valid</code> property will be
    <code>false</code> and any pose values returned will not be meaningful.</p>
     * @returns The pose of the avatar's left hand, relative to the avatar, as positioned by a hand controller, and
        translated 0.3m along the palm.
     */
    function getLeftHandTipPose(): Pose;
    /**
     * Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's right hand, relative to the avatar, as
    positioned by a hand controller (e.g., Oculus Touch or Vive), and translated 0.3m along the palm.
    <p>Note: Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints
    for hand animation.) If you are using Leap Motion, the return value's <code>valid</code> property will be
    <code>false</code> and any pose values returned will not be meaningful.</p>
     * @returns The pose of the avatar's right hand, relative to the avatar, as positioned by a hand controller, and
        translated 0.3m along the palm.
     */
    function getRightHandTipPose(): Pose;
    /**
     * Sets and locks a joint's position and orientation.
    <p><strong>Note:</strong> Only works on the hips joint.</p>
     * @param index - The index of the joint.
     * @param position - The position of the joint in world coordinates.
     * @param orientation - The orientation of the joint in world coordinates.
     * @returns <code>true</code> if the joint was pinned, <code>false</code> if it wasn't.
     */
    function pinJoint(index: number, position: TVec3, orientation: TQuat): boolean;
    /**
     * Clears a lock on a joint's position and orientation, as set by {@link MyAvatar.pinJoint|pinJoint}.
    <p><strong>Note:</strong> Only works on the hips joint.</p>
     * @param index - The index of the joint.
     * @returns <code>true</code> if the joint was unpinned, <code>false</code> if it wasn't.
     */
    function clearPinOnJoint(index: number): boolean;
    /**
     * Gets the maximum error distance from the most recent inverse kinematics (IK) solution.
     * @returns The maximum IK error distance.
     */
    function getIKErrorOnLastSolve(): number;
    /**
     * Changes the user's avatar and associated descriptive name.
     * @param fullAvatarURL - The URL of the avatar's <code>.fst</code> file.
     * @param [modelName = ""] - Descriptive name of the avatar.
     */
    function useFullAvatarURL(fullAvatarURL: string, modelName?: string): void;
    /**
     * Gets the complete URL for the current avatar.
     * @example
     * <caption>Report the URL for the current avatar.</caption>
    print(MyAvatar.getFullAvatarURLFromPreferences());
     * @returns The full avatar model name.
     */
    function getFullAvatarURLFromPreferences(): string;
    /**
     * Gets the full avatar model name for the current avatar.
     * @example
     * <caption>Report the current full avatar model name.</caption>
    print(MyAvatar.getFullAvatarModelName());
     * @returns The full avatar model name.
     */
    function getFullAvatarModelName(): string;
    /**
     * Gets the current avatar entity IDs and their properties.
     * @returns The current avatar entity IDs and their properties.
     */
    function getAvatarEntitiesVariant(): MyAvatar.AvatarEntityData[];
    /**
     * Checks whether your avatar is flying.
     * @returns <code>true</code> if your avatar is flying and not taking off or falling, <code>false</code> if not.
     */
    function isFlying(): boolean;
    /**
     * Checks whether your avatar is in the air.
     * @returns <code>true</code> if your avatar is taking off, flying, or falling, otherwise <code>false</code>
        because your avatar is on the ground.
     */
    function isInAir(): boolean;
    /**
     * Sets your preference for flying in your current desktop or HMD display mode. Note that your ability to fly also depends
    on whether the domain you're in allows you to fly.
     * @param enabled - Set <code>true</code> if you want to enable flying in your current desktop or HMD display
        mode, otherwise set <code>false</code>.
     */
    function setFlyingEnabled(enabled: boolean): void;
    /**
     * Gets your preference for flying in your current desktop or HMD display mode. Note that your ability to fly also depends
    on whether the domain you're in allows you to fly.
     * @returns <code>true</code> if your preference is to enable flying in your current desktop or HMD display mode,
        otherwise <code>false</code>.
     */
    function getFlyingEnabled(): boolean;
    /**
     * Sets your preference for flying in desktop display mode. Note that your ability to fly also depends on whether the domain
    you're in allows you to fly.
     * @param enabled - Set <code>true</code> if you want to enable flying in desktop display mode, otherwise set
        <code>false</code>.
     */
    function setFlyingDesktopPref(enabled: boolean): void;
    /**
     * Gets your preference for flying in desktop display mode. Note that your ability to fly also depends on whether the domain
    you're in allows you to fly.
     * @returns <code>true</code> if your preference is to enable flying in desktop display mode, otherwise
        <code>false</code>.
     */
    function getFlyingDesktopPref(): boolean;
    /**
     * Sets your preference for flying in HMD display mode. Note that your ability to fly also depends on whether the domain
    you're in allows you to fly.
     * @param enabled - Set <code>true</code> if you want to enable flying in HMD display mode, otherwise set
        <code>false</code>.
     */
    function setFlyingHMDPref(enabled: boolean): void;
    /**
     * Gets your preference for flying in HMD display mode. Note that your ability to fly also depends on whether the domain
    you're in allows you to fly.
     * @returns <code>true</code> if your preference is to enable flying in HMD display mode, otherwise
        <code>false</code>.
     */
    function getFlyingHMDPref(): boolean;
    /**
     * Set your preference for hand-relative movement.
     * @param enabled - Set <code>true</code> if you want to enable hand-relative movement, otherwise set to <code>false</code>.
     */
    function setHandRelativeMovement(enabled: number): void;
    /**
     * Get your preference for hand-relative movement.
     * @returns <code>true</code> if your preference is for user locomotion to be relative to the direction your
    controller is pointing, otherwise <code>false</code>.
     */
    function getHandRelativeMovement(): number;
    /**
     * Set the first 'shifting point' for acceleration step function.
     * @param shiftPoint - Set the first shift point for analog movement acceleration step function, between [0.0, 1.0]. Must be less than or equal to Gear 2.
     */
    function setDriveGear1(shiftPoint: number): void;
    /**
     * Get the first 'shifting point' for acceleration step function.
     * @returns Value between [0.0, 1.0].
     */
    function getDriveGear1(): number;
    /**
     * Set the second 'shifting point' for acceleration step function.
     * @param shiftPoint - Defines the second shift point for analog movement acceleration step function, between [0, 1]. Must be greater than or equal to Gear 1 and less than or equal to Gear 2.
     */
    function setDriveGear2(shiftPoint: number): void;
    /**
     * Get the second 'shifting point' for acceleration step function.
     * @returns Value between [0.0, 1.0].
     */
    function getDriveGear2(): number;
    /**
     * Set the third 'shifting point' for acceleration step function.
     * @param shiftPoint - Defines the third shift point for analog movement acceleration step function, between [0, 1]. Must be greater than or equal to Gear 2 and less than or equal to Gear 4.
     */
    function setDriveGear3(shiftPoint: number): void;
    /**
     * Get the third 'shifting point' for acceleration step function.
     * @returns Value between [0.0, 1.0].
     */
    function getDriveGear3(): number;
    /**
     * Set the fourth 'shifting point' for acceleration step function.
     * @param shiftPoint - Defines the fourth shift point for analog movement acceleration step function, between [0, 1]. Must be greater than Gear 3 and less than Gear 5.
     */
    function setDriveGear4(shiftPoint: number): void;
    /**
     * Get the fourth 'shifting point' for acceleration step function.
     * @returns Value between [0.0, 1.0].
     */
    function getDriveGear4(): number;
    /**
     * Set the fifth 'shifting point' for acceleration step function.
     * @param shiftPoint - Defines the fifth shift point for analog movement acceleration step function, between [0, 1]. Must be greater than or equal to Gear 4.
     */
    function setDriveGear5(shiftPoint: number): void;
    /**
     * Get the fifth 'shifting point' for acceleration step function.
     * @returns Value between [0.0, 1.0].
     */
    function getDriveGear5(): number;
    /**
     * Gets the target scale of the avatar. The target scale is the desired scale of the avatar without any restrictions on
    permissible scale values imposed by the domain.
     * @returns The target scale for the avatar, range <code>0.005</code> &ndash; <code>1000.0</code>.
     */
    function getAvatarScale(): number;
    /**
     * Sets the target scale of the avatar. The target scale is the desired scale of the avatar without any restrictions on
    permissible scale values imposed by the domain.
     * @param scale - The target scale for the avatar, range <code>0.005</code> &ndash; <code>1000.0</code>.
     */
    function setAvatarScale(scale: number): void;
    /**
     * Sets whether the avatar should collide with entities.
    <p><strong>Note:</strong> A <code>false</code> value won't disable collisions if the avatar is in a zone that disallows
    collisionless avatars. However, the <code>false</code> value will be set so that collisions are disabled as soon as the
    avatar moves to a position where collisionless avatars are allowed.
     * @param enabled - <code>true</code> to enable the avatar to collide with entities, <code>false</code> to
        disable.
     */
    function setCollisionsEnabled(enabled: boolean): void;
    /**
     * Gets whether the avatar will currently collide with entities.
    <p><strong>Note:</strong> The avatar will always collide with entities if in a zone that disallows collisionless avatars.
     * @returns <code>true</code> if the avatar will currently collide with entities, <code>false</code> if it won't.
     */
    function getCollisionsEnabled(): boolean;
    /**
     * Sets whether the avatar should collide with other avatars.
     * @param enabled - <code>true</code> to enable the avatar to collide with other avatars, <code>false</code>
        to disable.
     */
    function setOtherAvatarsCollisionsEnabled(enabled: boolean): void;
    /**
     * Gets whether the avatar will collide with other avatars.
     * @returns <code>true</code> if the avatar will collide with other avatars, <code>false</code> if it won't.
     */
    function getOtherAvatarsCollisionsEnabled(): boolean;
    /**
     * Gets the avatar's collision capsule: a cylinder with hemispherical ends that approximates the extents or the avatar.
    <p><strong>Warning:</strong> The values returned are in world coordinates but aren't necessarily up to date with the
    avatar's current position.</p>
     * @returns The avatar's collision capsule.
     */
    function getCollisionCapsule(): MyAvatar.CollisionCapsule;
    /**
     * @param enabled - <code>true</code> to enable the avatar to collide with entities, <code>false</code> to
        disable.
     */
    function setCharacterControllerEnabled(enabled: boolean): void;
    /**
     * @returns <code>true</code> if the avatar will currently collide with entities, <code>false</code> if it won't.
     */
    function getCharacterControllerEnabled(): boolean;
    /**
     * Gets the rotation of a joint relative to the avatar.
     * @example
     * <caption>Report the rotation of your avatar's head joint relative to your avatar.</caption>
    var headIndex = MyAvatar.getJointIndex("Head");
    var headRotation = MyAvatar.getAbsoluteJointRotationInObjectFrame(headIndex);
    print("Head rotation: " + JSON.stringify(Quat.safeEulerAngles(headRotation))); // Degrees
     * @param index - The index of the joint.
     * @returns The rotation of the joint relative to the avatar.
     */
    function getAbsoluteJointRotationInObjectFrame(index: number): TQuat;
    /**
     * Gets the translation of a joint relative to the avatar.
     * @example
     * <caption>Report the translation of your avatar's head joint relative to your avatar.</caption>
    var headIndex = MyAvatar.getJointIndex("Head");
    var headTranslation = MyAvatar.getAbsoluteJointTranslationInObjectFrame(headIndex);
    print("Head translation: " + JSON.stringify(headTranslation));
     * @param index - The index of the joint.
     * @returns The translation of the joint relative to the avatar.
     */
    function getAbsoluteJointTranslationInObjectFrame(index: number): TVec3;
    /**
     * Tests whether a vector is pointing in the general direction of the avatar's "up" direction (i.e., dot product of vectors
        is <code>&gt; 0</code>).
     * @param direction - The vector to test.
     * @returns <code>true</code> if the direction vector is pointing generally in the direction of the avatar's "up"
        direction.
     */
    function isUp(direction: TVec3): boolean;
    /**
     * Tests whether a vector is pointing in the general direction of the avatar's "down" direction (i.e., dot product of
        vectors is  <code>&lt; 0</code>).
     * @param direction - The vector to test.
     * @returns <code>true</code> if the direction vector is pointing generally in the direction of the avatar's
        "down" direction.
     */
    function isDown(direction: TVec3): boolean;
    /**
     * Turns the avatar's head until it faces the target point within a +90/-90 degree range.
    Once this method is called, API calls have full control of the head for a limited time.
    If this method is not called for 2 seconds, the engine regains control of the head.
     * @param lookAtTarget - The target point in world coordinates.
     */
    function setHeadLookAt(lookAtTarget: TVec3): void;
    /**
     * Gets the current target point of the head's look direction in world coordinates.
     * @returns The head's look-at target in world coordinates.
     */
    function getHeadLookAt(): TVec3;
    /**
     * Returns control of the avatar's head to the engine, and releases control from API calls.
     */
    function releaseHeadLookAtControl(): void;
    /**
     * Forces the avatar's eyes to look at a specified location. Once this method is called, API calls
    full control of the eyes for a limited time. If this method is not called for 2 seconds,
    the engine regains control of the eyes.
     * @param lookAtTarget - The target point in world coordinates.
     */
    function setEyesLookAt(lookAtTarget: TVec3): void;
    /**
     * Gets the current target point of the eyes look direction in world coordinates.
     * @returns The eyes' look-at target in world coordinates.
     */
    function getEyesLookAt(): TVec3;
    /**
     * Returns control of the avatar's eyes to the engine, and releases control from API calls.
     */
    function releaseEyesLookAtControl(): void;
    /**
     * Sets the point-at target for the <code>"point"</code> reaction that may be started with {@link MyAvatar.beginReaction}.
    The point-at target is set only if it is in front of the avatar.
    <p>Note: The <code>"point"</code> reaction should be started before calling this method.</p>
     * @param pointAtTarget - The target to point at, in world coordinates.
     * @returns <code>true</code> if the target point was set, <code>false</code> if it wasn't.
     */
    function setPointAt(pointAtTarget: TVec3): boolean;
    /**
     * Creates a new grab that grabs an entity.
     * @example
     * <caption>Create and grab an entity for a short while.</caption>
    var entityPosition = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 }));
    var entityRotation = MyAvatar.orientation;
    var entityID = Entities.addEntity({
        type: "Box",
        position: entityPosition,
        rotation: entityRotation,
        dimensions: { x: 0.5, y: 0.5, z: 0.5 }
    });
    var rightHandJoint = MyAvatar.getJointIndex("RightHand");
    var relativePosition = Entities.worldToLocalPosition(entityPosition, MyAvatar.SELF_ID, rightHandJoint);
    var relativeRotation = Entities.worldToLocalRotation(entityRotation, MyAvatar.SELF_ID, rightHandJoint);
    var grabID = MyAvatar.grab(entityID, rightHandJoint, relativePosition, relativeRotation);
    
    Script.setTimeout(function () {
        MyAvatar.releaseGrab(grabID);
        Entities.deleteEntity(entityID);
    }, 10000);
     * @param targetID - The ID of the entity to grab.
     * @param parentJointIndex - The avatar joint to use to grab the entity.
     * @param offset - The target's local position relative to the joint.
     * @param rotationalOffset - The target's local rotation relative to the joint.
     * @returns The ID of the new grab.
     */
    function grab(targetID: Uuid, parentJointIndex: number, offset: TVec3, rotationalOffset: TQuat): Uuid;
    /**
     * Releases (deletes) a grab to stop grabbing an entity.
     * @param grabID - The ID of the grab to release.
     */
    function releaseGrab(grabID: Uuid): void;
    /**
     * Gets details of all avatar entities.
    <p><strong>Warning:</strong> Potentially an expensive call. Do not use if possible.</p>
     * @example
     * <caption>Report the current avatar entities.</caption>
    var avatarEntityData = MyAvatar.getAvatarEntityData();
    print("Avatar entities: " + JSON.stringify(avatarEntityData));
     * @returns Details of all avatar entities.
     */
    function getAvatarEntityData(): AvatarEntityMap;
    /**
     * Sets all avatar entities from an object.
     * @param avatarEntityData - Details of the avatar entities.
     */
    function setAvatarEntityData(avatarEntityData: AvatarEntityMap): void;
    /**
     * Enables and disables flow simulation of physics on the avatar's hair, clothes, and body parts. See
    {@link https://docs.overte.org/create/avatars/add-flow.html|Add Flow to Your Avatar} for more
    information.
     * @param isActive - <code>true</code> if flow simulation is enabled on the joint, <code>false</code> if it isn't.
     * @param isCollidable - <code>true</code> to enable collisions in the flow simulation, <code>false</code> to
        disable.
     * @param [physicsConfig] - Physics configurations for particular entity
        and avatar joints.
     * @param [collisionsConfig] - Collision configurations for particular
        entity and avatar joints.
     */
    function useFlow(isActive: boolean, isCollidable: boolean, physicsConfig?: {
        [key: string]: MyAvatar.FlowPhysicsOptions;
    }, collisionsConfig?: {
        [key: string]: MyAvatar.FlowCollisionsOptions;
    }): void;
    /**
     * Gets the current flow configuration.
     */
    function getFlowData(): MyAvatar.FlowData;
    /**
     * Gets the indexes of currently colliding flow joints.
     * @returns The indexes of currently colliding flow joints.
     */
    function getCollidingFlowJoints(): number[];
    /**
     * Starts a sitting action for the avatar.
     * @param position - The position where the avatar should sit.
     * @param rotation - The initial orientation of the seated avatar.
     */
    function beginSit(position: TVec3, rotation: TQuat): void;
    /**
     * Ends a sitting action for the avatar.
     * @param position - The position of the avatar when standing up.
     * @param rotation - The orientation of the avatar when standing up.
     */
    function endSit(position: TVec3, rotation: TQuat): void;
    /**
     * Gets whether the avatar is in a seated pose. The seated pose is set by calling {@link MyAvatar.beginSit}.
     * @returns <code>true</code> if the avatar is in a seated pose, <code>false</code> if it isn't.
     */
    function isSeated(): boolean;
    /**
     * Increases the avatar's scale by five percent, up to a minimum scale of <code>1000</code>.
     * @example
     * <caption>Reset your avatar's size to default then grow it 5 times.</caption>
    MyAvatar.resetSize();
    
    for (var i = 0; i < 5; i++){
        print("Growing by 5 percent");
        MyAvatar.increaseSize();
    }
     */
    function increaseSize(): void;
    /**
     * Decreases the avatar's scale by five percent, down to a minimum scale of <code>0.25</code>.
     * @example
     * <caption>Reset your avatar's size to default then shrink it 5 times.</caption>
    MyAvatar.resetSize();
    
    for (var i = 0; i < 5; i++){
        print("Shrinking by 5 percent");
        MyAvatar.decreaseSize();
    }
     */
    function decreaseSize(): void;
    /**
     * Resets the avatar's scale back to the default scale of <code>1.0</code>.
     */
    function resetSize(): void;
    function animGraphLoaded(): void;
    /**
     * Sets the amount of gravity applied to the avatar in the y-axis direction. (Negative values are downward.)
     * @param gravity - The amount of gravity to be applied to the avatar, in m/s<sup>2</sup>.
     */
    function setGravity(gravity: number): void;
    /**
     * Sets the amount of gravity applied to the avatar in the y-axis direction. (Negative values are downward.) The default
    value is <code>-5</code> m/s<sup>2</sup>.
     * @returns The amount of gravity currently applied to the avatar, in m/s<sup>2</sup>.
     */
    function getGravity(): number;
    /**
     * Moves the avatar to a new position and/or orientation in the domain, with safe landing, while taking into account avatar
    leg length.
     * @param position - The new position for the avatar, in world coordinates.
     * @param [hasOrientation = false] - Set to <code>true</code> to set the orientation of the avatar.
     * @param [orientation = Quat.IDENTITY] - The new orientation for the avatar.
     * @param [shouldFaceLocation = false] - Set to <code>true</code> to position the avatar a short distance away from
         the new position and orientate the avatar to face the position.
     */
    function goToFeetLocation(position: TVec3, hasOrientation?: boolean, orientation?: TQuat, shouldFaceLocation?: boolean): void;
    /**
     * Moves the avatar to a new position and (optional) orientation in the domain, with safe landing.
     * @param target - The goto target.
     */
    function goToLocation(target: MyAvatar.GoToProperties): void;
    /**
     * Moves the avatar to a new position, with safe landing, and enables collisions.
     * @param position - The new position for the avatar, in world coordinates.
     */
    function goToLocationAndEnableCollisions(position: TVec3): void;
    /**
     * @param position - The new position for the avatar, in world coordinates.
     * @returns <code>true</code> if the avatar was moved, <code>false</code> if it wasn't.
     */
    function safeLanding(position: TVec3): boolean;
    /**
     * @param domainSettings - Domain settings.
     */
    function restrictScaleFromDomainSettings(domainSettings: any): void;
    function clearScaleRestriction(): void;
    /**
     * Adds a thrust to your avatar's current thrust to be applied for a short while.
     * @param thrust - The thrust direction and magnitude.
     */
    function addThrust(thrust: TVec3): void;
    /**
     * Gets the thrust currently being applied to your avatar.
     * @returns The thrust currently being applied to your avatar.
     */
    function getThrust(): TVec3;
    /**
     * Sets the thrust to be applied to your avatar for a short while.
     * @param thrust - The thrust direction and magnitude.
     */
    function setThrust(thrust: TVec3): void;
    /**
     * Updates avatar motion behavior from the Developer &gt; Avatar &gt; Enable Default Motor Control and Enable Scripted
    Motor Control menu items.
     */
    function updateMotionBehaviorFromMenu(): void;
    /**
     * @param enabled - Enabled.
     */
    function setToggleHips(enabled: boolean): void;
    /**
     * Displays the base of support area debug graphics if in HMD mode. If your head goes outside this area your avatar's hips
    are moved to counterbalance your avatar, and if your head moves too far then your avatar's position is moved (i.e., a
    step happens).
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawBaseOfSupport(enabled: boolean): void;
    /**
     * Displays default pose debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawDefaultPose(enabled: boolean): void;
    /**
     * Displays animation debug graphics. By default, the animation poses used for rendering are displayed. However,
    {@link MyAvatar.setDebugDrawAnimPoseName} can be used to set a specific animation node to display.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawAnimPose(enabled: boolean): void;
    /**
     * Sets the animation node to display when animation debug graphics are enabled with
    {@link MyAvatar.setEnableDebugDrawAnimPose}.
     * @param poseName - The name of the animation node to display debug graphics for. Use <code>""</code> to reset to
        default.
     */
    function setDebugDrawAnimPoseName(poseName: string): void;
    /**
     * Displays position debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawPosition(enabled: boolean): void;
    /**
     * Displays controller hand target debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawHandControllers(enabled: boolean): void;
    /**
     * Displays sensor-to-world matrix debug graphics.
     * @param enable - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawSensorToWorldMatrix(enable: boolean): void;
    /**
     * Displays inverse kinematics targets debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawIKTargets(enabled: boolean): void;
    /**
     * Displays inverse kinematics constraints debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawIKConstraints(enabled: boolean): void;
    /**
     * Displays inverse kinematics chains debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawIKChains(enabled: boolean): void;
    /**
     * Displays detailed collision debug graphics.
     * @param enabled - <code>true</code> to show the debug graphics, <code>false</code> to hide.
     */
    function setEnableDebugDrawDetailedCollision(enabled: boolean): void;
    /**
     * Gets whether your avatar mesh is visible.
     * @returns <code>true</code> if your avatar's mesh is visible, otherwise <code>false</code>.
     */
    function getEnableMeshVisible(): boolean;
    /**
     * Sets whether your avatar mesh is visible to you.
     * @example
     * <caption>Make your avatar invisible for 10s.</caption>
    MyAvatar.setEnableMeshVisible(false);
    Script.setTimeout(function () {
        MyAvatar.setEnableMeshVisible(true);
    }, 10000);
     * @param enabled - <code>true</code> to show your avatar mesh, <code>false</code> to hide.
     */
    function setEnableMeshVisible(enabled: boolean): void;
    /**
     * Sets whether inverse kinematics (IK) is enabled for your avatar.
     * @param enabled - <code>true</code> to enable IK, <code>false</code> to disable.
     */
    function setEnableInverseKinematics(enabled: boolean): void;
    /**
     * Gets the URL of the override animation graph.
    <p>See {@link https://docs.overte.org/create/avatars/custom-animations.html|Custom Avatar Animations} for
    information on animation graphs.</p>
     * @returns The URL of the override animation graph JSON file. <code>""</code> if there is no override animation
        graph.
     */
    function getAnimGraphOverrideUrl(): string;
    /**
     * Sets the animation graph to use in preference to the default animation graph.
    <p>See {@link https://docs.overte.org/create/avatars/custom-animations.html|Custom Avatar Animations} for
    information on animation graphs.</p>
     * @param url - The URL of the animation graph JSON file to use. Set to <code>""</code> to clear an override.
     */
    function setAnimGraphOverrideUrl(url: string): void;
    /**
     * Gets the URL of animation graph (i.e., the avatar animation JSON) that's currently being used for avatar animations.
    <p>See {@link https://docs.overte.org/create/avatars/custom-animations.html|Custom Avatar Animations} for
    information on animation graphs.</p>
     * @example
     * <caption>Report the current avatar animation JSON being used.</caption>
    print(MyAvatar.getAnimGraphUrl());
     * @returns The URL of the current animation graph JSON file.
     */
    function getAnimGraphUrl(): string;
    /**
     * Sets the current animation graph  (i.e., the avatar animation JSON) to use for avatar animations and makes it the default.
    <p>See {@link https://docs.overte.org/create/avatars/custom-animations.html|Custom Avatar Animations} for
    information on animation graphs.</p>
     * @param url - The URL of the animation graph JSON file to use.
     */
    function setAnimGraphUrl(url: string): void;
    /**
     * Gets your listening position for spatialized audio. The position depends on the value of the
    {@link Myavatar|audioListenerMode} property.
     * @returns Your listening position.
     */
    function getPositionForAudio(): TVec3;
    /**
     * Gets the orientation of your listening position for spatialized audio. The orientation depends on the value of the
    {@link Myavatar|audioListenerMode} property.
     * @returns The orientation of your listening position.
     */
    function getOrientationForAudio(): TQuat;
    /**
     * @param scale - The scale.
     */
    function setModelScale(scale: number): void;
    /**
     * Gets the list of reactions names that can be triggered using {@link MyAvatar.triggerReaction}.
    <p>See also: {@link MyAvatar.getBeginEndReactions}.
     * @example
     * <caption>List the available trigger reactions.</caption>
    print("Trigger reactions:", JSON.stringify(MyAvatar.getTriggerReactions()));
     * @returns List of reaction names that can be triggered using {@link MyAvatar.triggerReaction}.
     */
    function getTriggerReactions(): string[];
    /**
     * Gets the list of reactions names that can be enabled using {@link MyAvatar.beginReaction} and
    {@link MyAvatar.endReaction}.
    <p>See also: {@link MyAvatar.getTriggerReactions}.
     * @example
     * <caption>List the available begin-end reactions.</caption>
    print("Begin-end reactions:", JSON.stringify(MyAvatar.getBeginEndReactions()));
     * @returns List of reaction names that can be enabled using {@link MyAvatar.beginReaction} and
        {@link MyAvatar.endReaction}.
     */
    function getBeginEndReactions(): string[];
    /**
     * Plays a reaction on the avatar. Once the reaction is complete it will stop playing.
    <p>Only reaction names returned by {@link MyAvatar.getTriggerReactions} are available.</p>
     * @param reactionName - The reaction to trigger.
     * @returns <code>true</code> if the reaction was played, <code>false</code> if the reaction is not supported.
     */
    function triggerReaction(reactionName: string): boolean;
    /**
     * Starts playing a reaction on the avatar. The reaction will continue to play until stopped using
    {@link MyAvatar.endReaction} or superseded by another reaction.
    <p>Only reactions returned by {@link MyAvatar.getBeginEndReactions} are available.</p>
     * @param reactionName - The reaction to start playing.
     * @returns <code>true</code> if the reaction was started, <code>false</code> if the reaction is not supported.
     */
    function beginReaction(reactionName: string): boolean;
    /**
     * Stops playing a reaction that was started using {@link MyAvatar.beginReaction}.
     * @param reactionName - The reaction to stop playing.
     * @returns <code>true</code> if the reaction was stopped, <code>false</code> if the reaction is not supported.
     */
    function endReaction(reactionName: string): boolean;
    /**
     * The position of the avatar.
     */
    const position: TVec3;
    /**
     * The orientation of the avatar.
     */
    const orientation: TQuat;
    /**
     * <p>Specifies the initial conditions of the IK solver.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>RelaxToUnderPoses</td><td>This is a blend: it is 15/16 <code>PreviousSolution</code>
          and 1/16 <code>UnderPoses</code>. This provides some of the benefits of using <code>UnderPoses</code> so that the
          underlying animation is still visible, while at the same time converging faster then using the
          <code>UnderPoses</code> as the only initial solution.</td></tr>
        <tr><td><code>1</code></td><td>RelaxToLimitCenterPoses</td><td>This is a blend: it is 15/16
          <code>PreviousSolution</code> and 1/16 <code>LimitCenterPoses</code>. This should converge quickly because it is
          close to the previous solution, but still provides the benefits of avoiding limb locking.</td></tr>
        <tr><td><code>2</code></td><td>PreviousSolution</td><td>
          <p>The IK system will begin to solve from the same position and orientations for each joint that was the result
          from the previous frame.</p>
          <p>Pros: As the end effectors typically do not move much from frame to frame, this is likely to converge quickly
          to a valid solution.</p>
          <p>Cons: If the previous solution resulted in an awkward or uncomfortable posture, the next frame will also be
          awkward and uncomfortable. It can also result in locked elbows and knees.</p>
          </td></tr>
        <tr><td><code>3</code></td><td>UnderPoses</td><td>The IK occurs at one of the top-most layers. It has access to the
          full posture that was computed via canned animations and blends. We call this animated set of poses the "under
          pose". The under poses are what would be visible if IK was completely disabled. Using the under poses as the
          initial conditions of the CCD solve will cause some of the animated motion to be blended into the result of the
          IK. This can result in very natural results, especially if there are only a few IK targets enabled. On the other
          hand, because the under poses might be quite far from the desired end effector, it can converge slowly in some
          cases, causing it to never reach the IK target in the allotted number of iterations. Also, in situations where all
          of the IK targets are being controlled by external sensors, sometimes starting from the under poses can cause
          awkward motions from the underlying animations to leak into the IK result.</td></tr>
        <tr><td><code>4</code></td><td>LimitCenterPoses</td><td>This pose is taken to be the center of all the joint
          constraints. This can prevent the IK solution from getting locked or stuck at a particular constraint. For
          example, if the arm is pointing straight outward from the body, as the end effector moves towards the body, at
          some point the elbow should bend to accommodate. However, because the CCD solver is stuck at a local maximum, it
          will not rotate the elbow, unless the initial conditions already have the elbow bent, which is the case for
          <code>LimitCenterPoses</code>. When all the IK targets are enabled, this result will provide a consistent starting
          point for each IK solve, hopefully resulting in a consistent, natural result.</td></tr>
      </tbody>
    </table>
     */
    type AnimIKSolutionSource = number;
    /**
     * <p>Specifies sets of joints.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>FullBodyBoneSet</td><td>All joints.</td></tr>
        <tr><td><code>1</code></td><td>UpperBodyBoneSet</td><td>Only the "Spine" joint and its children.</td></tr>
        <tr><td><code>2</code></td><td>LowerBodyBoneSet</td><td>Only the leg joints and their children.</td></tr>
        <tr><td><code>3</code></td><td>LeftArmBoneSet</td><td>Joints that are the children of the "LeftShoulder"
          joint.</td></tr>
        <tr><td><code>4</code></td><td>RightArmBoneSet</td><td>Joints that are the children of the "RightShoulder"
          joint.</td></tr>
        <tr><td><code>5</code></td><td>AboveTheHeadBoneSet</td><td>Joints that are the children of the "Head"
          joint.</td></tr>
        <tr><td><code>6</code></td><td>BelowTheHeadBoneSet</td><td>Joints that are NOT the children of the "head"
          joint.</td></tr>
        <tr><td><code>7</code></td><td>HeadOnlyBoneSet</td><td>The "Head" joint.</td></tr>
        <tr><td><code>8</code></td><td>SpineOnlyBoneSet</td><td>The "Spine" joint.</td></tr>
        <tr><td><code>9</code></td><td>EmptyBoneSet</td><td>No joints.</td></tr>
        <tr><td><code>10</code></td><td>LeftHandBoneSet</td><td>joints that are the children of the "LeftHand"
          joint.</td></tr>
        <tr><td><code>11</code></td><td>RightHandBoneSet</td><td>Joints that are the children of the "RightHand"
          joint.</td></tr>
        <tr><td><code>12</code></td><td>HipsOnlyBoneSet</td><td>The "Hips" joint.</td></tr>
        <tr><td><code>13</code></td><td>BothFeetBoneSet</td><td>The "LeftFoot" and "RightFoot" joints.</td></tr>
      </tbody>
    </table>
     */
    type AnimOverlayBoneSet = number;
    /**
     * <p>An IK target type.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>RotationAndPosition</td><td>Attempt to reach the rotation and position end
          effector.</td></tr>
        <tr><td><code>1</code></td><td>RotationOnly</td><td>Attempt to reach the end effector rotation only.</td></tr>
        <tr><td><code>2</code></td><td>HmdHead</td><td>
          <p>A special mode of IK that would attempt to prevent unnecessary bending of the spine.</p>
          <p class="important">Deprecated: This target type is deprecated and will be removed.</p></td></tr>
        <tr><td><code>3</code></td><td>HipsRelativeRotationAndPosition</td><td>Attempt to reach a rotation and position end
          effector that is not in absolute rig coordinates but is offset by the avatar hips translation.</td></tr>
        <tr><td><code>4</code></td><td>Spline</td><td>Use a cubic Hermite spline to model the human spine. This prevents
          kinks in the spine and allows for a small amount of stretch and squash.</td></tr>
        <tr><td><code>5</code></td><td>Unknown</td><td>IK is disabled.</td></tr>
      </tbody>
    </table>
     */
    type IKTargetType = number;
    /**
     * <p>An <code>AnimStateDictionary</code> object may have the following properties. It may also have other properties, set by
    scripts.</p>
    <p><strong>Warning:</strong> These properties are subject to change.
    <table>
      <thead>
        <tr><th>Name</th><th>Type</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>userAnimNone</code></td><td>boolean</td><td><code>true</code> when no user overrideAnimation is
          playing.</td></tr>
        <tr><td><code>userAnimA</code></td><td>boolean</td><td><code>true</code> when a user overrideAnimation is
          playing.</td></tr>
        <tr><td><code>userAnimB</code></td><td>boolean</td><td><code>true</code> when a user overrideAnimation is
          playing.</td></tr>
    
        <tr><td><code>sine</code></td><td>number</td><td>Oscillating sine wave.</td></tr>
        <tr><td><code>moveForwardSpeed</code></td><td>number</td><td>Controls the blend between the various forward walking
          &amp; running animations.</td></tr>
        <tr><td><code>moveBackwardSpeed</code></td><td>number</td><td>Controls the blend between the various backward walking
          &amp; running animations.</td></tr>
        <tr><td><code>moveLateralSpeed</code></td><td>number</td><td>Controls the blend between the various sidestep walking
          &amp; running animations.</td></tr>
    
        <tr><td><code>isMovingForward</code></td><td>boolean</td><td><code>true</code> if the avatar is moving
          forward.</td></tr>
        <tr><td><code>isMovingBackward</code></td><td>boolean</td><td><code>true</code> if the avatar is moving
          backward.</td></tr>
        <tr><td><code>isMovingRight</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the
          right.</td></tr>
        <tr><td><code>isMovingLeft</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the
          left.</td></tr>
        <tr><td><code>isMovingRightHmd</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the right
          while the user is in HMD mode.</td></tr>
        <tr><td><code>isMovingLeftHmd</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the left while
          the user is in HMD mode.</td></tr>
        <tr><td><code>isNotMoving</code></td><td>boolean</td><td><code>true</code> if the avatar is stationary.</td></tr>
    
        <tr><td><code>isTurningRight</code></td><td>boolean</td><td><code>true</code> if the avatar is turning
          clockwise.</td></tr>
        <tr><td><code>isTurningLeft</code></td><td>boolean</td><td><code>true</code> if the avatar is turning
          counter-clockwise.</td></tr>
        <tr><td><code>isNotTurning</code></td><td>boolean</td><td><code>true</code> if the avatar is not turning.</td></tr>
        <tr><td><code>isFlying</code></td><td>boolean</td><td><code>true</code> if the avatar is flying.</td></tr>
        <tr><td><code>isNotFlying</code></td><td>boolean</td><td><code>true</code> if the avatar is not flying.</td></tr>
        <tr><td><code>isTakeoffStand</code></td><td>boolean</td><td><code>true</code> if the avatar is about to execute a
          standing jump.</td></tr>
        <tr><td><code>isTakeoffRun</code></td><td>boolean</td><td><code>true</code> if the avatar is about to execute a running
          jump.</td></tr>
        <tr><td><code>isNotTakeoff</code></td><td>boolean</td><td><code>true</code> if the avatar is not jumping.</td></tr>
        <tr><td><code>isInAirStand</code></td><td>boolean</td><td><code>true</code> if the avatar is in the air after a standing
          jump.</td></tr>
        <tr><td><code>isInAirRun</code></td><td>boolean</td><td><code>true</code> if the avatar is in the air after a running
          jump.</td></tr>
        <tr><td><code>isNotInAir</code></td><td>boolean</td><td><code>true</code> if the avatar on the ground.</td></tr>
    
        <tr><td><code>inAirAlpha</code></td><td>number</td><td>Used to interpolate between the up, apex, and down in-air
          animations.</td></tr>
        <tr><td><code>ikOverlayAlpha</code></td><td>number</td><td>The blend between upper body and spline IK versus the
          underlying animation</td></tr>
    
        <tr><td><code>headPosition</code></td><td>{@link TVec3}</td><td>The desired position of the <code>Head</code> joint in
          rig coordinates.</td></tr>
        <tr><td><code>headRotation</code></td><td>{@link TQuat}</td><td>The desired orientation of the <code>Head</code> joint in
          rig coordinates.</td></tr>
        <tr><td><code>headType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the
          head.</td></tr>
        <tr><td><code>headWeight</code></td><td>number</td><td>How strongly the head chain blends with the other IK
          chains.</td></tr>
    
        <tr><td><code>leftHandPosition</code></td><td>{@link TVec3}</td><td>The desired position of the <code>LeftHand</code>
          joint in rig coordinates.</td></tr>
        <tr><td><code>leftHandRotation</code></td><td>{@link TQuat}</td><td>The desired orientation of the <code>LeftHand</code>
          joint in rig coordinates.</td></tr>
        <tr><td><code>leftHandType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the
          left arm.</td></tr>
        <tr><td><code>leftHandPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the elbow angle is
          controlled by the <code>rightHandPoleVector</code> property value. Otherwise the elbow direction comes from the
          underlying animation.</td></tr>
        <tr><td><code>leftHandPoleReferenceVector</code></td><td>{@link TVec3}</td><td>The direction of the elbow in the local
          coordinate system of the elbow.</td></tr>
        <tr><td><code>leftHandPoleVector</code></td><td>{@link TVec3}</td><td>The direction the elbow should point in rig
          coordinates.</td></tr>
    
        <tr><td><code>rightHandPosition</code></td><td>{@link TVec3}</td><td>The desired position of the <code>RightHand</code>
          joint in rig coordinates.</td></tr>
        <tr><td><code>rightHandRotation</code></td><td>{@link TQuat}</td><td>The desired orientation of the
          <code>RightHand</code> joint in rig coordinates.</td></tr>
        <tr><td><code>rightHandType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for
          the right arm.</td></tr>
        <tr><td><code>rightHandPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the elbow angle is
          controlled by the <code>rightHandPoleVector</code> property value. Otherwise the elbow direction comes from the
          underlying animation.</td></tr>
        <tr><td><code>rightHandPoleReferenceVector</code></td><td>{@link TVec3}</td><td>The direction of the elbow in the local
          coordinate system of the elbow.</td></tr>
        <tr><td><code>rightHandPoleVector</code></td><td>{@link TVec3}</td><td>The direction the elbow should point in rig
          coordinates.</td></tr>
    
        <tr><td><code>leftFootIKEnabled</code></td><td>boolean</td><td><code>true</code> if IK is enabled for the left
          foot.</td></tr>
        <tr><td><code>rightFootIKEnabled</code></td><td>boolean</td><td><code>true</code> if IK is enabled for the right
          foot.</td></tr>
    
        <tr><td><code>leftFootIKPositionVar</code></td><td>string</td><td>The name of the source for the desired position
          of the <code>LeftFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>
        <tr><td><code>leftFootIKRotationVar</code></td><td>string</td><td>The name of the source for the desired rotation
          of the <code>LeftFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>
        <tr><td><code>leftFootPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the knee angle is
          controlled by the <code>leftFootPoleVector</code> property value. Otherwise the knee direction comes from the
          underlying animation.</td></tr>
        <tr><td><code>leftFootPoleVector</code></td><td>{@link TVec3}</td><td>The direction the knee should face in rig
          coordinates.</td></tr>
        <tr><td><code>rightFootIKPositionVar</code></td><td>string</td><td>The name of the source for the desired position
          of the <code>RightFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>
        <tr><td><code>rightFootIKRotationVar</code></td><td>string</td><td>The name of the source for the desired rotation
          of the <code>RightFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>
        <tr><td><code>rightFootPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the knee angle is
          controlled by the <code>rightFootPoleVector</code> property value. Otherwise the knee direction comes from the
          underlying animation.</td></tr>
        <tr><td><code>rightFootPoleVector</code></td><td>{@link TVec3}</td><td>The direction the knee should face in rig
          coordinates.</td></tr>
    
        <tr><td><code>isTalking</code></td><td>boolean</td><td><code>true</code> if the avatar is talking.</td></tr>
        <tr><td><code>notIsTalking</code></td><td>boolean</td><td><code>true</code> if the avatar is not talking.</td></tr>
    
        <tr><td><code>solutionSource</code></td><td>{@link MyAvatar.AnimIKSolutionSource|AnimIKSolutionSource}</td>
          <td>Determines the initial conditions of the IK solver.</td></tr>
        <tr><td><code>defaultPoseOverlayAlpha</code></td><td>number</td><td>Controls the blend between the main animation state
          machine and the default pose. Mostly used during full body tracking so that walking &amp; jumping animations do not
          affect the IK of the figure.</td></tr>
        <tr><td><code>defaultPoseOverlayBoneSet</code></td><td>{@link MyAvatar.AnimOverlayBoneSet|AnimOverlayBoneSet}</td>
          <td>Specifies which bones will be replace by the source overlay.</td></tr>
        <tr><td><code>hipsType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the
          hips.</td></tr>
        <tr><td><code>hipsPosition</code></td><td>{@link TVec3}</td><td>The desired position of <code>Hips</code> joint in rig
          coordinates.</td></tr>
        <tr><td><code>hipsRotation</code></td><td>{@link TQuat}</td><td>the desired orientation of the <code>Hips</code> joint in
          rig coordinates.</td></tr>
        <tr><td><code>spine2Type</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the
          <code>Spine2</code> joint.</td></tr>
        <tr><td><code>spine2Position</code></td><td>{@link TVec3}</td><td>The desired position of the <code>Spine2</code> joint
          in rig coordinates.</td></tr>
        <tr><td><code>spine2Rotation</code></td><td>{@link TQuat}</td><td>The desired orientation of the <code>Spine2</code>
          joint in rig coordinates.</td></tr>
    
        <tr><td><code>leftFootIKAlpha</code></td><td>number</td><td>Blends between full IK for the leg and the underlying
          animation.</td></tr>
        <tr><td><code>rightFootIKAlpha</code></td><td>number</td><td>Blends between full IK for the leg and the underlying
          animation.</td></tr>
        <tr><td><code>hipsWeight</code></td><td>number</td><td>How strongly the hips target blends with the IK solution for
          other IK chains.</td></tr>
        <tr><td><code>leftHandWeight</code></td><td>number</td><td>How strongly the left hand blends with IK solution of other
           IK chains.</td></tr>
        <tr><td><code>rightHandWeight</code></td><td>number</td><td>How strongly the right hand blends with IK solution of other
          IK chains.</td></tr>
        <tr><td><code>spine2Weight</code></td><td>number</td><td>How strongly the spine2 chain blends with the rest of the IK
          solution.</td></tr>
    
        <tr><td><code>leftHandOverlayAlpha</code></td><td>number</td><td>Used to blend in the animated hand gesture poses, such
          as point and thumbs up.</td></tr>
        <tr><td><code>leftHandGraspAlpha</code></td><td>number</td><td>Used to blend between an open hand and a closed hand.
          Usually changed as you squeeze the trigger of the hand controller.</td></tr>
        <tr><td><code>rightHandOverlayAlpha</code></td><td>number</td><td>Used to blend in the animated hand gesture poses,
          such as point and thumbs up.</td></tr>
        <tr><td><code>rightHandGraspAlpha</code></td><td>number</td><td>Used to blend between an open hand and a closed hand.
          Usually changed as you squeeze the trigger of the hand controller.</td></tr>
        <tr><td><code>isLeftIndexPoint</code></td><td>boolean</td><td><code>true</code> if the left hand should be
          pointing.</td></tr>
        <tr><td><code>isLeftThumbRaise</code></td><td>boolean</td><td><code>true</code> if the left hand should be
          thumbs-up.</td></tr>
        <tr><td><code>isLeftIndexPointAndThumbRaise</code></td><td>boolean</td><td><code>true</code> if the left hand should be
          pointing and thumbs-up.</td></tr>
        <tr><td><code>isLeftHandGrasp</code></td><td>boolean</td><td><code>true</code> if the left hand should be at rest,
          grasping the controller.</td></tr>
        <tr><td><code>isRightIndexPoint</code></td><td>boolean</td><td><code>true</code> if the right hand should be
          pointing.</td></tr>
        <tr><td><code>isRightThumbRaise</code></td><td>boolean</td><td><code>true</code> if the right hand should be
          thumbs-up.</td></tr>
        <tr><td><code>isRightIndexPointAndThumbRaise</code></td><td>boolean</td><td><code>true</code> if the right hand should
          be pointing and thumbs-up.</td></tr>
        <tr><td><code>isRightHandGrasp</code></td><td>boolean</td><td><code>true</code> if the right hand should be at rest,
          grasping the controller.</td></tr>
    
      </tbody>
    </table>
    <p>Note: Rig coordinates are <code>+z</code> forward and <code>+y</code> up.</p>
     */
    type AnimStateDictionary = any;
    /**
     * Gets the default rotation of a joint (in the current avatar) relative to its parent.
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @param index - The joint index.
     * @returns The default rotation of the joint if the joint index is valid, otherwise {@link TQuat(0)|Quat.IDENTITY}.
     */
    function getDefaultJointRotation(index: number): TQuat;
    /**
     * Gets the default translation of a joint (in the current avatar) relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @param index - The joint index.
     * @returns The default translation of the joint (in model coordinates) if the joint index is valid, otherwise
        {@link TVec3(0)|Vec3.ZERO}.
     */
    function getDefaultJointTranslation(index: number): TVec3;
    /**
     * Gets the default joint rotations in avatar coordinates.
    The default pose of the avatar is defined by the position and orientation of all bones
    in the avatar's model file. Typically this is a T-pose.
     * @example
     * <caption>Report the default rotation of your avatar's head joint relative to your avatar.</caption>
    var headIndex = MyAvatar.getJointIndex("Head");
    var defaultHeadRotation = MyAvatar.getAbsoluteDefaultJointRotationInObjectFrame(headIndex);
    print("Default head rotation: " + JSON.stringify(Quat.safeEulerAngles(defaultHeadRotation))); // Degrees
     * @param index - The joint index.
     * @returns The default rotation of the joint in avatar coordinates.
     */
    function getAbsoluteDefaultJointRotationInObjectFrame(index: number): TQuat;
    /**
     * Gets the default joint translations in avatar coordinates.
    The default pose of the avatar is defined by the position and orientation of all bones
    in the avatar's model file. Typically this is a T-pose.
     * @example
     * <caption>Report the default translation of your avatar's head joint relative to your avatar.</caption>
    var headIndex = MyAvatar.getJointIndex("Head");
    var defaultHeadTranslation = MyAvatar.getAbsoluteDefaultJointTranslationInObjectFrame(headIndex);
    print("Default head translation: " + JSON.stringify(defaultHeadTranslation));
     * @param index - The joint index.
     * @returns The default position of the joint in avatar coordinates.
     */
    function getAbsoluteDefaultJointTranslationInObjectFrame(index: number): TVec3;
    /**
     * Sets the rotation of a joint relative to the avatar.
    <p><strong>Warning:</strong> Not able to be used in the <code>MyAvatar</code> API.</p>
     * @param index - The index of the joint. <em>Not used.</em>
     * @param rotation - The rotation of the joint relative to the avatar. <em>Not used.</em>
     * @returns <code>false</code>.
     */
    function setAbsoluteJointRotationInObjectFrame(index: number, rotation: TQuat): boolean;
    /**
     * Sets the translation of a joint relative to the avatar.
    <p><strong>Warning:</strong> Not able to be used in the <code>MyAvatar</code> API.</p>
     * @param index - The index of the joint. <em>Not used.</em>
     * @param translation - The translation of the joint relative to the avatar. <em>Not used.</em>
     * @returns <code>false</code>.
     */
    function setAbsoluteJointTranslationInObjectFrame(index: number, translation: TVec3): boolean;
    /**
     * Transforms a position in world coordinates to a position in a joint's coordinates, or avatar coordinates if no joint is
    specified.
     * @param position - The position in world coordinates.
     * @param [jointIndex = -1] - The index of the joint.
     * @returns The position in the joint's coordinate system, or avatar coordinate system if no joint is specified.
     */
    function worldToJointPoint(position: TVec3, jointIndex?: number): TVec3;
    /**
     * Transforms a direction in world coordinates to a direction in a joint's coordinates, or avatar coordinates if no joint
    is specified.
     * @param direction - The direction in world coordinates.
     * @param [jointIndex = -1] - The index of the joint.
     * @returns The direction in the joint's coordinate system, or avatar coordinate system if no joint is specified.
     */
    function worldToJointDirection(direction: TVec3, jointIndex?: number): TVec3;
    /**
     * Transforms a rotation in world coordinates to a rotation in a joint's coordinates, or avatar coordinates if no joint is
    specified.
     * @param rotation - The rotation in world coordinates.
     * @param [jointIndex = -1] - The index of the joint.
     * @returns The rotation in the joint's coordinate system, or avatar coordinate system if no joint is specified.
     */
    function worldToJointRotation(rotation: TQuat, jointIndex?: number): TQuat;
    /**
     * Transforms a position in a joint's coordinates, or avatar coordinates if no joint is specified, to a position in world
    coordinates.
     * @param position - The position in joint coordinates, or avatar coordinates if no joint is specified.
     * @param [jointIndex = -1] - The index of the joint.
     * @returns The position in world coordinates.
     */
    function jointToWorldPoint(position: TVec3, jointIndex?: number): TVec3;
    /**
     * Transforms a direction in a joint's coordinates, or avatar coordinates if no joint is specified, to a direction in world
    coordinates.
     * @param direction - The direction in joint coordinates, or avatar coordinates if no joint is specified.
     * @param [jointIndex = -1] - The index of the joint.
     * @returns The direction in world coordinates.
     */
    function jointToWorldDirection(direction: TVec3, jointIndex?: number): TVec3;
    /**
     * Transforms a rotation in a joint's coordinates, or avatar coordinates if no joint is specified, to a rotation in world
    coordinates.
     * @param rotation - The rotation in joint coordinates, or avatar coordinates if no joint is specified.
     * @param [jointIndex = -1] - The index of the joint.
     * @returns The rotation in world coordinates.
     */
    function jointToWorldRotation(rotation: TQuat, jointIndex?: number): TQuat;
    /**
     * Sets the offset applied to the current avatar. The offset adjusts the position that the avatar is rendered. For example,
    with an offset of <code>{ x: 0, y: 0.1, z: 0 }</code>, your avatar will appear to be raised off the ground slightly.
     * @example
     * <caption>Raise your avatar off the ground a little.</caption>
    // Raise your avatar off the ground a little.
    MyAvatar.setSkeletonOffset({ x: 0, y: 0.1: z: 0 });
    
    // Restore its offset after 5s.
    Script.setTimeout(function () {
        MyAvatar.setSkeletonOffset(Vec3.ZERO);
    }, 5000);
     * @param offset - The skeleton offset to set.
     */
    function setSkeletonOffset(offset: TVec3): void;
    /**
     * Gets the offset applied to the current avatar. The offset adjusts the position that the avatar is rendered. For example,
    with an offset of <code>{ x: 0, y: 0.1, z: 0 }</code>, your avatar will appear to be raised off the ground slightly.
     * @example
     * <caption>Report your avatar's current skeleton offset.</caption>
    print(JSON.stringify(MyAvatar.getSkeletonOffset());
     * @returns The current skeleton offset.
     */
    function getSkeletonOffset(): TVec3;
    /**
     * Gets the position of a joint in the current avatar.
     * @example
     * <caption>Report the position of your avatar's hips.</caption>
    print(JSON.stringify(MyAvatar.getJointPosition("Hips")));
     * @param name - The name of the joint.
     * @returns The position of the joint in world coordinates.
     */
    function getJointPosition(name: string): TVec3;
    /**
     * Gets the position of the current avatar's neck in world coordinates.
     * @example
     * <caption>Report the position of your avatar's neck.</caption>
    print(JSON.stringify(MyAvatar.getNeckPosition()));
     * @returns The position of the neck in world coordinates.
     */
    function getNeckPosition(): TVec3;
    /**
     * Gets the current acceleration of the avatar.
     * @returns The current acceleration of the avatar.
     */
    function getAcceleration(): TVec3;
    /**
     * Gets the position of the current avatar's feet (or rather, bottom of its collision capsule) in world coordinates.
     * @returns The position of the avatar's feet in world coordinates.
     */
    function getWorldFeetPosition(): TVec3;
    /**
     * Gets the ID of the entity or avatar that the avatar is parented to.
     * @returns The ID of the entity or avatar that the avatar is parented to. {@link Uuid(0)|Uuid.NULL} if not parented.
     */
    function getParentID(): Uuid;
    /**
     * Sets the ID of the entity or avatar that the avatar is parented to.
     * @param parentID - The ID of the entity or avatar that the avatar should be parented to. Set to
       {@link Uuid(0)|Uuid.NULL} to unparent.
     */
    function setParentID(parentID: Uuid): void;
    /**
     * Gets the joint of the entity or avatar that the avatar is parented to.
     * @returns The joint of the entity or avatar that the avatar is parented to. <code>65535</code> or
        <code>-1</code> if parented to the entity or avatar's position and orientation rather than a joint.
     */
    function getParentJointIndex(): number;
    /**
     * Sets the joint of the entity or avatar that the avatar is parented to.
     * @param parentJointIndex - The joint of the entity or avatar that the avatar should be parented to. Use
        <code>65535</code> or <code>-1</code> to parent to the entity or avatar's position and orientation rather than a
        joint.
     */
    function setParentJointIndex(parentJointIndex: number): void;
    /**
     * Gets information on all the joints in the avatar's skeleton.
     * @returns Information about each joint in the avatar's skeleton.
     */
    function getSkeleton(): SkeletonJoint[];
    /**
     * @param [rateName = ""] - Rate name.
     * @returns Simulation rate in Hz.
     */
    function getSimulationRate(rateName?: AvatarSimulationRate): number;
    /**
     * Triggered when the avatar's target scale is changed. The target scale is the desired scale of the avatar without any
    restrictions on permissible scale values imposed by the domain.
     * @param targetScale - The avatar's target scale.
     * @returns Signal
     */
    function targetScaleChanged(targetScale: number): any;
    /**
     * Gets the position of the left palm in world coordinates.
     * @example
     * <caption>Report the position of your avatar's left palm.</caption>
    print(JSON.stringify(MyAvatar.getLeftPalmPosition()));
     * @returns The position of the left palm in world coordinates.
     */
    function getLeftPalmPosition(): TVec3;
    /**
     * Gets the rotation of the left palm in world coordinates.
     * @example
     * <caption>Report the rotation of your avatar's left palm.</caption>
    print(JSON.stringify(MyAvatar.getLeftPalmRotation()));
     * @returns The rotation of the left palm in world coordinates.
     */
    function getLeftPalmRotation(): TQuat;
    /**
     * Gets the position of the right palm in world coordinates.
     * @example
     * <caption>Report the position of your avatar's right palm.</caption>
    print(JSON.stringify(MyAvatar.getRightPalmPosition()));
     * @returns The position of the right palm in world coordinates.
     */
    function getRightPalmPosition(): TVec3;
    /**
     * Get the rotation of the right palm in world coordinates.
     * @example
     * <caption>Report the rotation of your avatar's right palm.</caption>
    print(JSON.stringify(MyAvatar.getRightPalmRotation()));
     * @returns The rotation of the right palm in world coordinates.
     */
    function getRightPalmRotation(): TQuat;
    function setModelURLFinished(success: boolean): void;
    function rigReady(): void;
    function rigReset(): void;
    /**
     * Gets the minimum scale allowed for this avatar in the current domain.
    This value can change as the user changes avatars or when changing domains.
     * @returns The minimum scale allowed for this avatar in the current domain.
     */
    function getDomainMinScale(): number;
    /**
     * Gets the maximum scale allowed for this avatar in the current domain.
    This value can change as the user changes avatars or when changing domains.
     * @returns The maximum scale allowed for this avatar in the current domain.
     */
    function getDomainMaxScale(): number;
    /**
     * Gets the current eye height of the avatar.
    This height is only an estimate and might be incorrect for avatars that are missing standard joints.
     * @returns The eye height of the avatar.
     */
    function getEyeHeight(): number;
    /**
     * Gets the current height of the avatar.
    This height is only an estimate and might be incorrect for avatars that are missing standard joints.
     * @returns The height of the avatar.
     */
    function getHeight(): number;
    /**
     * Sets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the
    laser emanates from the tip of that finger, otherwise it emanates from the palm.
     * @param state - The pointing state of the hand.
     */
    function setHandState(state: HandState): void;
    /**
     * Gets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the
    laser emanates from the tip of that finger, otherwise it emanates from the palm.
     * @returns The pointing state of the hand.
     */
    function getHandState(): HandState;
    /**
     * Sets a specific joint's rotation and position relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @param name - The name of the joint.
     * @param rotation - The rotation of the joint relative to its parent.
     * @param translation - The translation of the joint relative to its parent, in model coordinates.
     */
    function setJointData(name: string, rotation: TQuat, translation: TVec3): void;
    /**
     * Sets a specific joint's rotation relative to its parent.
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @example
     * <caption>Set your avatar to its default T-pose then rotate its right arm.<br />
    <img alt="Avatar in T-pose with arm rotated" src="https://apidocs.overte.org/examples/armpose.png" /></caption>
    // Set all joint translations and rotations to defaults.
    var i, length, rotation, translation;
    for (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {
        rotation = MyAvatar.getDefaultJointRotation(i);
        translation = MyAvatar.getDefaultJointTranslation(i);
        MyAvatar.setJointData(i, rotation, translation);
    }
    
    // Rotate the right arm.
    var newArmRotation = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };
    MyAvatar.setJointRotation("RightArm", newArmRotation);
    
    // Restore your avatar's motion after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointsData();
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @param rotation - The rotation of the joint relative to its parent.
     */
    function setJointRotation(name: string, rotation: TQuat): void;
    /**
     * Sets a specific joint's translation relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @example
     * <caption>Stretch your avatar's neck. Depending on the avatar you are using, you will either see a gap between
    the head and body or you will see the neck stretched.<br />
    <img alt="Avatar with neck stretched" src="https://apidocs.overte.org/examples/stretched-neck.png" /></caption>
    // Stretch your avatar's neck.
    MyAvatar.setJointTranslation("Neck", Vec3.multiply(2, MyAvatar.getJointTranslation("Neck")));
    
    // Restore your avatar's neck after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointData("Neck");
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @param translation - The translation of the joint relative to its parent, in model coordinates.
     */
    function setJointTranslation(name: string, translation: TVec3): void;
    /**
     * Clears joint translations and rotations set by script for a specific joint. This restores all motion from the default
    animation system including inverse kinematics for that joint.
    <p>Note: This is slightly slower than the function variation that specifies the joint index.</p>
     * @example
     * <caption>Offset and restore the position of your avatar's head.</caption>
    // Stretch your avatar's neck.
    MyAvatar.setJointTranslation("Neck", Vec3.multiply(2, MyAvatar.getJointTranslation("Neck")));
    
    // Restore your avatar's neck after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointData("Neck");
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     */
    function clearJointData(name: string): void;
    /**
     * Checks if the data for a joint are valid.
     * @param name - The name of the joint.
     * @returns <code>true</code> if the joint data are valid, <code>false</code> if not.
     */
    function isJointDataValid(name: string): boolean;
    /**
     * Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.
     * @example
     * <caption>Report the rotation of your avatar's hips joint.</caption>
    print(JSON.stringify(MyAvatar.getJointRotation("Hips")));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @returns The rotation of the joint relative to its parent.
     */
    function getJointRotation(name: string): TQuat;
    /**
     * Gets the translation of a joint relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @example
     * <caption>Report the translation of your avatar's hips joint.</caption>
    print(JSON.stringify(MyAvatar.getJointRotation("Hips")));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @returns The translation of the joint relative to its parent, in model coordinates.
     */
    function getJointTranslation(name: number): TVec3;
    /**
     * Gets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.
     * @example
     * <caption>Report the rotations of all your avatar's joints.</caption>
    print(JSON.stringify(MyAvatar.getJointRotations()));
    
    // Note: If using from the Avatar API, replace all "MyAvatar" with "Avatar".
     * @returns The rotations of all joints relative to each's parent. The values are in the same order as the array
    returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.
     */
    function getJointRotations(): TQuat[];
    /**
     * Gets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in
    model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
     * @returns The translations of all joints relative to each's parent, in model coordinates. The values are in the
        same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the
        <code>Avatar</code> API.
     */
    function getJointTranslations(): TVec3[];
    /**
     * Sets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @example
     * <caption>Set your avatar to its default T-pose then rotate its right arm.<br />
    <img alt="Avatar in T-pose" src="https://apidocs.overte.org/examples/armpose.png" /></caption>
    // Set all joint translations and rotations to defaults.
    var i, length, rotation, translation;
    for (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {
        rotation = MyAvatar.getDefaultJointRotation(i);
        translation = MyAvatar.getDefaultJointTranslation(i);
        MyAvatar.setJointData(i, rotation, translation);
    }
    
    // Get all join rotations.
    var jointRotations = MyAvatar.getJointRotations();
    
    // Update the rotation of the right arm in the array.
    jointRotations[MyAvatar.getJointIndex("RightArm")] = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };
    
    // Update all joint rotations.
    MyAvatar.setJointRotations(jointRotations);
    
    // Restore your avatar's motion after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointsData();
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param jointRotations - The rotations for all joints in the avatar. The values are in the same order as the
    array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.
     */
    function setJointRotations(jointRotations: TQuat[]): void;
    /**
     * Sets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in
    model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse
    kinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,
    the avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate
    joints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set
    the rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>
     * @param translations - The translations for all joints in the avatar, in model coordinates. The values are in
        the same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the
        <code>Avatar</code> API.
     */
    function setJointTranslations(translations: TVec3[]): void;
    /**
     * Clears all joint translations and rotations that have been set by script. This restores all motion from the default
    animation system including inverse kinematics for all joints.
     * @example
     * <caption>Set your avatar to it's default T-pose for a while.</caption>
    // Set all joint translations and rotations to defaults.
    var i, length, rotation, translation;
    for (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {
        rotation = MyAvatar.getDefaultJointRotation(i);
        translation = MyAvatar.getDefaultJointTranslation(i);
        MyAvatar.setJointData(i, rotation, translation);
    }
    
    // Restore your avatar's motion after 5s.
    Script.setTimeout(function () {
        MyAvatar.clearJointsData();
    }, 5000);
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     */
    function clearJointsData(): void;
    /**
     * Gets the joint index for a named joint. The joint index value is the position of the joint in the array returned by
    {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.
     * @example
     * <caption>Report the index of your avatar's left arm joint.</caption>
    print(JSON.stringify(MyAvatar.getJointIndex("LeftArm")));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the joint.
     * @returns The index of the joint if valid, otherwise <code>-1</code>.
     */
    function getJointIndex(name: string): number;
    /**
     * Gets the names of all the joints in the current avatar.
     * @example
     * <caption>Report the names of all the joints in your current avatar.</caption>
    print(JSON.stringify(MyAvatar.getJointNames()));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns The joint names.
     */
    function getJointNames(): string[];
    /**
     * Sets the value of a blend shape to animate your avatar's face. In order for other users to see the resulting animations
    on your avatar's face, set <code>hasScriptedBlendshapes</code> to <code>true</code>. When you are done using this API,
    set <code>hasScriptedBlendshapes</code> back to <code>false</code> when the animation is complete.
     * @example
     * <caption>Open your avatar's mouth wide.</caption>
    MyAvatar.hasScriptedBlendshapes = true;
    MyAvatar.setBlendshape("JawOpen", 1.0);
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param name - The name of the blendshape, per the
        {@link https://docs.overte.org/create/avatars/avatar-standards.html#blendshapes Avatar Standards}.
     * @param value - A value between <code>0.0</code> and <code>1.0</code>.
     */
    function setBlendshape(name: string, value: number): void;
    /**
     * Gets information about the models currently attached to your avatar.
     * @returns Information about all models attached to your avatar.
     */
    function getAttachmentsVariant(): AttachmentData[];
    /**
     * Sets all models currently attached to your avatar. For example, if you retrieve attachment data using
    {@link MyAvatar.getAttachmentsVariant} or {@link Avatar.getAttachmentsVariant}, make changes to it, and then want to
    update your avatar's attachments per the changed data.
     * @param variant - The attachment data defining the models to have attached to your avatar.
     */
    function setAttachmentsVariant(variant: AttachmentData[]): void;
    /**
     * @param entityID - The entity ID.
     * @param entityData - Entity data.
     */
    function updateAvatarEntity(entityID: Uuid, entityData: ArrayBuffer): void;
    /**
     * @param entityID - The entity ID.
     * @param [requiresRemovalFromTree = true] - unused
     */
    function clearAvatarEntity(entityID: Uuid, requiresRemovalFromTree?: boolean): void;
    /**
     * Enables blend shapes set using {@link Avatar.setBlendshape} or {@link MyAvatar.setBlendshape} to be transmitted to other
    users so that they can see the animation of your avatar's face.
    <p class="important">Deprecated: This method is deprecated and will be removed. Use the
    <code>Avatar.hasScriptedBlendshapes</code> or <code>MyAvatar.hasScriptedBlendshapes</code>  property instead.</p>
     * @param connected - <code>true</code> to enable blend shape changes to be transmitted to other users,
        <code>false</code> to disable.
     */
    function setForceFaceTrackerConnected(connected: boolean): void;
    /**
     * Sets the avatar's skeleton model.
     * @param url - The avatar's FST file.
     */
    function setSkeletonModelURL(url: string): void;
    /**
     * Gets information about the models currently attached to your avatar.
     * @example
     * <caption>Report the URLs of all current attachments.</caption>
    var attachments = MyAvatar.getaAttachmentData();
    for (var i = 0; i < attachments.length; i++) {
        print(attachments[i].modelURL);
    }
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns Information about all models attached to your avatar.
     */
    function getAttachmentData(): AttachmentData[];
    /**
     * Sets all models currently attached to your avatar. For example, if you retrieve attachment data using
    {@link MyAvatar.getAttachmentData} or {@link Avatar.getAttachmentData}, make changes to it, and then want to update your avatar's attachments per the
    changed data. You can also remove all attachments by using setting <code>attachmentData</code> to <code>null</code>.
     * @example
     * <caption>Remove a hat attachment if your avatar is wearing it.</caption>
    var hatURL = "https://apidocs.overte.org/examples/cowboy-hat.fbx";
    var attachments = MyAvatar.getAttachmentData();
    
    for (var i = 0; i < attachments.length; i++) {
        if (attachments[i].modelURL === hatURL) {
            attachments.splice(i, 1);
            MyAvatar.setAttachmentData(attachments);
            break;
        }
     }
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @param attachmentData - The attachment data defining the models to have attached to your avatar. Use
        <code>null</code> to remove all attachments.
     */
    function setAttachmentData(attachmentData: AttachmentData[]): void;
    /**
     * Attaches a model to your avatar. For example, you can give your avatar a hat to wear, a guitar to hold, or a surfboard to
    stand on.
     * @example
     * <caption>Attach a cowboy hat to your avatar's head.</caption>
    var attachment = {
        modelURL: "https://apidocs.overte.org/examples/cowboy-hat.fbx",
        jointName: "Head",
        translation: {"x": 0, "y": 0.25, "z": 0},
        rotation: {"x": 0, "y": 0, "z": 0, "w": 1},
        scale: 0.01,
        isSoft: false
    };
    
     MyAvatar.attach(attachment.modelURL,
                     attachment.jointName,
                     attachment.translation,
                     attachment.rotation,
                     attachment.scale,
                     attachment.isSoft);
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @param modelURL - The URL of the glTF, FBX, or OBJ model to attach. glTF models may be in JSON or binary format
        (".gltf" or ".glb" URLs respectively).
     * @param [jointName = ""] - The name of the avatar joint (see {@link MyAvatar.getJointNames} or
        {@link Avatar.getJointNames}) to attach the model to.
     * @param [translation = Vec3.ZERO] - The offset to apply to the model relative to the joint position.
     * @param [rotation = Quat.IDENTITY] - The rotation to apply to the model relative to the joint orientation.
     * @param [scale = 1.0] - The scale to apply to the model.
     * @param [isSoft = false] - If the model has a skeleton, set this to <code>true</code> so that the bones of the
        attached model's skeleton are rotated to fit the avatar's current pose. <code>isSoft</code> is used, for example,
        to have clothing that moves with the avatar.
        <p>If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and <code>scale</code> parameters are
        ignored.</p>
     * @param [allowDuplicates = false] - If <code>true</code> then more than one copy of any particular model may be
        attached to the same joint; if <code>false</code> then the same model cannot be attached to the same joint.
     * @param [useSaved = true] - <em>Not used.</em>
     */
    function attach(modelURL: string, jointName?: string, translation?: TVec3, rotation?: TQuat, scale?: number, isSoft?: boolean, allowDuplicates?: boolean, useSaved?: boolean): void;
    /**
     * Detaches the most recently attached instance of a particular model from either a specific joint or any joint.
     * @param modelURL - The URL of the model to detach.
     * @param [jointName = ""] - The name of the joint to detach the model from. If <code>""</code>, then the most
        recently attached model is removed from which ever joint it was attached to.
     */
    function detachOne(modelURL: string, jointName?: string): void;
    /**
     * Detaches all instances of a particular model from either a specific joint or all joints.
     * @param modelURL - The URL of the model to detach.
     * @param [jointName = ""] - The name of the joint to detach the model from. If <code>""</code>, then the model is
        detached from all joints.
     */
    function detachAll(modelURL: string, jointName?: string): void;
    /**
     * Gets the transform from the user's real world to the avatar's size, orientation, and position in the virtual world.
     * @example
     * <caption>Report the sensor to world matrix.</caption>
    var sensorToWorldMatrix = MyAvatar.getSensorToWorldMatrix();
    print("Sensor to woprld matrix: " + JSON.stringify(sensorToWorldMatrix));
    print("Rotation: " + JSON.stringify(Mat4.extractRotation(sensorToWorldMatrix)));
    print("Translation: " + JSON.stringify(Mat4.extractTranslation(sensorToWorldMatrix)));
    print("Scale: " + JSON.stringify(Mat4.extractScale(sensorToWorldMatrix)));
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns The scale, rotation, and translation transform from the user's real world to the avatar's size,
        orientation, and position in the virtual world.
     */
    function getSensorToWorldMatrix(): TMat4;
    /**
     * Gets the scale that transforms dimensions in the user's real world to the avatar's size in the virtual world.
     * @returns The scale that transforms dimensions in the user's real world to the avatar's size in the virtual
        world.
     */
    function getSensorToWorldScale(): number;
    /**
     * Gets the rotation and translation of the left hand controller relative to the avatar.
     * @example
     * <caption>Report the left hand controller matrix.</caption>
    var leftHandMatrix = MyAvatar.getControllerLeftHandMatrix();
    print("Controller left hand matrix: " + JSON.stringify(leftHandMatrix));
    print("Rotation: " + JSON.stringify(Mat4.extractRotation(leftHandMatrix)));
    print("Translation: " + JSON.stringify(Mat4.extractTranslation(leftHandMatrix)));
    print("Scale: " + JSON.stringify(Mat4.extractScale(leftHandMatrix))); // Always 1,1,1.
    
    // Note: If using from the Avatar API, replace "MyAvatar" with "Avatar".
     * @returns The rotation and translation of the left hand controller relative to the avatar.
     */
    function getControllerLeftHandMatrix(): TMat4;
    /**
     * Gets the rotation and translation of the right hand controller relative to the avatar.
     * @returns The rotation and translation of the right hand controller relative to the avatar.
     */
    function getControllerRightHandMatrix(): TMat4;
    /**
     * Gets the amount of avatar mixer data being generated by the avatar.
     * @param [rateName = ""] - The type of avatar mixer data to get the data rate of.
     * @returns The data rate in kbps.
     */
    function getDataRate(rateName?: AvatarDataRate): number;
    /**
     * Gets the update rate of avatar mixer data being generated by the avatar.
     * @param [rateName = ""] - The type of avatar mixer data to get the update rate of.
     * @returns The update rate in Hz.
     */
    function getUpdateRate(rateName?: AvatarUpdateRate): number;
    /**
     * @param [sendAll = false] - Send all.
     */
    function sendAvatarDataPacket(sendAll?: boolean): number;
    function sendIdentityPacket(): number;
    /**
     * @param sessionUUID - Session UUID.
     */
    function setSessionUUID(sessionUUID: Uuid): void;
    /**
     * Gets the target scale of the avatar without any restrictions on permissible values imposed by the domain. In contrast, the
    <code>scale</code> property's value may be limited by the domain's settings.
     * @example
     * <caption>Compare the target and current avatar scales.</caption>
    print("Current avatar scale: " + MyAvatar.scale);
    print("Target avatar scale:  " + MyAvatar.getTargetScale());
    
    // Note: If using from the Avatar API, replace all occurrences of "MyAvatar" with "Avatar".
     * @returns The target scale of the avatar.
     */
    function getTargetScale(): number;
    function resetLastSent(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>DriveKeys</code> API provides constant numeric values that represent different logical keys that drive your
avatar and camera.
 * @property TRANSLATE_X - Move the user's avatar in the direction of its x-axis, if the camera isn't in
    independent or mirror modes.
 * @property TRANSLATE_Y - Move the user's avatar in the direction of its y-axis, if the camera isn't in
    independent or mirror modes.
 * @property TRANSLATE_Z - Move the user's avatar in the direction of its z-axis, if the camera isn't in
    independent or mirror modes.
 * @property YAW - Rotate the user's avatar about its y-axis at a rate proportional to the control value, if the
    camera isn't in independent or mirror modes.
 * @property STEP_TRANSLATE_X - No action.
 * @property STEP_TRANSLATE_Y - No action.
 * @property STEP_TRANSLATE_Z - No action.
 * @property STEP_YAW - Rotate the user's avatar about its y-axis in a step increment, if the camera isn't in
    independent or mirror modes.
 * @property PITCH - Rotate the user's avatar head and attached camera about its negative x-axis (i.e., positive
    values pitch down) at a rate proportional to the control value, if the camera isn't in HMD, independent, or mirror
    modes.
 * @property ZOOM - Zoom the camera in or out.
 * @property DELTA_YAW - Rotate the user's avatar about its y-axis by an amount proportional to the control value,
    if the camera isn't in independent or mirror modes.
 * @property DELTA_PITCH - Rotate the user's avatar head and attached camera about its negative x-axis (i.e.,
    positive values pitch down) by an amount proportional to the control value, if the camera isn't in HMD, independent,
    or mirror modes.
 */
declare namespace DriveKeys { }

/**
 * <p>Logical keys that drive your avatar and camera.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>{@link DriveKeys|DriveKeys.TRANSLATE_X}</code></td><td>Move the user's avatar in the direction of its
      x-axis, if the camera isn't in independent or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.TRANSLATE_Y}</code></td><td>Move the user's avatar in the direction of its
      -axis, if the camera isn't in independent or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.TRANSLATE_Z}</code></td><td>Move the user's avatar in the direction of its
      z-axis, if the camera isn't in independent or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.YAW}</code></td><td>Rotate the user's avatar about its y-axis at a rate
      proportional to the control value, if the camera isn't in independent or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.STEP_TRANSLATE_X}</code></td><td>No action.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.STEP_TRANSLATE_Y}</code></td><td>No action.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.STEP_TRANSLATE_Z}</code></td><td>No action.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.STEP_YAW}</code></td><td>Rotate the user's avatar about its y-axis in a
      step increment, if the camera isn't in independent or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.PITCH}</code></td><td>Rotate the user's avatar head and attached camera
      about its negative x-axis (i.e., positive values pitch down) at a rate proportional to the control value, if the
      camera isn't in HMD, independent, or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.ZOOM}</code></td><td>Zoom the camera in or out.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.DELTA_YAW}</code></td><td>Rotate the user's avatar about its y-axis by an
      amount proportional to the control value, if the camera isn't in independent or mirror modes.</td></tr>
    <tr><td><code>{@link DriveKeys|DriveKeys.DELTA_PITCH}</code></td><td>Rotate the user's avatar head and attached
      camera about its negative x-axis (i.e., positive values pitch down) by an amount proportional to the control
      value, if the camera isn't in HMD, independent, or mirror modes.</td></tr>
  </tbody>
</table>
 */
declare type DriveKey = number;

/**
 * An intersection result for a collision pick.
 */
declare type CollisionPickResult = {
    /**
     * <code>true</code> if there is at least one intersection, <code>false</code> if there isn't.
     */
    intersects: boolean;
    /**
     * All objects which intersect with the <code>collisionRegion</code>.
     */
    intersectingObjects: IntersectingObject[];
    /**
     * The collision region that was used. Valid even if there was no intersection.
     */
    collisionRegion: CollisionRegion;
};

/**
 * Information about a {@link CollisionPick}'s intersection with an object.
 */
declare type IntersectingObject = {
    /**
     * The ID of the object.
     */
    id: Uuid;
    /**
     * The type of the object, either <code>1</code> for INTERSECTED_ENTITY or <code>3</code>
     * for INTERSECTED_AVATAR.
     */
    type: IntersectionType;
    /**
     * Information on the penetration between the pick and the object.
     */
    collisionContacts: CollisionContact[];
};

/**
 * A pair of points that represents part of an overlap between a {@link CollisionPick} and an object in the physics engine.
Points which are further apart represent deeper overlap.
 */
declare type CollisionContact = {
    /**
     * A point representing a penetration of the object's surface into the volume of the pick, in
     * world coordinates.
     */
    pointOnPick: TVec3;
    /**
     * A point representing a penetration of the pick's surface into the volume of the object, in
     * world coordinates.
     */
    pointOnObject: TVec3;
    /**
     * The normal vector pointing away from the pick, representing the direction of collision.
     */
    normalOnPick: TVec3;
};

/**
 * An intersection result for a parabola pick.
 */
declare type ParabolaPickResult = {
    /**
     * The intersection type.
     */
    type: number;
    /**
     * <code>true</code> if there's a valid intersection, <code>false</code> if there isn't.
     */
    intersects: boolean;
    /**
     * The ID of the intersected object. <code>null</code> for HUD or invalid intersections.
     */
    objectID: Uuid;
    /**
     * The distance from the parabola origin to the intersection point in a straight line.
     */
    distance: number;
    /**
     * The distance from the parabola origin to the intersection point along the arc of
     * the parabola.
     */
    parabolicDistance: number;
    /**
     * The intersection point in world coordinates.
     */
    intersection: TVec3;
    /**
     * The surface normal at the intersected point. All <code>NaN</code>s if <code>type ==
     * Picks.INTERSECTED_HUD</code>.
     */
    surfaceNormal: TVec3;
    /**
     * Additional intersection details for model objects, otherwise
     * <code>{ }</code>.
     */
    extraInfo: SubmeshIntersection;
    /**
     * The pick parabola that was used. Valid even if there is no intersection.
     */
    parabola: PickParabola;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Picks</code> API lets you create and manage objects for repeatedly calculating intersections.
 * @property PICK_DOMAIN_ENTITIES - Include domain entities when intersecting. <em>Read-only.</em>
 * @property PICK_AVATAR_ENTITIES - Include avatar entities when intersecting. <em>Read-only.</em>
 * @property PICK_LOCAL_ENTITIES - Include local entities when intersecting. <em>Read-only.</em>
 * @property PICK_AVATARS - Include avatars when intersecting. <em>Read-only.</em>
 * @property PICK_HUD - Include the HUD surface when intersecting in HMD mode. <em>Read-only.</em>
 * @property PICK_ENTITIES - Include domain and avatar entities when intersecting. <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed. Use <code>PICK_DOMAIN_ENTITIES |
    PICK_AVATAR_ENTITIES</code> instead.</p>
 * @property PICK_OVERLAYS - Include local entities when intersecting. <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed. Use <code>PICK_LOCAL_ENTITIES</code>
    instead.</p>
 * @property PICK_INCLUDE_VISIBLE - Include visible objects when intersecting. <em>Read-only.</em>
    <p><strong>Warning:</strong> Is currently always enabled by default but may not be in the future.</p>
 * @property PICK_INCLUDE_INVISIBLE - Include invisible objects when intersecting. <em>Read-only.</em>
 * @property PICK_INCLUDE_COLLIDABLE - Include collidable objects when intersecting. <em>Read-only.</em>
    <p><strong>Warning:</strong> Is currently always enabled by default but may not be in the future.</p>
 * @property PICK_INCLUDE_NONCOLLIDABLE - Include non-collidable objects when intersecting. <em>Read-only.</em>
 * @property PICK_PRECISE - Pick against exact meshes. <em>Read-only.</em>
 * @property PICK_COARSE - Pick against coarse meshes. <em>Read-only.</em>
 * @property PICK_ALL_INTERSECTIONS - If set, returns all intersections instead of just the closest.
    <em>Read-only.</em>
    <p><strong>Warning:</strong> Not yet implemented.</p>
 * @property PICK_BYPASS_IGNORE - Allows pick to intersect entities even when their
    <code>ignorePickIntersection</code> property value is <code>true</code>. For debug purposes.
    <em>Read-only.</em>
 * @property INTERSECTED_NONE - Intersected nothing. <em>Read-only.</em>
 * @property INTERSECTED_ENTITY - Intersected an entity. <em>Read-only.</em>
 * @property INTERSECTED_LOCAL_ENTITY - Intersected a local entity. <em>Read-only.</em>
 * @property INTERSECTED_OVERLAY - Intersected a local entity. (3D overlays no longer exist.)
    <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed. Use
    <code>INTERSECTED_LOCAL_ENTITY</code> instead.</p>
 * @property INTERSECTED_AVATAR - Intersected an avatar. <em>Read-only.</em>
 * @property INTERSECTED_HUD - Intersected the HUD surface. <em>Read-only.</em>
 * @property perFrameTimeBudget - The maximum time, in microseconds, to spend per frame updating pick results.
 */
declare namespace Picks {
    /**
     * The properties of a ray pick.
     */
    type RayPickProperties = {
        /**
         * <code>true</code> if this pick should start enabled, <code>false</code> if it should
         * start disabled. Disabled picks do not update their pick results.
         */
        enabled?: boolean;
        /**
         * The filter for this pick to use. Construct using {@link Picks} FilterFlags property
         * values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.
         */
        filter?: FilterFlags;
        /**
         * The maximum distance at which this pick will intersect. A value of <code>0.0</code>
         * means no maximum.
         * @defaultValue 0.0
         */
        maxDistance?: number;
        /**
         * The ID of the parent: an avatar, an entity, or another pick.
         */
        parentID?: Uuid;
        /**
         * The joint of the parent to parent to, for example, an avatar joint.
         * A value of <code>0</code> means no joint.
         * <p><em>Used only if <code>parentID</code> is specified.</em></p>
         */
        parentJointIndex?: number;
        /**
         * <code>"Mouse"</code> parents the pick to the mouse; <code>"Avatar"</code> parents the pick to
         * the user's avatar head; a joint name parents to the joint in the user's avatar; otherwise, the pick is "static", not
         * parented to anything.
         * <p><em>Used only if <code>parentID</code> is not specified.</em></p>
         */
        joint?: string;
        /**
         * The offset of the ray origin from its parent if parented, otherwise the ray origin
         * in world coordinates.
         * @defaultValue Vec3.ZERO
         */
        position?: TVec3;
        /**
         * Synonym for <code>position</code>.
         */
        posOffset?: TVec3;
        /**
         * The offset of the ray direction from its parent's y-axis if parented, otherwise the ray
         * direction in world coordinates.
         * <p><strong>Default Value:</strong> <code>Vec3.UP</code> direction if <code>joint</code> is specified, otherwise
         * <code>-Vec3.UP</code>.</p>
         */
        direction?: TVec3;
        /**
         * Synonym for <code>direction</code>.
         */
        dirOffset?: TVec3;
        /**
         * Alternative property for specifying <code>direction</code>. The value is applied to the
         * default <code>direction</code> value.
         */
        orientation?: TQuat;
        /**
         * The type of pick when getting these properties from {@link Picks.getPickProperties} or
         * {@link Picks.getPickScriptParameters}. A ray pick's type is {@link PickType.Ray}.
         */
        pickType: PickType;
        /**
         * Returned from {@link Picks.getPickProperties} when the pick has a parent with varying scale
         * (usually an avatar or an entity). Its value is the original scale of the parent at the moment the pick was created, and
         * is used to scale the pointer which owns this pick, if any.
         */
        baseScale: TVec3;
    };
    /**
     * The properties of a stylus pick.
     */
    type StylusPickProperties = {
        /**
         * <code>0</code> for the left hand, <code>1</code> for the right hand, invalid (<code>-1</code>)
         * otherwise.
         * @defaultValue -1
         */
        hand?: number;
        /**
         * <code>true</code> if this pick should start enabled, <code>false</code> if it should
         * start disabled. Disabled picks do not update their pick results.
         */
        enabled?: boolean;
        /**
         * The filter for this pick to use. Construct using {@link Picks} FilterFlags property
         * values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.
         * <p><strong>Note:</strong> Stylus picks do not intersect avatars or the HUD.</p>
         */
        filter?: number;
        /**
         * The maximum distance at which this pick will intersect. A value of <code>0.0</code>
         * means no maximum.
         * @defaultValue 0.0
         */
        maxDistance?: number;
        /**
         * The position of the stylus tip relative to the hand position at default avatar
         * scale.
         * @defaultValue 0,0.095,0
         */
        tipOffset?: TVec3;
        /**
         * The type of pick when getting these properties from {@link Picks.getPickProperties} or
         * {@link Picks.getPickScriptParameters}. A stylus pick's type is {@link PickType.Stylus}.
         */
        pickType: PickType;
    };
    /**
     * The properties of a parabola pick.
     */
    type ParabolaPickProperties = {
        /**
         * <code>true</code> if this pick should start enabled, <code>false</code> if it should
         * start disabled. Disabled picks do not update their pick results.
         */
        enabled?: boolean;
        /**
         * The filter for this pick to use. Construct using {@link Picks} FilterFlags property
         * values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.
         */
        filter?: number;
        /**
         * The maximum distance at which this pick will intersect. A value of <code>0.0</code>
         * means no maximum.
         * @defaultValue 0.0
         */
        maxDistance?: number;
        /**
         * The ID of the parent: an avatar, an entity, or another pick.
         */
        parentID?: Uuid;
        /**
         * The joint of the parent to parent to, for example, an avatar joint.
         * A value of <code>0</code> means no joint.
         * <p><em>Used only if <code>parentID</code> is specified.</em></p>
         */
        parentJointIndex?: number;
        /**
         * <code>"Mouse"</code> parents the pick to the mouse; <code>"Avatar"</code> parents the pick to
         * the user's avatar head; a joint name parents to the joint in the user's avatar; otherwise, the pick is "static", not
         * parented to anything.
         * <p><em>Used only if <code>parentID</code> is not specified.</em></p>
         */
        joint?: string;
        /**
         * The offset of the parabola origin from its parent if parented, otherwise the
         * parabola origin in world coordinates.
         * @defaultValue Vec3.ZERO
         */
        position?: TVec3;
        /**
         * Synonym for <code>position</code>.
         */
        posOffset?: TVec3;
        /**
         * The offset of the parabola direction from its parent's y-axis if parented, otherwise the
         * parabola direction in world coordinates.
         * <p><strong>Default Value:</strong> <code>Vec3.UP</code> direction if <code>joint</code> is specified, otherwise
         * <code>Vec3.FRONT</code>.</p>
         */
        direction?: TVec3;
        /**
         * Synonym for <code>direction</code>.
         */
        dirOffset?: TVec3;
        /**
         * Alternative property for specifying <code>direction</code>. The value is applied to the
         * default <code>direction</code> value.
         */
        orientation?: TQuat;
        /**
         * The initial speed of the parabola in m/s, i.e., the initial speed of a virtual projectile
         * whose trajectory defines the parabola.
         * @defaultValue 1
         */
        speed?: number;
        /**
         * The acceleration of the parabola in m/s<sup>2</sup>, i.e., the acceleration
         * of a virtual projectile whose trajectory defines the parabola, both magnitude and direction.
         * @defaultValue -Vec3.UP
         */
        accelerationAxis?: TVec3;
        /**
         * <code>true</code> if the acceleration axis should rotate with the
         * avatar about the avatar's y-axis, <code>false</code> if it shouldn't.
         * @defaultValue true
         */
        rotateAccelerationWithAvatar?: boolean;
        /**
         * <code>true</code> if the acceleration axis should rotate with the
         * parent about the parent's y-axis, if available.
         */
        rotateAccelerationWithParent?: boolean;
        /**
         * <code>true</code> if the velocity and acceleration of the pick should scale
         * with the avatar or other parent.
         * @defaultValue true
         */
        scaleWithParent?: boolean;
        /**
         * Synonym for <code>scalewithParent</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         * @defaultValue true
         */
        scaleWithAvatar?: boolean;
        /**
         * The type of pick when getting these properties from {@link Picks.getPickProperties} or
         * {@link Picks.getPickScriptParameters}. A parabola pick's type is {@link PickType.Parabola}.
         */
        pickType: PickType;
        /**
         * Returned from {@link Picks.getPickProperties} when the pick has a parent with varying scale
         * (usually an avatar or an entity). Its value is the original scale of the parent at the moment the pick was created, and
         * is used to rescale the pick and the pointer which owns this pick, if any.
         */
        baseScale: TVec3;
    };
    /**
     * The properties of a collision pick.
     */
    type CollisionPickProperties = {
        /**
         * <code>true</code> if this pick should start enabled, <code>false</code> if it should
         * start disabled. Disabled picks do not update their pick results.
         */
        enabled?: boolean;
        /**
         * The filter for this pick to use. Construct using {@link Picks} FilterFlags property
         * values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.
         * <p><strong>Note:</strong> Collision picks do not intersect the HUD.</p>
         */
        filter?: FilterFlags;
        /**
         * The maximum distance at which this pick will intersect. A value of <code>0.0</code>
         * means no maximum.
         * @defaultValue 0.0
         */
        maxDistance?: number;
        /**
         * The ID of the parent: an avatar, an entity, or another pick.
         */
        parentID?: Uuid;
        /**
         * The joint of the parent to parent to, for example, an avatar joint.
         * A value of <code>0</code> means no joint.
         * <p><em>Used only if <code>parentID</code> is specified.</em></p>
         */
        parentJointIndex?: number;
        /**
         * <code>"Mouse"</code> parents the pick to the mouse; <code>"Avatar"</code> parents the pick to
         * the user's avatar head; a joint name parents to the joint in the user's avatar; otherwise, the pick is "static", not
         * parented to anything.
         * <p><em>Used only if <code>parentID</code> is not specified.</em></p>
         */
        joint?: string;
        /**
         * <code>true</code> to scale the pick's dimensions and threshold according to the
         * scale of the parent.
         * @defaultValue true
         */
        scaleWithParent?: boolean;
        /**
         * The collision region's shape and size. Dimensions are in world coordinates but scale with the
         * parent if defined.
         */
        shape: Shape;
        /**
         * The position of the collision region, relative to the parent if defined.
         */
        position: TVec3;
        /**
         * The orientation of the collision region, relative to the parent if defined.
         */
        orientation: TQuat;
        /**
         * The approximate minimum penetration depth for a test object to be considered in contact with
         * the collision region. The depth is in world coordinates but scales with the parent if defined.
         */
        threshold: number;
        /**
         * The type of objects the collision region collides as. Objects whose collision
         * masks overlap with the region's collision group are considered to be colliding with the region.
         * @defaultValue 8
         */
        collisionGroup?: CollisionMask;
        /**
         * The type of pick when getting these properties from {@link Picks.getPickProperties} or
         * {@link Picks.getPickScriptParameters}. A collision pick's type is {@link PickType.Collision}.
         */
        pickType: PickType;
        /**
         * Returned from {@link Picks.getPickProperties} when the pick has a parent with varying scale
         * (usually an avatar or an entity). Its value is the original scale of the parent at the moment the pick was created, and
         * is used to rescale the pick, and/or the pointer which owns this pick, if any.
         */
        baseScale: TVec3;
    };
    /**
     * Creates a new pick. Different {@link PickType}s use different properties, and within one PickType the properties you
    choose can lead to a wide range of behaviors. For example, with <code>PickType.Ray</code>, the properties could
    configure a mouse ray pick, an avatar head ray pick, or a joint ray pick.
    <p><strong>Warning:</strong> Picks created using this method currently always intersect at least visible and collidable
    things but this may not always be the case.</p>
     * @param type - The type of picking to use.
     * @param properties - Properties of the pick, per the pick <code>type</code>.
     * @returns The ID of the pick created. <code>0</code> if invalid.
     */
    function createPick(type: PickType, properties: Picks.RayPickProperties | Picks.ParabolaPickProperties | Picks.StylusPickProperties | Picks.CollisionPickProperties): number;
    /**
     * Enables a pick. Enabled picks update their pick results.
     * @param id - The ID of the pick.
     */
    function enablePick(id: number): void;
    /**
     * Disables a pick. Disabled picks do not update their pick results.
     * @param id - The ID of the pick.
     */
    function disablePick(id: number): void;
    /**
     * Get the enabled status of a pick. Enabled picks update their pick results.
     * @param id - The ID of the pick.
     * @returns enabled - Whether or not the pick is enabled.
     */
    function isPickEnabled(id: number): boolean;
    /**
     * Removes (deletes) a pick.
     * @param id - The ID of the pick.
     */
    function removePick(id: number): void;
    /**
     * Gets the current properties of the pick.
     * @param id - The ID of the pick.
     * @returns Properties of the pick, per the pick <code>type</code>.
     */
    function getPickProperties(id: number): Picks.RayPickProperties | Picks.ParabolaPickProperties | Picks.StylusPickProperties | Picks.CollisionPickProperties;
    /**
     * Gets the parameters that were passed in to {@link Picks.createPick} to create the pick, if the pick was created through
    a script. Note that these properties do not reflect the current state of the pick.
    See {@link Picks.getPickProperties}.
     * @param id - The ID of the pick.
     * @returns Script-provided properties, per the pick <code>type</code>.
     */
    function getPickScriptParameters(id: number): Picks.RayPickProperties | Picks.ParabolaPickProperties | Picks.StylusPickProperties | Picks.CollisionPickProperties;
    /**
     * Gets all picks which currently exist, including disabled picks.
     * @returns picks - The IDs of the picks.
     */
    function getPicks(): number[];
    /**
     * Gets the most recent result from a pick. A pick continues to be updated ready to return a result, as long as it is
    enabled.
    <p><strong>Note:</strong> Stylus picks only intersect with objects in their include list, set using
    {@link Picks.setIncludeItems|setIncludeItems}.</p>
     * @example
     * <caption>Highlight entities under your mouse in desktop mode or that you're looking at in HMD mode.</caption>
    // Highlight.
    var HIGHLIGHT_LIST_NAME = "highlightEntitiesExampleList";
    var HIGHLIGHT_LIST_TYPE = "entity";
    Selection.enableListHighlight(HIGHLIGHT_LIST_NAME, {});
    
    // Ray pick.
    var PICK_FILTER = Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_AVATAR_ENTITIES
            | Picks.PICK_INCLUDE_COLLIDABLE | Picks.PICK_INCLUDE_NONCOLLIDABLE;
    var rayPick = Picks.createPick(PickType.Ray, {
        enabled: true,
        filter: PICK_FILTER,
        joint: HMD.active ? "Avatar" : "Mouse"
    });
    
    // Highlight intersected entity.
    var highlightedEntityID = null;
    Script.update.connect(function () {
        var rayPickResult = Picks.getPrevPickResult(rayPick);
        if (rayPickResult.intersects) {
            if (rayPickResult.objectID !== highlightedEntityID) {
                if (highlightedEntityID) {
                    Selection.removeFromSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);
                }
                highlightedEntityID = rayPickResult.objectID;
                Selection.addToSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);
            }
        } else {
            if (highlightedEntityID) {
                Selection.removeFromSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);
                highlightedEntityID = null;
            }
        }
    });
    
    // Clean up.
    Script.scriptEnding.connect(function () {
        if (highlightedEntityID) {
            Selection.removeFromSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);
        }
    });
     * @param id - The ID of the pick.
     * @returns The most recent intersection result.
     */
    function getPrevPickResult(id: number): RayPickResult | ParabolaPickResult | StylusPickResult | CollisionPickResult;
    /**
     * Sets whether or not a pick should use precision picking, i.e., whether it should pick against precise meshes or coarse
    meshes.
    This has the same effect as using the <code>PICK_PRECISE</code> or <code>PICK_COARSE</code> filter flags.
     * @param id - The ID of the pick.
     * @param precisionPicking - <code>true</code> to use precision picking, <code>false</code> to use coarse picking.
     */
    function setPrecisionPicking(id: number, precisionPicking: boolean): void;
    /**
     * Sets a list of entity and avatar IDs that a pick should ignore during intersection.
    <p><strong>Note:</strong> Not used by stylus picks.</p>
     * @param id - The ID of the pick.
     * @param ignoreItems - The list of IDs to ignore.
     */
    function setIgnoreItems(id: number, ignoreItems: Uuid[]): void;
    /**
     * Sets a list of entity and avatar IDs that a pick should include during intersection, instead of intersecting with
    everything.
    <p><strong>Note:</strong> Stylus picks only intersect with items in their include list.</p>
     * @param id - The ID of the pick.
     * @param includeItems - The list of IDs to include.
     */
    function setIncludeItems(id: number, includeItems: Uuid[]): void;
    /**
     * Checks if a pick is associated with the left hand: a ray or parabola pick with <code>joint</code> property set to
    <code>"_CONTROLLER_LEFTHAND"</code> or <code>"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND"</code>, or a stylus pick with
    <code>hand</code> property set to <code>0</code>.
     * @param id - The ID of the pick.
     * @returns <code>true</code> if the pick is associated with the left hand, <code>false</code> if it isn't.
     */
    function isLeftHand(id: number): boolean;
    /**
     * Checks if a pick is associated with the right hand: a ray or parabola pick with <code>joint</code> property set to
    <code>"_CONTROLLER_RIGHTHAND"</code> or <code>"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND"</code>, or a stylus pick with
    <code>hand</code> property set to <code>1</code>.
     * @param id - The ID of the pick.
     * @returns <code>true</code> if the pick is associated with the right hand, <code>false</code> if it isn't.
     */
    function isRightHand(id: number): boolean;
    /**
     * Checks if a pick is associated with the system mouse: a ray or parabola pick with <code>joint</code> property set to
    <code>"Mouse"</code>.
     * @param id - The ID of the pick.
     * @returns <code>true</code> if the pick is associated with the system mouse, <code>false</code> if it isn't.
     */
    function isMouse(id: number): boolean;
    function PICK_ENTITIES(): number;
    function PICK_OVERLAYS(): number;
    function PICK_DOMAIN_ENTITIES(): number;
    function PICK_AVATAR_ENTITIES(): number;
    function PICK_LOCAL_ENTITIES(): number;
    function PICK_AVATARS(): number;
    function PICK_HUD(): number;
    function PICK_INCLUDE_VISIBLE(): number;
    function PICK_INCLUDE_INVISIBLE(): number;
    function PICK_INCLUDE_COLLIDABLE(): number;
    function PICK_INCLUDE_NONCOLLIDABLE(): number;
    function PICK_PRECISE(): number;
    function PICK_COARSE(): number;
    function PICK_ALL_INTERSECTIONS(): number;
    function INTERSECTED_NONE(): number;
    function INTERSECTED_ENTITY(): number;
    function INTERSECTED_LOCAL_ENTITY(): number;
    function INTERSECTED_OVERLAY(): number;
    function INTERSECTED_AVATAR(): number;
    function INTERSECTED_HUD(): number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Pointers</code> API lets you create, manage, and visually represent objects for repeatedly calculating
intersections with avatars, entities, and overlays. Pointers can also be configured to generate events on entities and
overlays intersected.
 */
declare namespace Pointers {
    /**
     * The properties of a stylus pointer. These include the properties from the underlying stylus pick that the pointer uses.
     */
    type StylusPointerProperties = {
        /**
         * Override some or all of the default stylus model properties.
         */
        model?: Pointers.StylusPointerModel;
        /**
         * <code>true</code> if the pointer generates {@link Entities} hover events,
         * <code>false</code> if it doesn't.
         */
        hover?: boolean;
        /**
         * The type of the stylus pointer returned from {@link Pointers.getPointerProperties}
         * or {@link Pointers.getPointerScriptParameters}. A stylus pointer's type is {@link PickType(0)|PickType.Stylus}.
         */
        pointerType: PickType;
        /**
         * The ID of the pick created alongside this pointer, returned from
         * {@link Pointers.getPointerProperties}.
         */
        pickID?: number;
    };
    /**
     * The properties of a stylus pointer model.
     */
    type StylusPointerModel = {
        /**
         * The url of a model to use for the stylus, to override the default stylus mode.
         */
        url?: string;
        /**
         * The dimensions of the stylus, to override the default stylus dimensions.
         */
        dimensions?: TVec3;
        /**
         * The position offset of the model from the stylus tip, to override the default position
         * offset.
         */
        positionOffset?: TVec3;
        /**
         * The rotation offset of the model from the hand, to override the default rotation offset.
         */
        rotationOffset?: TQuat;
    };
    /**
     * Properties that define the visual appearance of a ray pointer when the pointer is not intersecting something. These are the
    properties of {@link Pointers.RayPointerRenderState} but with an additional property.
     */
    type DefaultRayPointerRenderState = {
        /**
         * The distance at which to render the end of the ray pointer.
         */
        distance: number;
    };
    /**
     * Properties that define the visual appearance of a ray pointer when the pointer is intersecting something.
     */
    type RayPointerRenderState = {
        /**
         * When creating using {@link Pointers.createPointer}, the name of the render state.
         */
        name: string;
        /**
         * <p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of
         * an overlay to render at the start of the ray pointer. The <code>type</code> property must be specified.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the start of the ray;
         * <code>null</code> if there is no overlay.
         */
        start?: Overlays.OverlayProperties | Uuid;
        /**
         * <p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of
         * the overlay rendered for the path of the ray pointer. The <code>type</code> property must be specified and be
         * <code>"line3d"</code>.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered for the path of the ray;
         * <code>null</code> if there is no overlay.
         */
        path?: Overlays.OverlayProperties | Uuid;
        /**
         * <p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of
         * an overlay to render at the end of the ray pointer. The <code>type</code> property must be specified.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the end of the ray;
         * <code>null</code> if there is no overlay.
         */
        end?: Overlays.OverlayProperties | Uuid;
    };
    /**
     * The properties of a ray pointer. These include the properties from the underlying ray pick that the pointer uses.
     */
    type RayPointerProperties = {
        /**
         * <code>true</code> if the overlay rendered at the end of the ray rotates about the
         * world y-axis to always face the avatar; <code>false</code> if it maintains its world orientation.
         */
        faceAvatar?: boolean;
        /**
         * <code>true</code> if the overlay rendered at the end of the ray is centered on
         * the ray end; <code>false</code> if the overlay is positioned against the surface if <code>followNormal</code> is
         * <code>true</code>, or above the ray end if <code>followNormal</code> is <code>false</code>.
         * @defaultValue true
         */
        centerEndY?: boolean;
        /**
         * <code>true</code> if the end of the ray is locked to the center of the object at
         * which the ray is pointing; <code>false</code> if the end of the ray is at the intersected surface.
         */
        lockEnd?: boolean;
        /**
         * <code>true</code> if the dimensions of the overlay at the end of the ray
         * scale linearly with distance; <code>false</code> if they aren't.
         */
        distanceScaleEnd?: boolean;
        /**
         * <code>true</code> if the width of the ray's path and the size of the
         * start and end overlays scale linearly with the pointer parent's scale; <code>false</code> if they don't scale.
         */
        scaleWithParent?: boolean;
        /**
         * A synonym for <code>scalewithParent</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        scaleWithAvatar?: boolean;
        /**
         * <code>true</code> if the overlay rendered at the end of the ray rotates to
         * follow the normal of the surface if one is intersected; <code>false</code> if it doesn't.
         */
        followNormal?: boolean;
        /**
         * How quickly the overlay rendered at the end of the ray rotates to follow
         * the normal of an intersected surface. If <code>0</code> or <code>1</code>, the overlay rotation follows instantaneously;
         * for other values, the larger the value the more quickly the rotation follows.
         * @defaultValue 0.0
         */
        followNormalStrength?: number;
        /**
         * <p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual
         * appearance of the pointer when it is intersecting something.</p>
         * <p>When setting using {@link Pointers.createPointer}, an array of
         * {@link Pointers.RayPointerRenderState|RayPointerRenderState} values.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to
         * {@link Pointers.RayPointerRenderState|RayPointerRenderState} values.</p>
         */
        renderStates?: Pointers.RayPointerRenderState[] | {
            [key: string]: Pointers.RayPointerRenderState;
        };
        /**
         * <p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual
         * appearance of the pointer when it is not intersecting something.</p>
         * <p>When setting using {@link Pointers.createPointer}, an array of
         * {@link Pointers.DefaultRayPointerRenderState|DefaultRayPointerRenderState} values.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to
         * {@link Pointers.DefaultRayPointerRenderState|DefaultRayPointerRenderState} values.</p>
         */
        defaultRenderStates?: Pointers.DefaultRayPointerRenderState[] | {
            [key: string]: Pointers.DefaultRayPointerRenderState;
        };
        /**
         * <code>true</code> if the pointer generates {@link Entities} hover events,
         * <code>false</code> if it doesn't.
         */
        hover?: boolean;
        /**
         * A list of ways that a {@link Controller} action or function should trigger
         * events on the entity or overlay currently intersected.
         * @defaultValue []
         */
        triggers?: Pointers.Trigger[];
        /**
         * The type of pointer returned from {@link Pointers.getPointerProperties} or
         * {@link Pointers.getPointerScriptParameters}. A laser pointer's type is {@link PickType(0)|PickType.Ray}.
         */
        pointerType: PickType;
        /**
         * The ID of the pick created alongside this pointer, returned from
         * {@link Pointers.getPointerProperties}.
         */
        pickID?: number;
    };
    /**
     * The visual appearance of the parabolic path.
     */
    type ParabolaPointerPath = {
        /**
         * The color of the parabola.
         * @defaultValue 255,255,255
         */
        color?: Color;
        /**
         * The opacity of the parabola, range <code>0.0</code> &ndash; <code>1.0</code>.
         * @defaultValue 1.0
         */
        alpha?: number;
        /**
         * The width of the parabola, in meters.
         * @defaultValue 0.01
         */
        width?: number;
        /**
         * <code>true</code> if the parabola is rendered in the secondary
         * camera, <code>false</code> if it isn't.
         */
        isVisibleInSecondaryCamera?: boolean;
        /**
         * <code>true</code> if the parabola is rendered in front of objects in the world,
         * but behind the HUD, <code>false</code> if it is occluded by objects in front of it.
         */
        drawInFront?: boolean;
    };
    /**
     * Properties that define the visual appearance of a parabola pointer when the pointer is not intersecting something. These are
    properties of {@link Pointers.ParabolaPointerRenderState} but with an additional property.
     */
    type DefaultParabolaPointerRenderState = {
        /**
         * The distance along the parabola at which to render the end of the parabola pointer.
         */
        distance: number;
    };
    /**
     * Properties that define the visual appearance of a parabola pointer when the pointer is intersecting something.
     */
    type ParabolaPointerRenderState = {
        /**
         * When creating using {@link Pointers.createPointer}, the name of the render state.
         */
        name: string;
        /**
         * <p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of
         * an overlay to render at the start of the parabola pointer. The <code>type</code> property must be specified.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the start of the
         * parabola; <code>null</code> if there is no overlay.
         */
        start?: Overlays.OverlayProperties | Uuid;
        /**
         * <p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of
         * the rendered path of the parabola pointer.</p>
         * <p>This property is not provided when getting using {@link Pointers.getPointerProperties}.
         */
        path?: Pointers.ParabolaPointerPath | Uuid;
        /**
         * <p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of
         * an overlay to render at the end of the ray pointer. The <code>type</code> property must be specified.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the end of the parabola;
         * <code>null</code> if there is no overlay.
         */
        end?: Overlays.OverlayProperties | Uuid;
    };
    /**
     * The properties of a parabola pointer. These include the properties from the underlying parabola pick that the pointer uses.
     */
    type ParabolaPointerProperties = {
        /**
         * <code>true</code> if the overlay rendered at the end of the ray rotates about the
         * world y-axis to always face the avatar; <code>false</code> if it maintains its world orientation.
         */
        faceAvatar?: boolean;
        /**
         * <code>true</code> if the overlay rendered at the end of the ray is centered on
         * the ray end; <code>false</code> if the overlay is positioned against the surface if <code>followNormal</code> is
         * <code>true</code>, or above the ray end if <code>followNormal</code> is <code>false</code>.
         * @defaultValue true
         */
        centerEndY?: boolean;
        /**
         * <code>true</code> if the end of the ray is locked to the center of the object at
         * which the ray is pointing; <code>false</code> if the end of the ray is at the intersected surface.
         */
        lockEnd?: boolean;
        /**
         * <code>true</code> if the dimensions of the overlay at the end of the ray
         * scale linearly with distance; <code>false</code> if they aren't.
         */
        distanceScaleEnd?: boolean;
        /**
         * <code>true</code> if the width of the ray's path and the size of the
         * start and end overlays scale linearly with the pointer parent's scale; <code>false</code> if they don't scale.
         */
        scaleWithParent?: boolean;
        /**
         * A synonym for <code>scalewithParent</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        scaleWithAvatar?: boolean;
        /**
         * <code>true</code> if the overlay rendered at the end of the ray rotates to
         * follow the normal of the surface if one is intersected; <code>false</code> if it doesn't.
         */
        followNormal?: boolean;
        /**
         * How quickly the overlay rendered at the end of the ray rotates to follow
         * the normal of an intersected surface. If <code>0</code> or <code>1</code>, the overlay rotation follows instantaneously;
         * for other values, the larger the value the more quickly the rotation follows.
         * @defaultValue 0.0
         */
        followNormalStrength?: number;
        /**
         * <p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual
         * appearance of the pointer when it is intersecting something.</p>
         * <p>When setting using {@link Pointers.createPointer}, an array of
         * {@link Pointers.ParabolaPointerRenderState|ParabolaPointerRenderState} values.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to
         * {@link Pointers.ParabolaPointerRenderState|ParabolaPointerRenderState} values.</p>
         */
        renderStates?: Pointers.ParabolaPointerRenderState[] | {
            [key: string]: Pointers.ParabolaPointerRenderState;
        };
        /**
         * <p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual
         * appearance of the pointer when it is not intersecting something.</p>
         * <p>When setting using {@link Pointers.createPointer}, an array of
         * {@link Pointers.DefaultParabolaPointerRenderState|DefaultParabolaPointerRenderState} values.</p>
         * <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to
         * {@link Pointers.DefaultParabolaPointerRenderState|DefaultParabolaPointerRenderState} values.</p>
         */
        defaultRenderStates?: Pointers.DefaultParabolaPointerRenderState[] | {
            [key: string]: Pointers.DefaultParabolaPointerRenderState;
        };
        /**
         * <code>true</code> if the pointer generates {@link Entities} hover events,
         * <code>false</code> if it doesn't.
         */
        hover?: boolean;
        /**
         * A list of ways that a {@link Controller} action or function should trigger
         * events on the entity or overlay currently intersected.
         * @defaultValue []
         */
        triggers?: Pointers.Trigger[];
        /**
         * The type of pointer returned from {@link Pointers.getPointerProperties} or
         * {@link Pointers.getPointerScriptParameters}. A parabola pointer's type is {@link PickType(0)|PickType.Parabola}.
         */
        pointerType: PickType;
        /**
         * The ID of the pick created alongside this pointer, returned from
         * {@link Pointers.getPointerProperties}.
         */
        pickID?: number;
    };
    /**
     * Specifies that a {@link Controller} action or function should trigger events on the entity or overlay currently
    intersected by a {@link Pointers.RayPointerProperties|Ray} or {@link Pointers.ParabolaPointerProperties|Parabola}
    pointer.
     */
    type Trigger = {
        /**
         * The controller output or function that triggers the
         * events on the entity or overlay. If a function, it must return a number <code>&gt;= 1.0</code> to start the action
         * and <code>&lt; 1.0</code> to terminate the action.
         */
        action: Controller.Standard | Controller.Actions | ((...params: any[]) => any);
        /**
         * Which button to trigger:
         * <ul>
         * <li><code>"Primary"</code>, <code>"Secondary"</code>, and <code>"Tertiary"</code> cause {@link Entities} and
         * {@link Overlays} mouse pointer events. Other button names also cause mouse events but the <code>button</code>
         * property in the event will be <code>"None"</code>.</li>
         * <li><code>"Focus"</code> will try to give focus to the entity or overlay which the pointer is intersecting.</li>
         * </ul>
         */
        button: string;
    };
    /**
     * Creates a new ray, parabola, or stylus pointer. The pointer can have a wide range of behaviors depending on the
    properties specified. For example, a ray pointer may be a static ray pointer, a mouse ray pointer, or joint ray
    pointer.
    <p><strong>Warning:</strong> Pointers created using this method currently always intersect at least visible and
    collidable things but this may not always be the case.</p>
     * @example
     * <caption>Create a ray pointer on the left hand that changes color when it's intersecting and that triggers
    events.<br />
    Note: Stop controllerScripts.js from running to disable similar behavior from it.</caption>
    var intersectEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 0, green: 255, blue: 0 },
        ignorePickIntersection: true
    };
    var intersectedPath = {
        type: "line3d",
        color: { red: 0, green: 255, blue: 0 },
    };
    var searchEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 255, green: 0, blue: 0 },
        ignorePickIntersection: true
    };
    var searchPath = {
        type: "line3d",
        color: { red: 255, green: 0, blue: 0 },
    };
    
    var renderStates = [{ name: "example", path: intersectedPath, end: intersectEnd }];
    var defaultRenderStates = [{ name: "example", distance: 20.0, path: searchPath, end: searchEnd }];
    
    // Create the pointer.
    var rayPointer = Pointers.createPointer(PickType.Ray, {
        joint: "_CAMERA_RELATIVE_CONTROLLER_LEFTHAND",
        filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,
        renderStates: renderStates,
        defaultRenderStates: defaultRenderStates,
        hover: true,  // Generate hover events.
        triggers: [
            { action: Controller.Standard.LTClick, button: "Primary" },  // Generate mouse events.
            { action: Controller.Standard.LTClick, button: "Focus" }  // Focus on web entities.
        ],
        enabled: true
    });
    Pointers.setRenderState(rayPointer, "example");
    
    // Hover events.
    Entities.hoverEnterEntity.connect(function (entityID, event) {
        print("hoverEnterEntity() : " + entityID);
    });
    Entities.hoverLeaveEntity.connect(function (entityID, event) {
        print("hoverLeaveEntity() : " + entityID);
    });
    
    // Mouse events.
    Entities.mousePressOnEntity.connect(function (entityID, event) {
        print("mousePressOnEntity() : " + entityID + " , " + event.button);
    });
    Entities.mouseReleaseOnEntity.connect(function (entityID, event) {
        print("mouseReleaseOnEntity() : " + entityID + " , " + event.button);
    });
    
    // Tidy up.
    Script.scriptEnding.connect(function () {
        Pointers.removePointer(rayPointer);
    });
     * @param type - The type of pointer to create. Cannot be {@link PickType|PickType.Collision}.
     * @param properties - The properties of the pointer, per the pointer <code>type</code>, including the properties of the underlying pick
        that the pointer uses to do its picking.
     * @returns The ID of the pointer if successfully created, otherwise <code>0</code>.
     */
    function createPointer(type: PickType, properties: Pointers.RayPointerProperties | Pointers.ParabolaPointerProperties | Pointers.StylusPointerProperties): number;
    /**
     * Enables and shows a pointer. Enabled pointers update their pick results and generate events.
     * @param id - The ID of the pointer.
     */
    function enablePointer(id: number): void;
    /**
     * Disables and hides a pointer. Disabled pointers do not update their pick results or generate events.
     * @param id - The ID of the pointer.
     */
    function disablePointer(id: number): void;
    /**
     * Gets the enabled status of a pointer. Enabled pointers update their pick results and generate events.
     * @param id - The ID of the pointer.
     * @returns enabled - Whether or not the pointer is enabled.
     */
    function isPointerEnabled(id: number): boolean;
    /**
     * Removes (deletes) a pointer.
     * @param id - The ID of the pointer.
     */
    function removePointer(id: number): void;
    /**
     * Gets the parameters that were passed in to {@link Pointers.createPointer} to create the pointer when the pointer was
    created through a script.
    <p><strong>Note:</strong> These properties do not reflect the current state of the pointer. To get the current state
    of the pointer, see {@link Pointers.getPointerProperties}.
     * @param id - The ID of the pointer.
     * @returns Script-provided properties, per the pointer <code>type</code>.
     */
    function getPointerScriptParameters(id: number): Pointers.RayPointerProperties | Pointers.ParabolaPointerProperties | Pointers.StylusPointerProperties;
    /**
     * Gets all pointers which currently exist, including disabled pointers.
     * @returns pointers - The IDs of the pointers.
     */
    function getPointers(): number[];
    /**
     * Edits a render state of a {@link Pointers.RayPointerProperties|ray} or
    {@link Pointers.ParabolaPointerProperties|parabola} pointer, to change its visual appearance for the state when the
    pointer is intersecting something.
    <p><strong>Note:</strong> You can only edit the properties of the existing parts of the pointer; you cannot change the
    type of any part.</p>
    <p><strong>Note:</strong> You cannot use this method to change the appearance of a default render state.</p>
    <p><strong>Note:</strong> Not able to be used with stylus pointers.</p>
     * @example
     * <caption>Change the dimensions of a ray pointer's intersecting end overlay.</caption>
    var intersectEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 0, green: 255, blue: 0 },
        ignorePickIntersection: true
    };
    var intersectedPath = {
        type: "line3d",
        color: { red: 0, green: 255, blue: 0 },
    };
    var searchEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 255, green: 0, blue: 0 },
        ignorePickIntersection: true
    };
    var searchPath = {
        type: "line3d",
        color: { red: 255, green: 0, blue: 0 },
    };
    
    var renderStates = [ { name: "example", path: intersectedPath, end: intersectEnd } ];
    var defaultRenderStates = [ { name: "example", distance: 20.0, path: searchPath, end: searchEnd } ];
    
    // Create the pointer.
    var rayPointer = Pointers.createPointer(PickType.Ray, {
        joint: "_CAMERA_RELATIVE_CONTROLLER_LEFTHAND",
        filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,
        renderStates: renderStates,
        defaultRenderStates: defaultRenderStates,
        enabled: true
    });
    Pointers.setRenderState(rayPointer, "example");
    
    // Edit the intersecting render state.
    Script.setTimeout(function () {
        print("Edit render state");
        Pointers.editRenderState(rayPointer, "example", {
            end: { dimensions: { x: 0.5, y: 0.5, z: 0.5 } }
        });
    }, 10000);
    
    Script.setTimeout(function () {
        print("Edit render state");
        Pointers.editRenderState(rayPointer, "example", {
            end: { dimensions: { x: 0.2, y: 0.2, z: 0.2 } }
        });
    }, 15000);
    
    // Tidy up.
    Script.scriptEnding.connect(function () {
        Pointers.removePointer(rayPointer);
    });
     * @param id - The ID of the pointer.
     * @param renderState - The name of the render state to edit.
     * @param properties - The new properties for the
        render state. Only the overlay properties to change need be specified.
     */
    function editRenderState(id: number, renderState: string, properties: Pointers.RayPointerRenderState | Pointers.ParabolaPointerRenderState): void;
    /**
     * Sets the render state of a pointer, to change its visual appearance and possibly disable or enable it.
     * @example
     * <caption>Switch a ray pointer between having a path and not having a path.</caption>
    var intersectEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 0, green: 255, blue: 0 },
        ignorePickIntersection: true
    };
    var intersectedPath = {
        type: "line3d",
        color: { red: 0, green: 255, blue: 0 },
    };
    var searchEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 255, green: 0, blue: 0 },
        ignorePickIntersection: true
    };
    var searchPath = {
        type: "line3d",
        color: { red: 255, green: 0, blue: 0 },
    };
    
    var renderStates = [
        { name: "examplePath", path: intersectedPath, end: intersectEnd },
        { name: "exampleNoPath", end: intersectEnd }
    ];
    var defaultRenderStates = [
        { name: "examplePath", distance: 20.0, path: searchPath, end: searchEnd },
        { name: "exampleNoPath", distance: 20.0, end: searchEnd }
    ];
    
    // Create the pointer.
    var rayPointer = Pointers.createPointer(PickType.Ray, {
        joint: "_CAMERA_RELATIVE_CONTROLLER_LEFTHAND",
        filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,
        renderStates: renderStates,
        defaultRenderStates: defaultRenderStates,
        enabled: true
    });
    Pointers.setRenderState(rayPointer, "examplePath");
    
    // Change states.
    Script.setTimeout(function () {
        print("Without path");
        Pointers.setRenderState(rayPointer, "exampleNoPath");
    }, 10000);
    
    Script.setTimeout(function () {
        print("With path");
        Pointers.setRenderState(rayPointer, "examplePath");
    }, 15000);
    
    // Tidy up.
    Script.scriptEnding.connect(function () {
        Pointers.removePointer(rayPointer);
    });
     * @param id - The ID of the pointer.
     * @param renderState - <p>The name of the render state to set the pointer to.</p>
        <p>For {@link Pointers.RayPointerProperties|ray} and {@link Pointers.ParabolaPointerProperties|parabola} pointers,
        this may be:</p>
        <ul>
          <li>The name of one of the render states set in the pointer's properties.</li>
          <li><code>""</code>, to hide the pointer and disable emitting of events.</li>
        </ul>
        <p>For {@link Pointers.StylusPointerProperties|stylus} pointers, the values may be:</p>
        <ul>
          <li><code>"events on"</code>, to render and emit events (the default).</li>
          <li><code>"events off"</code>, to render but don't emit events.</li>
          <li><code>"disabled"</code>, to not render and not emit events.</li>
        </ul>
     */
    function setRenderState(id: number, renderState: string): void;
    /**
     * Gets the most recent intersection of a pointer. A pointer continues to be updated ready to return a result, as long as
    it is enabled, regardless of the render state.
     * @param id - The ID of the pointer.
     * @returns The most recent intersection of the pointer.
     */
    function getPrevPickResult(id: number): RayPickResult | ParabolaPickResult | StylusPickResult;
    /**
     * Sets whether or not a pointer should use precision picking, i.e., whether it should pick against precise meshes or
    coarse meshes. This has the same effect as using the <code>PICK_PRECISE</code> or <code>PICK_COARSE</code> filter flags.
     * @param id - The ID of the pointer.
     * @param precisionPicking - <code>true</code> to use precision picking, <code>false</code> to use coarse picking.
     */
    function setPrecisionPicking(id: number, precisionPicking: boolean): void;
    /**
     * Sets the length of a pointer.
    <p><strong>Note:</strong> Not used by stylus pointers.</p>
     * @param id - The ID of the pointer.
     * @param length - The desired length of the pointer.
     */
    function setLength(id: number, length: number): void;
    /**
     * Sets a list of entity and avatar IDs that a pointer should ignore during intersection.
    <p><strong>Note:</strong> Not used by stylus pointers.</p>
     * @param id - The ID of the pointer.
     * @param ignoreItems - A list of IDs to ignore.
     */
    function setIgnoreItems(id: number, ignoreItems: Uuid[]): void;
    /**
     * Sets a list of entity and avatar IDs that a pointer should include during intersection, instead of intersecting with
    everything.
    <p><strong>Note:</strong> Stylus pointers only intersect with items in their include list.</p>
     * @param id - The ID of the pointer.
     * @param includeItems - A list of IDs to include.
     */
    function setIncludeItems(id: number, includeItems: Uuid[]): void;
    /**
     * Locks a pointer onto a specific entity or avatar.
    <p><strong>Note:</strong> Not used by stylus pointers.</p>
     * @param id - The ID of the pointer.
     * @param targetID - The ID of the entity or avatar to lock the pointer on to.
     * @param isAvatar - <code>true</code> if the target is an avatar, <code>false</code> if it is an entity.
     * @param [offset] - The offset of the target point from the center of the target item. If not specified, the
        pointer locks on to the center of the target item.
     */
    function setLockEndUUID(id: number, targetID: Uuid, isAvatar: boolean, offset?: TMat4): void;
    /**
     * Checks if a pointer is associated with the left hand: a ray or parabola pointer with <code>joint</code> property set to
    <code>"_CONTROLLER_LEFTHAND"</code> or <code>"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND"</code>, or a stylus pointer with
    <code>hand</code> property set to <code>0</code>.
     * @param id - The ID of the pointer.
     * @returns <code>true</code> if the pointer is associated with the left hand, <code>false</code> if it isn't.
     */
    function isLeftHand(id: number): boolean;
    /**
     * Checks if a pointer is associated with the right hand: a ray or parabola pointer with <code>joint</code> property set to
    <code>"_CONTROLLER_RIGHTHAND"</code> or <code>"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND"</code>, or a stylus pointer with
    <code>hand</code> property set to <code>1</code>.
     * @param id - The ID of the pointer.
     * @returns <code>true</code> if the pointer is associated with the right hand, <code>false</code> if it isn't.
     */
    function isRightHand(id: number): boolean;
    /**
     * Checks if a pointer is associated with the system mouse: a ray or parabola pointer with <code>joint</code> property set
    to <code>"Mouse"</code>.
     * @param id - The ID of the pointer.
     * @returns <code>true</code> if the pointer is associated with the system mouse, <code>false</code> if it isn't.
     */
    function isMouse(id: number): boolean;
    /**
     * Gets information about a pointer.
     * @example
     * <caption>Report the properties of a parabola pointer.</caption>
    var intersectEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 0, green: 255, blue: 0 },
        ignorePickIntersection: true
    };
    var intersectedPath = {
        color: { red: 0, green: 255, blue: 0 },
    };
    var searchEnd = {
        type: "sphere",
        dimensions: { x: 0.2, y: 0.2, z: 0.2 },
        solid: true,
        color: { red: 255, green: 0, blue: 0 },
        ignorePickIntersection: true
    };
    var searchPath = {
        color: { red: 255, green: 0, blue: 0 },
    };
    
    var renderStates = [{ name: "example", path: intersectedPath, end: intersectEnd }];
    var defaultRenderStates = [{ name: "example", distance: 20.0, path: searchPath, end: searchEnd }];
    
    // Create the pointer.
    var parabolaPointer = Pointers.createPointer(PickType.Parabola, {
        joint: "_CAMERA_RELATIVE_CONTROLLER_LEFTHAND",
        filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,
        renderStates: renderStates,
        defaultRenderStates: defaultRenderStates,
        enabled: true
    });
    Pointers.setRenderState(parabolaPointer, "example");
    
    // Report the pointer properties.
    Script.setTimeout(function () {
        var properties = Pointers.getPointerProperties(parabolaPointer);
        print("Pointer properties:" + JSON.stringify(properties));
    }, 500);
    
    // Tidy up.
    Script.scriptEnding.connect(function () {
        Pointers.removePointer(parabolaPointer);
    });
     *
     * @param id - The ID of the pointer.
     * @returns The <code>renderStates</code> and
        <code>defaultRenderStates</code> for ray and parabola pointers, <code>{}</code> for stylus pointers.
     */
    function getPointerProperties(id: number): Pointers.RayPointerProperties | Pointers.ParabolaPointerProperties | any;
}

/**
 * An intersection result for a ray pick.
 */
declare type RayPickResult = {
    /**
     * The intersection type.
     */
    type: IntersectionType;
    /**
     * <code>true</code> if there's a valid intersection, <code>false</code> if there isn't.
     */
    intersects: boolean;
    /**
     * The ID of the intersected object. <code>null</code> for HUD or invalid intersections.
     */
    objectID: Uuid;
    /**
     * The distance from the ray origin to the intersection point.
     */
    distance: number;
    /**
     * The intersection point in world coordinates.
     */
    intersection: TVec3;
    /**
     * The surface normal at the intersected point. All <code>NaN</code>s if <code>type ==
     * Picks.INTERSECTED_HUD</code>.
     */
    surfaceNormal: TVec3;
    /**
     * Additional intersection details for model objects, otherwise
     * <code>{ }</code>.
     */
    extraInfo: SubmeshIntersection;
    /**
     * The pick ray that was used. Valid even if there is no intersection.
     */
    searchRay: PickRay;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>RayPick</code> API is a subset of the {@link Picks} API, as used for ray picks.
 * @property PICK_ENTITIES - Include domain and avatar entities when intersecting.
    <em>Read-only.</em>
 * @property PICK_OVERLAYS - Include local entities when intersecting. <em>Read-only.</em>
 * @property PICK_AVATARS - Include avatars when intersecting. <em>Read-only.</em>
 * @property PICK_HUD - Include the HUD surface when intersecting in HMD mode. <em>Read-only.</em>
 * @property PICK_PRECISE - Pick against exact meshes. <em>Read-only.</em>
 * @property PICK_INCLUDE_INVISIBLE - Include invisible objects when intersecting. <em>Read-only.</em>
 * @property PICK_INCLUDE_NONCOLLIDABLE - Include non-collidable objects when intersecting. <em>Read-only.</em>
 * @property PICK_ALL_INTERSECTIONS - Return all intersections instead of just the closest. <em>Read-only.</em>
 * @property INTERSECTED_NONE - Intersected nothing with the given filter flags. <em>Read-only.</em>
 * @property INTERSECTED_ENTITY - Intersected an entity. <em>Read-only.</em>
 * @property INTERSECTED_LOCAL_ENTITY - Intersected a local entity. <em>Read-only.</em>
 * @property INTERSECTED_OVERLAY - Intersected an entity (3D Overlays no longer exist). <em>Read-only.</em>
 * @property INTERSECTED_AVATAR - Intersected an avatar. <em>Read-only.</em>
 * @property INTERSECTED_HUD - Intersected the HUD surface. <em>Read-only.</em>
 */
declare namespace RayPick {
    /**
     * Creates a new ray pick.
    <p><strong>Warning:</strong> Picks created using this method currently always intersect at least visible and collidable
    things but this may not always be the case.</p>
     * @param properties - Properties of the pick.
     * @returns The ID of the pick created. <code>0</code> if invalid.
     */
    function createRayPick(properties: Picks.RayPickProperties): number;
    /**
     * Enables a ray pick.
     * @param id - The ID of the ray pick.
     */
    function enableRayPick(id: number): void;
    /**
     * Disables a ray pick.
     * @param id - The ID of the ray pick.
     */
    function disableRayPick(id: number): void;
    /**
     * Removes (deletes) a ray pick.
     * @param id - The ID of the ray pick.
     */
    function removeRayPick(id: number): void;
    /**
     * Gets the most recent pick result from a ray pick. A ray pick continues to be updated ready to return a result, as long
    as it is enabled.
     * @param id - The ID of the ray pick.
     */
    function getPrevRayPickResult(id: number): RayPickResult;
    /**
     * Sets whether or not a ray pick should use precision picking, i.e., whether it should pick against precise meshes or
    coarse meshes.
     * @param id - The ID of the ray pick.
     * @param precisionPicking - <code>true</code> to use precision picking, <code>false</code> to use coarse picking.
     */
    function setPrecisionPicking(id: number, precisionPicking: boolean): void;
    /**
     * Sets a list of entity and avatar IDs that a ray pick should ignore during intersection.
     * @param id - The ID of the ray pick.
     * @param ignoreItems - The list of IDs to ignore.
     */
    function setIgnoreItems(id: number, ignoreItems: Uuid[]): void;
    /**
     * Sets a list of entity and avatar IDs that a ray pick should include during intersection, instead of intersecting with
    everything.
     * @param id - The ID of the ray pick.
     * @param includeItems - The list of IDs to include.
     */
    function setIncludeItems(id: number, includeItems: Uuid[]): void;
    /**
     * Checks if a pick is associated with the left hand: a ray or parabola pick with <code>joint</code> property set to
    <code>"_CONTROLLER_LEFTHAND"</code> or <code>"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND"</code>, or a stylus pick with
    <code>hand</code> property set to <code>0</code>.
     * @param id - The ID of the ray pick.
     * @returns <code>true</code> if the pick is associated with the left hand, <code>false</code> if it isn't.
     */
    function isLeftHand(id: number): boolean;
    /**
     * Checks if a pick is associated with the right hand: a ray or parabola pick with <code>joint</code> property set to
    <code>"_CONTROLLER_RIGHTHAND"</code> or <code>"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND"</code>, or a stylus pick with
    <code>hand</code> property set to <code>1</code>.
     * @param id - The ID of the ray pick.
     * @returns <code>true</code> if the pick is associated with the right hand, <code>false</code> if it isn't.
     */
    function isRightHand(id: number): boolean;
    /**
     * Checks if a pick is associated with the system mouse: a ray or parabola pick with <code>joint</code> property set to
    <code>"Mouse"</code>.
     * @param id - The ID of the ray pick.
     * @returns <code>true</code> if the pick is associated with the system mouse, <code>false</code> if it isn't.
     */
    function isMouse(id: number): boolean;
    function PICK_ENTITIES(): number;
    function PICK_OVERLAYS(): number;
    function PICK_AVATARS(): number;
    function PICK_HUD(): number;
    function PICK_COARSE(): number;
    function PICK_INCLUDE_INVISIBLE(): number;
    function PICK_INCLUDE_NONCOLLIDABLE(): number;
    function PICK_ALL_INTERSECTIONS(): number;
    function INTERSECTED_NONE(): number;
    function INTERSECTED_ENTITY(): number;
    function INTERSECTED_OVERLAY(): number;
    function INTERSECTED_AVATAR(): number;
    function INTERSECTED_HUD(): number;
}

/**
 * An intersection result for a stylus pick.
 */
declare type StylusPickResult = {
    /**
     * The intersection type.
     */
    type: number;
    /**
     * <code>true</code> if there's a valid intersection, <code>false</code> if there isn't.
     */
    intersects: boolean;
    /**
     * The ID of the intersected object. <code>null</code> for invalid intersections.
     */
    objectID: Uuid;
    /**
     * The distance to the intersection point from the stylus tip.
     */
    distance: number;
    /**
     * The intersection point in world coordinates.
     */
    intersection: TVec3;
    /**
     * The surface normal at the intersected point.
     */
    surfaceNormal: TVec3;
    /**
     * The stylus tip at the time of the result. Valid even if there is no intersection.
     */
    stylusTip: StylusTip;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AccountServices</code> API provides functions that give information on user connectivity, visibility, and
asset download progress.
 * @property username - The user name of the user logged in. If there is no user logged in, it is
    <code>"Unknown user"</code>. <em>Read-only.</em>
 * @property loggedIn - <code>true</code> if the user is logged in, otherwise <code>false</code>.
    <em>Read-only.</em>
 * @property findableBy - The user's visibility to other users:
    <ul>
        <li><code>"none"</code> &mdash; user appears offline.</li>
        <li><code>"friends"</code> &mdash; user is visible only to friends.</li>
        <li><code>"connections"</code> &mdash; user is visible to friends and connections.</li>
        <li><code>"all"</code> &mdash; user is visible to everyone.</li>
    </ul>
 * @property metaverseServerURL - The metaverse server that the user is authenticated against when logged in
    &mdash; typically <code>"https://metaverse.highfidelity.com"</code>. <em>Read-only.</em>
 */
declare namespace AccountServices {
    /**
     * Information on the assets currently being downloaded and pending download.
     */
    type DownloadInfoResult = {
        /**
         * The download percentage remaining of each asset currently downloading.
         */
        downloading: number[];
        /**
         * The number of assets pending download.
         */
        pending: number;
    };
    /**
     * Gets information on the download progress of assets in the domain.
     * @returns Information on the download progress of assets.
     */
    function getDownloadInfo(): AccountServices.DownloadInfoResult;
    /**
     * Triggers a {@link AccountServices.downloadInfoChanged|downloadInfoChanged} signal with information on the current
    download progress of the assets in the domain.
     */
    function updateDownloadInfo(): void;
    /**
     * Checks whether the user is logged in.
     * @example
     * <caption>Report whether you are logged in.</caption>
    var isLoggedIn = AccountServices.isLoggedIn();
    print("You are logged in: " + isLoggedIn);  // true or false
     * @returns <code>true</code> if the user is logged in, <code>false</code> if not.
     */
    function isLoggedIn(): boolean;
    /**
     * The function returns the login status of the user and prompts the user to log in (with a login dialog) if they're not already logged in.
     * @returns <code>true</code> if the user is logged in, <code>false</code> if not.
     */
    function checkAndSignalForAccessToken(): boolean;
    /**
     * Logs the user out.
     */
    function logOut(): void;
    /**
     * Updates Directory Server URL in AccountManager. It's called by Login window after Directory Server URL is changed.
     */
    function updateAuthURLFromMetaverseServerURL(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Account</code> API provides functions that give information on user connectivity, visibility, and asset
download progress.
 * @property username - The user name of the user logged in. If there is no user logged in, it is
    <code>"Unknown user"</code>. <em>Read-only.</em>
 * @property loggedIn - <code>true</code> if the user is logged in, otherwise <code>false</code>.
    <em>Read-only.</em>
 * @property findableBy - The user's visibility to other users:
    <ul>
        <li><code>"none"</code> &mdash; user appears offline.</li>
        <li><code>"friends"</code> &mdash; user is visible only to friends.</li>
        <li><code>"connections"</code> &mdash; user is visible to friends and connections.</li>
        <li><code>"all"</code> &mdash; user is visible to everyone.</li>
    </ul>
 * @property metaverseServerURL - The directory server that the user is authenticated against when logged in
    &mdash; typically <code>"https://metaverse.highfidelity.com"</code>. <em>Read-only.</em>
 */
declare namespace Account {
    /**
     * Gets information on the download progress of assets in the domain.
     * @returns Information on the download progress of assets.
     */
    function getDownloadInfo(): AccountServices.DownloadInfoResult;
    /**
     * Triggers a {@link AccountServices.downloadInfoChanged|downloadInfoChanged} signal with information on the current
    download progress of the assets in the domain.
     */
    function updateDownloadInfo(): void;
    /**
     * Checks whether the user is logged in.
     * @example
     * <caption>Report whether you are logged in.</caption>
    var isLoggedIn = AccountServices.isLoggedIn();
    print("You are logged in: " + isLoggedIn);  // true or false
     * @returns <code>true</code> if the user is logged in, <code>false</code> if not.
     */
    function isLoggedIn(): boolean;
    /**
     * The function returns the login status of the user and prompts the user to log in (with a login dialog) if they're not already logged in.
     * @returns <code>true</code> if the user is logged in, <code>false</code> if not.
     */
    function checkAndSignalForAccessToken(): boolean;
    /**
     * Logs the user out.
     */
    function logOut(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>GlobalServices</code> API provides functions that give information on user connectivity, visibility, and asset
download progress.
 * @property username - The user name of the user logged in. If there is no user logged in, it is
    <code>"Unknown user"</code>. <em>Read-only.</em>
 * @property loggedIn - <code>true</code> if the user is logged in, otherwise <code>false</code>.
    <em>Read-only.</em>
 * @property findableBy - The user's visibility to other users:
    <ul>
        <li><code>"none"</code> &mdash; user appears offline.</li>
        <li><code>"friends"</code> &mdash; user is visible only to friends.</li>
        <li><code>"connections"</code> &mdash; user is visible to friends and connections.</li>
        <li><code>"all"</code> &mdash; user is visible to everyone.</li>
    </ul>
 * @property metaverseServerURL - The directory server that the user is authenticated against when logged in
    &mdash; typically <code>"https://metaverse.highfidelity.com"</code>. <em>Read-only.</em>
 */
declare namespace GlobalServices {
    /**
     * Gets information on the download progress of assets in the domain.
     * @returns Information on the download progress of assets.
     */
    function getDownloadInfo(): AccountServices.DownloadInfoResult;
    /**
     * Triggers a {@link AccountServices.downloadInfoChanged|downloadInfoChanged} signal with information on the current
    download progress of the assets in the domain.
     */
    function updateDownloadInfo(): void;
    /**
     * Checks whether the user is logged in.
     * @example
     * <caption>Report whether you are logged in.</caption>
    var isLoggedIn = AccountServices.isLoggedIn();
    print("You are logged in: " + isLoggedIn);  // true or false
     * @returns <code>true</code> if the user is logged in, <code>false</code> if not.
     */
    function isLoggedIn(): boolean;
    /**
     * The function returns the login status of the user and prompts the user to log in (with a login dialog) if they're not already logged in.
     * @returns <code>true</code> if the user is logged in, <code>false</code> if not.
     */
    function checkAndSignalForAccessToken(): boolean;
    /**
     * Logs the user out.
     */
    function logOut(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Audio</code> API provides facilities to interact with audio inputs and outputs and to play sounds.
 * @property muted - <code>true</code> if the audio input is muted for the current user context (desktop or HMD),
    otherwise <code>false</code>.
 * @property mutedDesktop - <code>true</code> if desktop audio input is muted, otherwise <code>false</code>.
 * @property mutedHMD - <code>true</code> if the HMD input is muted, otherwise <code>false</code>.
 * @property warnWhenMuted - <code>true</code> if the "muted" warning is enabled, otherwise <code>false</code>.
    When enabled, if you speak while your microphone is muted, "muted" is displayed on the screen as a warning.
 * @property noiseReduction - <code>true</code> if noise reduction is enabled, otherwise <code>false</code>. When
    enabled, the input audio signal is blocked (fully attenuated) when it falls below an adaptive threshold set just
    above the noise floor.
 * @property noiseReductionAutomatic - <code>true</code> if audio input noise reduction automatic mode is enabled,
    <code>false</code> if in manual mode. Manual mode allows you to use <code>Audio.noiseReductionThreshold</code>
    to set a manual sensitivity for the noise gate.
 * @property noiseReductionThreshold - Sets the noise gate threshold before your mic audio is transmitted.
    (Applies only if <code>Audio.noiseReductionAutomatic</code> is <code>false</code>.)
 * @property inputVolume - Adjusts the volume of the input audio, range <code>0.0</code> &ndash; <code>1.0</code>.
    If set to a value, the resulting value depends on the input device: for example, the volume can't be changed on some
    devices, and others might only support values of <code>0.0</code> and <code>1.0</code>.
 * @property inputLevel - The loudness of the audio input, range <code>0.0</code> (no sound) &ndash;
    <code>1.0</code> (the onset of clipping). <em>Read-only.</em>
 * @property clipping - <code>true</code> if the audio input is clipping, otherwise <code>false</code>.
 * @property context - The current context of the audio: either <code>"Desktop"</code> or <code>"HMD"</code>.
    <em>Read-only.</em>
 * @property devices - <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed.
 * @property pushToTalk - <code>true</code> if push-to-talk is enabled for the current user context (desktop or
    HMD), otherwise <code>false</code>.
 * @property pushToTalkDesktop - <code>true</code> if desktop push-to-talk is enabled, otherwise
    <code>false</code>.
 * @property pushToTalkHMD - <code>true</code> if HMD push-to-talk is enabled, otherwise <code>false</code>.
 * @property pushingToTalk - <code>true</code> if the user is currently pushing-to-talk, otherwise
    <code>false</code>.
 * @property avatarGain - The gain (relative volume in dB) that avatars' voices are played at. This gain is used
    at the server.
 * @property localInjectorGain - The gain (relative volume in dB) that local injectors (local environment sounds)
   are played at.
 * @property serverInjectorGain - The gain (relative volume in dB) that server injectors (server environment
    sounds) are played at. This gain is used at the server.
 * @property systemInjectorGain - The gain (relative volume in dB) that system sounds are played at.
 * @property pushingToTalkOutputGainDesktop - The gain (relative volume in dB) that all sounds are played at when
    the user is holding the push-to-talk key in desktop mode.
 * @property acousticEchoCancellation - <code>true</code> if acoustic echo cancellation is enabled, otherwise
    <code>false</code>. When enabled, sound from the audio output is suppressed when it echos back to the input audio
    signal.
 * @property isStereoInput - <code>true</code> if the input audio is being used in stereo, otherwise
    <code>false</code>. Some devices do not support stereo, in which case the value is always <code>false</code>.
 * @property isSoloing - <code>true</code> if currently audio soloing, i.e., playing audio from only specific
    avatars. <em>Read-only.</em>
 * @property soloList - The list of currently soloed avatar IDs. Empty list if not currently audio soloing.
    <em>Read-only.</em>
 */
declare namespace Audio {
    /**
     * @param device - Device.
     * @param isHMD - Is HMD.
     */
    function setInputDevice(device: any, isHMD: boolean): void;
    /**
     * @param device - Device.
     * @param isHMD - Is HMD.
     */
    function setOutputDevice(device: any, isHMD: boolean): void;
    /**
     * Enables or disables reverberation. Reverberation is done by the client on the post-mix audio. The reverberation options
    come from either the domain's audio zone configured on the server or settings scripted by
    {@link Audio.setReverbOptions|setReverbOptions}.
     * @example
     * <caption>Enable reverberation for a short while.</caption>
    var sound = SoundCache.getSound(Script.resourcesPath() + "sounds/sample.wav");
    var injector;
    var injectorOptions = {
        position: MyAvatar.position
    };
    
    Script.setTimeout(function () {
        print("Reverb OFF");
        Audio.setReverb(false);
        injector = Audio.playSound(sound, injectorOptions);
    }, 1000);
    
    Script.setTimeout(function () {
        var reverbOptions = new AudioEffectOptions();
        reverbOptions.roomSize = 100;
        Audio.setReverbOptions(reverbOptions);
        print("Reverb ON");
        Audio.setReverb(true);
    }, 4000);
    
    Script.setTimeout(function () {
        print("Reverb OFF");
        Audio.setReverb(false);
    }, 8000);
     * @param enable - <code>true</code> to enable reverberation, <code>false</code> to disable.
     */
    function setReverb(enable: boolean): void;
    /**
     * Configures reverberation options. Use {@link Audio.setReverb|setReverb} to enable or disable reverberation.
     * @param options - The reverberation options.
     */
    function setReverbOptions(options: AudioEffectOptions): void;
    /**
     * Sets the gain (relative volume) that avatars' voices are played at. This gain is used at the server.
     * @param gain - The avatar gain (dB) at the server.
     */
    function setAvatarGain(gain: number): void;
    /**
     * Gets the gain (relative volume) that avatars' voices are played at. This gain is used at the server.
     * @example
     * <caption>Report current audio gain settings.</caption>
    // 0 value = normal volume; -ve value = quieter; +ve value = louder.
    print("Avatar gain: " + Audio.getAvatarGain());
    print("Environment server gain: " + Audio.getInjectorGain());
    print("Environment local gain: " + Audio.getLocalInjectorGain());
    print("System gain: " + Audio.getSystemInjectorGain());
     * @returns The avatar gain (dB) at the server.
     */
    function getAvatarGain(): number;
    /**
     * Sets the gain (relative volume) that environment sounds from the server are played at.
     * @param gain - The injector gain (dB) at the server.
     */
    function setInjectorGain(gain: number): void;
    /**
     * Gets the gain (relative volume) that environment sounds from the server are played at.
     * @returns The injector gain (dB) at the server.
     */
    function getInjectorGain(): number;
    /**
     * Sets the gain (relative volume) that environment sounds from the client are played at.
     * @param gain - The injector gain (dB) in the client.
     */
    function setLocalInjectorGain(gain: number): void;
    /**
     * Gets the gain (relative volume) that environment sounds from the client are played at.
     * @returns The injector gain (dB) in the client.
     */
    function getLocalInjectorGain(): number;
    /**
     * Sets the gain (relative volume) that system sounds are played at.
     * @param gain - The injector gain (dB) in the client.
     */
    function setSystemInjectorGain(gain: number): void;
    /**
     * Gets the gain (relative volume) that system sounds are played at.
     * @returns The injector gain (dB) in the client.
     */
    function getSystemInjectorGain(): number;
    /**
     * Sets the noise gate threshold before your mic audio is transmitted. (Applies only if <code>Audio.noiseReductionAutomatic</code> is <code>false</code>.)
     * @param threshold - The level that your input must surpass to be transmitted. <code>0.0</code> (open the gate completely) &ndash; <code>1.0</code>
     */
    function setNoiseReductionThreshold(threshold: number): void;
    /**
     * Gets the noise reduction threshold.
     * @returns The noise reduction threshold. <code>0.0</code> &ndash; <code>1.0</code>
     */
    function getNoiseReductionThreshold(): number;
    /**
     * Starts making an audio recording of the audio being played in-world (i.e., not local-only audio) to a file in WAV format.
     * @example
     * <caption>Make a 10 second audio recording.</caption>
    var filename = File.getTempDir() + "/audio.wav";
    if (Audio.startRecording(filename)) {
        Script.setTimeout(function () {
            Audio.stopRecording();
            print("Audio recording made in: " + filename);
        }, 10000);
    
    } else {
        print("Could not make an audio recording in: " + filename);
    }
     * @param filename - The path and name of the file to make the recording in. Should have a <code>.wav</code>
        extension. The file is overwritten if it already exists.
     * @returns <code>true</code> if the specified file could be opened and audio recording has started, otherwise
        <code>false</code>.
     */
    function startRecording(filename: string): boolean;
    /**
     * Finishes making an audio recording started with {@link Audio.startRecording|startRecording}.
     */
    function stopRecording(): void;
    /**
     * Checks whether an audio recording is currently being made.
     * @returns <code>true</code> if an audio recording is currently being made, otherwise <code>false</code>.
     */
    function getRecording(): boolean;
    /**
     * Sets the output volume gain that will be used when the user is holding the push-to-talk key.
    Should be negative.
     * @param gain - The output volume gain (dB) while using push-to-talk.
     */
    function setPushingToTalkOutputGainDesktop(gain: number): void;
    /**
     * Gets the output volume gain that is used when the user is holding the push-to-talk key.
    Should be negative.
     * @returns gain - The output volume gain (dB) while using push-to-talk.
     */
    function getPushingToTalkOutputGainDesktop(): number;
    function onContextChanged(): void;
    /**
     * Adds avatars to the audio solo list. If the audio solo list is not empty, only audio from the avatars in the list is
    played.
     * @example
     * <caption>Listen to a single nearby avatar for a short while.</caption>
    // Find nearby avatars.
    var RANGE = 100; // m
    var nearbyAvatars = AvatarList.getAvatarsInRange(MyAvatar.position, RANGE);
    
    // Remove own avatar from list.
    var myAvatarIndex = nearbyAvatars.indexOf(MyAvatar.sessionUUID);
    if (myAvatarIndex !== -1) {
        nearbyAvatars.splice(myAvatarIndex, 1);
    }
    
    if (nearbyAvatars.length > 0) {
        // Listen to only one of the nearby avatars.
        var avatarName = AvatarList.getAvatar(nearbyAvatars[0]).displayName;
        print("Listening only to " + avatarName);
        Audio.addToSoloList([nearbyAvatars[0]]);
    
        // Stop listening to only the one avatar after a short while.
        Script.setTimeout(function () {
            print("Finished listening only to " + avatarName);
            Audio.resetSoloList();
        }, 10000); // 10s
    
    } else {
        print("No nearby avatars");
    }
     * @param ids - Avatar IDs to add to the solo list.
     */
    function addToSoloList(ids: Uuid[]): void;
    /**
     * Removes avatars from the audio solo list. If the audio solo list is not empty, only audio from the avatars in the list
    is played.
     * @param ids - Avatar IDs to remove from the solo list.
     */
    function removeFromSoloList(ids: Uuid[]): void;
    /**
     * Clears the audio solo list.
     */
    function resetSoloList(): void;
    /**
     * Gets whether your microphone audio is echoed back to you from the server. When enabled, microphone audio is echoed only
    if you're unmuted or are using push-to-talk.
     * @returns <code>true</code> if echoing microphone audio back to you from the server is enabled,
        <code>false</code> if it isn't.
     */
    function getServerEcho(): boolean;
    /**
     * Sets whether your microphone audio is echoed back to you from the server. When enabled, microphone audio is echoed
    only if you're unmuted or are using push-to-talk.
     * @param serverEcho - <code>true</code> to enable echoing microphone back to you from the server,
        <code>false</code> to disable.
     */
    function setServerEcho(serverEcho: boolean): void;
    /**
     * Toggles the echoing of microphone audio back to you from the server. When enabled, microphone audio is echoed only if
    you're unmuted or are using push-to-talk.
     */
    function toggleServerEcho(): void;
    /**
     * Gets whether your microphone audio is echoed back to you by the client. When enabled, microphone audio is echoed
    even if you're muted or not using push-to-talk.
     * @returns <code>true</code> if echoing microphone audio back to you from the client is enabled,
        <code>false</code> if it isn't.
     */
    function getLocalEcho(): boolean;
    /**
     * Sets whether your microphone audio is echoed back to you by the client. When enabled, microphone audio is echoed
    even if you're muted or not using push-to-talk.
     * @example
     * <caption>Echo local audio for a few seconds.</caption>
    Audio.setLocalEcho(true);
    Script.setTimeout(function () {
        Audio.setLocalEcho(false);
    }, 3000); // 3s
     */
    function setLocalEcho(): void;
    /**
     * Toggles the echoing of microphone audio back to you by the client. When enabled, microphone audio is echoed even if
    you're muted or not using push-to-talk.
     */
    function toggleLocalEcho(): void;
    /**
     * Starts playing or "injecting" the content of an audio file. The sound is played globally (sent to the audio
    mixer) so that everyone hears it, unless the <code>injectorOptions</code> has <code>localOnly</code> set to
    <code>true</code> in which case only the client hears the sound played. No sound is played if sent to the audio mixer
    but the client is not connected to an audio mixer. The {@link AudioInjector} object returned by the function can be used
    to control the playback and get information about its current state.
     * @example
     * <caption>Play a sound.</caption>
    var sound = SoundCache.getSound("https://cdn-1.vircadia.com/us-c-1/ken/samples/forest_ambiX.wav");
    
    function playSound() {
        var injectorOptions = {
            position: MyAvatar.position
        };
        var injector = Audio.playSound(sound, injectorOptions);
    }
    
    function onSoundReady() {
        sound.ready.disconnect(onSoundReady);
        playSound();
    }
    
    if (sound.downloaded) {
        playSound();
    } else {
        sound.ready.connect(onSoundReady);
    }
     * @param sound - The content of an audio file, loaded using {@link SoundCache.getSound}. See
    {@link SoundObject} for supported formats.
     * @param [injectorOptions = {}] - Configures where and how the audio injector plays the
        audio file.
     * @returns The audio injector that plays the audio file.
     */
    function playSound(sound: SoundObject, injectorOptions?: AudioInjector.AudioInjectorOptions): AudioInjector;
    /**
     * Starts playing the content of an audio file locally (isn't sent to the audio mixer). This is the same as calling
    {@link Audio.playSound} with {@link AudioInjector.AudioInjectorOptions} <code>localOnly</code> set <code>true</code> and
    the specified <code>position</code>.
     * @param sound - The content of an audio file, which is loaded using {@link SoundCache.getSound}. See
    {@link SoundObject} for supported formats.
     * @returns The audio injector that plays the audio file.
     */
    function playSystemSound(sound: SoundObject): AudioInjector;
    /**
     * Sets whether the audio input should be used in stereo. If the audio input doesn't support stereo then setting a value
    of <code>true</code> has no effect.
     * @param stereo - <code>true</code> if the audio input should be used in stereo, otherwise <code>false</code>.
     */
    function setStereoInput(stereo: boolean): void;
    /**
     * Gets whether the audio input is used in stereo.
     * @returns <code>true</code> if the audio input is used in stereo, otherwise <code>false</code>.
     */
    function isStereoInput(): boolean;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Clipboard</code> API enables you to export and import entities to and from JSON files.
 */
declare namespace Clipboard {
    /**
     * Gets the extents of the entities held in the clipboard.
     * @example
     * <caption>Import entities to the clipboard and report their overall dimensions.</caption>
    var filename = Window.browse("Import entities to clipboard", "", "*.json");
    if (filename) {
        if (Clipboard.importEntities(filename)) {
            print("Clipboard dimensions: " + JSON.stringify(Clipboard.getContentsDimensions()));
        }
    }
     * @returns The extents of the content held in the clipboard.
     */
    function getContentsDimensions(): TVec3;
    /**
     * Gets the largest dimension of the extents of the entities held in the clipboard.
     * @returns The largest dimension of the extents of the content held in the clipboard.
     */
    function getClipboardContentsLargestDimension(): number;
    /**
     * Imports entities from a JSON file into the clipboard.
     * @example
     * <caption>Import entities and paste into the domain.</caption>
    var filename = Window.browse("Import entities to clipboard", "", "*.json");
    if (filename) {
        if (Clipboard.importEntities(filename)) {
            pastedEntities = Clipboard.pasteEntities(Vec3.sum(MyAvatar.position,
                Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })));
            print("Entities pasted: " + JSON.stringify(pastedEntities));
        }
    }
     * @param filename - The path and name of the JSON file to import.
     * @param [isObservable = true] - <code>true</code> if the {@link ResourceRequestObserver} can observe this
        request, <code>false</code> if it can't.
     * @param [callerID = -1] - An integer ID that is passed through to the {@link ResourceRequestObserver}.
     * @returns <code>true</code> if the import was successful, otherwise <code>false</code>.
     */
    function importEntities(filename: string, isObservable?: boolean, callerID?: number): boolean;
    /**
     * Exports specified entities to a JSON file.
     * @example
     * <caption>Create and export a cube and a sphere.</caption>
    // Create entities.
    var box = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.2, y: 0, z: -3 })),
        lifetime: 300 // Delete after 5 minutes.
    });
    var sphere = Entities.addEntity({
        type: "Sphere",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.2, y: 0, z: -3 })),
        lifetime: 300 // Delete after 5 minutes.
    });
    
    // Export entities.
    var filename = Window.save("Export entities to JSON file", Paths.resources, "*.json");
    if (filename) {
        Clipboard.exportEntities(filename, [box, sphere]);
    }
     * @param filename - Path and name of the file to export the entities to. Should have the extension ".json".
     * @param entityIDs - The IDs of the entities to export.
     * @returns <code>true</code> if entities were found and the file was written, otherwise <code>false</code>.
     */
    function exportEntities(filename: string, entityIDs: Uuid[]): boolean;
    /**
     * Exports all entities that have centers within a cube to a JSON file.
     * @param filename - Path and name of the file to export the entities to. Should have the extension ".json".
     * @param x - X-coordinate of the cube center.
     * @param y - Y-coordinate of the cube center.
     * @param z - Z-coordinate of the cube center.
     * @param scale - Half dimension of the cube.
     * @returns <code>true</code> if entities were found and the file was written, otherwise <code>false</code>.
     */
    function exportEntities(filename: string, x: number, y: number, z: number, scale: number): boolean;
    /**
     * Pastes the contents of the clipboard into the domain.
     * @param position - The position to paste the clipboard contents at.
     * @param [entityHostType = "domain"] - The type of entities to create.
     * @returns The IDs of the new entities that were created as a result of the paste operation. If entities couldn't
        be created then an empty array is returned.
     */
    function pasteEntities(position: TVec3, entityHostType?: Entities.EntityHostType): Uuid[];
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Controller</code> API provides facilities to interact with computer and controller hardware.

<h3>Facilities</h3>

<h4>Properties</h4>
<p>Get <code>Controller</code> property trees.</p>
<ul>
  <li>{@link Controller.getActions|getActions}</li>
  <li>{@link Controller.getHardware|getHardware}</li>
  <li>{@link Controller.getStandard|getStandard}</li>
</ul>

<h4>Mappings</h4>
<p>Create and enable or disable <code>Controller</code> mappings.</p>
<ul>
  <li>{@link Controller.disableMapping|disableMapping}</li>
  <li>{@link Controller.enableMapping|enableMapping}</li>
  <li>{@link Controller.loadMapping|loadMapping}</li>
  <li>{@link Controller.newMapping|newMapping}</li>
  <li>{@link Controller.parseMapping|parseMapping}</li>
</ul>

<h4>Input, Hardware, and Action Reflection</h4>
<p>Information on the devices and actions available.</p>
<ul>
  <li>{@link Controller.findAction|findAction}</li>
  <li>{@link Controller.findDevice|findDevice}</li>
  <li>{@link Controller.getActionNames|getActionNames}</li>
  <li>{@link Controller.getAllActions|getAllActions}</li>
  <li>{@link Controller.getAvailableInputs|getAvailableInputs}</li>
  <li>{@link Controller.getDeviceName|getDeviceName}</li>
  <li>{@link Controller.getDeviceNames|getDeviceNames}</li>
  <li>{@link Controller.getRunningInputDevices|getRunningInputDevices}</li>
</ul>

<h4>Input, Hardware, and Action Signals</h4>
<p>Notifications of device and action events.</p>
<ul>
  <li>{@link Controller.actionEvent|actionEvent}</li>
  <li>{@link Controller.hardwareChanged|hardwareChanged}</li>
  <li>{@link Controller.inputDeviceRunningChanged|inputDeviceRunningChanged}</li>
  <li>{@link Controller.inputEvent|inputEvent}</li>
</ul>

<h4>Mouse, Keyboard, and Touch Signals</h4>
<p>Notifications of mouse, keyboard, and touch events.</p>
<ul>
  <li>{@link Controller.keyPressEvent|keyPressEvent}</li>
  <li>{@link Controller.keyReleaseEvent|keyReleaseEvent}</li>
  <li>{@link Controller.mouseDoublePressEvent|mouseDoublePressEvent}</li>
  <li>{@link Controller.mouseMoveEvent|mouseMoveEvent}</li>
  <li>{@link Controller.mousePressEvent|mousePressEvent}</li>
  <li>{@link Controller.mouseReleaseEvent|mouseReleaseEvent}</li>
  <li>{@link Controller.touchBeginEvent|touchBeginEvent}</li>
  <li>{@link Controller.touchEndEvent|touchEndEvent}</li>
  <li>{@link Controller.touchUpdateEvent|touchUpdateEvent}</li>
  <li>{@link Controller.wheelEvent|wheelEvent}</li>
</ul>

<h4>Control Capturing</h4>
<p>Disable and enable the processing of mouse and touch events.</p>
<ul>
  <li>{@link Controller.captureMouseEvents|captureMouseEvents}</li>
  <li>{@link Controller.captureWheelEvents|captureWheelEvents}</li>
  <li>{@link Controller.captureTouchEvents|captureTouchEvents}</li>
  <li>{@link Controller.releaseMouseEvents|releaseMouseEvents}</li>
  <li>{@link Controller.releaseWheelEvents|releaseWheelEvents}</li>
  <li>{@link Controller.releaseTouchEvents|releaseTouchEvents}</li>
</ul>

<h4>Action Capturing</h4>
<p>Disable and enable controller actions.</p>
<ul>
  <li>{@link Controller.captureActionEvents|captureActionEvents}</li>
  <li>{@link Controller.captureKeyEvents|captureKeyEvents}</li>
  <li>{@link Controller.captureJoystick|captureJoystick}</li>
  <li>{@link Controller.captureEntityClickEvents|captureEntityClickEvents}</li>
  <li>{@link Controller.releaseActionEvents|releaseActionEvents}</li>
  <li>{@link Controller.releaseKeyEvents|releaseKeyEvents}</li>
  <li>{@link Controller.releaseJoystick|releaseJoystick}</li>
  <li>{@link Controller.releaseEntityClickEvents|releaseEntityClickEvents}</li>
</ul>

<h4>Controller and Action Values</h4>
<p>Get the current value of controller outputs and actions.</p>
<ul>
  <li>{@link Controller.getValue|getValue}</li>
  <li>{@link Controller.getAxisValue|getAxisValue}</li>
  <li>{@link Controller.getPoseValue|getPoseValue}</li>
  <li>{@link Controller.getActionValue|getActionValue}</li>
</ul>

<h4>Haptics</h4>
<p>Trigger haptic pulses.</p>
<ul>
  <li>{@link Controller.triggerHapticPulse|triggerHapticPulse}</li>
  <li>{@link Controller.triggerHapticPulseOnDevice|triggerHapticPulseOnDevice}</li>
  <li>{@link Controller.triggerShortHapticPulse|triggerShortHapticPulse}</li>
  <li>{@link Controller.triggerShortHapticPulseOnDevice|triggerShortHapticPulseOnDevice}</li>
</ul>

<h4>Display Information</h4>
<p>Get information on the display.</p>
<ul>
  <li>{@link Controller.getViewportDimensions|getViewportDimensions}</li>
  <li>{@link Controller.getRecommendedHUDRect|getRecommendedHUDRect}</li>
</ul>

<h4>Virtual Game Pad</h4>
<p>Use the virtual game pad which is available on some devices.</p>
<ul>
  <li>{@link Controller.setVPadEnabled|setVPadEnabled}</li>
  <li>{@link Controller.setVPadHidden|setVPadHidden}</li>
  <li>{@link Controller.setVPadExtraBottomMargin|setVPadExtraBottomMargin}</li>
</ul>

<h4>Input Recordings</h4>
<p>Create and play input recordings.</p>
<ul>
  <li>{@link Controller.startInputRecording|startInputRecording}</li>
  <li>{@link Controller.stopInputRecording|stopInputRecording}</li>
  <li>{@link Controller.saveInputRecording|saveInputRecording}</li>
  <li>{@link Controller.getInputRecorderSaveDirectory|getInputRecorderSaveDirectory}</li>
  <li>{@link Controller.loadInputRecording|loadInputRecording}</li>
  <li>{@link Controller.startInputPlayback|startInputPlayback}</li>
  <li>{@link Controller.stopInputPlayback|stopInputPlayback}</li>
</ul>

<h3>Entity Methods</h3>

<p>The default scripts implement hand controller actions that use {@link Entities.callEntityMethod} to call entity script
methods, if present, in the entity being interacted with.</p>

<table>
  <thead>
    <tr><th>Method Name</th><th>Description</th><th>Example</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>startFarTrigger</code><br /><code>continueFarTrigger</code><br /><code>stopFarTrigger</code></td>
      <td>These methods are called when a user is more than 0.3m away from the entity, the entity is triggerable, and the
        user starts, continues, or stops squeezing the trigger.</td>
      <td>A light switch that can be toggled on and off from a distance.</td>
    </tr>
    <tr>
      <td><code>startNearTrigger</code><br /><code>continueNearTrigger</code><br /><code>stopNearTrigger</code></td>
      <td>These methods are called when a user is less than 0.3m away from the entity, the entity is triggerable, and the
        user starts, continues, or stops squeezing the trigger.</td>
      <td>A doorbell that can be rung when a user is near.</td>
    </tr>
    <tr>
      <td><code>startDistanceGrab</code><br /><code>continueDistanceGrab</code><br /></td>
      <td>These methods are called when a user is more than 0.3m away from the entity, the entity is either cloneable, or
        grabbable and not locked, and the user starts or continues to squeeze the trigger.</td>
      <td>A comet that emits icy particle trails when a user is dragging it through the sky.</td>
    </tr>
    <tr>
      <td><code>startNearGrab</code><br /><code>continueNearGrab</code><br /></td>
      <td>These methods are called when a user is less than 0.3m away from the entity, the entity is either cloneable, or
        grabbable and not locked, and the user starts or continues to squeeze the trigger.</td>
      <td>A ball that glows when it's being held close.</td>
    </tr>
    <tr>
      <td><code>releaseGrab</code></td>
      <td>This method is called when a user releases the trigger when having been either distance or near grabbing an
        entity.</td>
      <td>Turn off the ball glow or comet trail with the user finishes grabbing it.</td>
    </tr>
    <tr>
      <td><code>startEquip</code><br /><code>continueEquip</code><br /><code>releaseEquip</code></td>
      <td>These methods are called when a user starts, continues, or stops equipping an entity.</td>
      <td>A glass that stays in the user's hand after the trigger is clicked.</td>
    </tr>
  </tbody>
</table>
<p>All the entity methods are called with the following two arguments:</p>
<ul>
  <li>The entity ID.</li>
  <li>A string, <code>"hand,userID"</code> &mdash; where "hand" is <code>"left"</code> or <code>"right"</code>, and "userID"
    is the user's {@link MyAvatar|MyAvatar.sessionUUID}.</li>
</ul>
 * @property Actions - Predefined actions on Interface and the user's avatar. These can be used as end
    points in a {@link RouteObject} mapping. A synonym for <code>Controller.Hardware.Actions</code>.
    <em>Read-only.</em>
    <p>Default mappings are provided from the <code>Controller.Hardware.Keyboard</code> and <code>Controller.Standard</code>
    to actions in
    <a href="https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/keyboardMouse.json">
    keyboardMouse.json</a> and
    <a href="https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/standard.json">
    standard.json</a>, respectively.</p>
 * @property Hardware - Standard and hardware-specific controller and computer outputs, plus predefined
    actions on Interface and the user's avatar. The outputs can be mapped to <code>Actions</code> or functions in a
    {@link RouteObject} mapping. Additionally, hardware-specific controller outputs can be mapped to
    <code>Controller.Standard</code> controller outputs. <em>Read-only.</em>
 * @property Standard - Standard controller outputs that can be mapped to <code>Actions</code> or
    functions in a {@link RouteObject} mapping. <em>Read-only.</em>
    <p>Each hardware device has a mapping from its outputs to <code>Controller.Standard</code> items, specified in a JSON file.
    For example, <a href="https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/leapmotion.json">
    leapmotion.json</a> and
    <a href="https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/vive.json">vive.json</a>.</p>
 */
declare namespace Controller {
    /**
     * <p>The <code>Controller.Hardware.Application</code> object has properties representing Interface's state. The property
    values are integer IDs, uniquely identifying each output. <em>Read-only.</em></p>
    <p>These states can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject}
    mapping (e.g., using the {@link RouteObject#when} method). Each data value is either <code>1.0</code> for "true" or
    <code>0.0</code> for "false".</p>
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>CameraFirstPerson</code></td><td>number</td><td>number</td><td>The camera is in first-person mode.
          <em>Legacy first person camera mode.</em></td></tr>
        <tr><td><code>CameraFirstPersonLookAt</code></td><td>number</td><td>number</td><td>The camera is in first-person mode.
          <em>Default first person camera mode.</em></td></tr>
        <tr><td><code>CameraThirdPerson</code></td><td>number</td><td>number</td><td>The camera is in third-person mode.
          <em>Legacy third person camera mode.</em></td></tr>
        <tr><td><code>CameraLookAt</code></td><td>number</td><td>number</td><td>The camera is in third-person mode.
          <em>Default third person camera mode.</em></td></tr>
        <tr><td><code>CameraFSM</code></td><td>number</td><td>number</td><td>The camera is in full screen mirror mode.
          <em>Legacy "look at myself" behavior.</em></td></tr>
        <tr><td><code>CameraSelfie</code></td><td>number</td><td>number</td><td>The camera is in selfie mode.
          <em>Default "look at myself" camera mode.</em></td></tr>
        <tr><td><code>CameraIndependent</code></td><td>number</td><td>number</td><td>The camera is in independent mode.</td></tr>
        <tr><td><code>CameraEntity</code></td><td>number</td><td>number</td><td>The camera is in entity mode.</td></tr>
        <tr><td><code>InHMD</code></td><td>number</td><td>number</td><td>The user is in HMD mode.</td></tr>
        <tr><td><code>CaptureMouse</code></td><td>number</td><td>number</td><td>The mouse is captured.  In this mode,
          the mouse is invisible and cannot leave the bounds of Interface, as long as Interface is the active window and
          no menu item is selected.</td></tr>
        <tr><td><code>AdvancedMovement</code></td><td>number</td><td>number</td><td>Advanced movement (walking) controls are
          enabled.</td></tr>
        <tr><td><code>StrafeEnabled</code></td><td>number</td><td>number</td><td>Strafing is enabled</td></tr>
        <tr><td><code>LeftHandDominant</code></td><td>number</td><td>number</td><td>Dominant hand set to left.</td></tr>
        <tr><td><code>RightHandDominant</code></td><td>number</td><td>number</td><td>Dominant hand set to right.</td></tr>
        <tr><td><code>SnapTurn</code></td><td>number</td><td>number</td><td>Snap turn is enabled.</td></tr>
        <tr><td><code>Grounded</code></td><td>number</td><td>number</td><td>The user's avatar is on the ground.</td></tr>
        <tr><td><code>NavigationFocused</code></td><td>number</td><td>number</td><td><em>Not used.</em></td></tr>
        <tr><td><code>PlatformWindows</code></td><td>number</td><td>number</td><td>The operating system is Windows.</td></tr>
        <tr><td><code>PlatformMac</code></td><td>number</td><td>number</td><td>The operating system is Mac.</td></tr>
        <tr><td><code>PlatformAndroid</code></td><td>number</td><td>number</td><td>The operating system is Android.</td></tr>
      </tbody>
    </table>
     */
    type HardwareApplication = any;
    /**
     * Disables default Interface actions for a particular key event.
     * @example
     * <caption>Disable left and right strafing.</caption>
    var STRAFE_LEFT = { "key": 16777234, isShifted: true };
    var STRAFE_RIGHT = { "key": 16777236, isShifted: true };
    
    Controller.captureKeyEvents(STRAFE_LEFT);
    Controller.captureKeyEvents(STRAFE_RIGHT);
    
    Script.scriptEnding.connect(function () {
        Controller.releaseKeyEvents(STRAFE_LEFT);
        Controller.releaseKeyEvents(STRAFE_RIGHT);
    });
     * @param event - Details of the key event to be captured. The <code>key</code> property must be specified. The
        <code>text</code> property is ignored. The other properties default to <code>false</code>.
     */
    function captureKeyEvents(event: KeyEvent): void;
    /**
     * Re-enables default Interface actions for a particular key event that has been disabled using
    {@link Controller.captureKeyEvents|captureKeyEvents}.
     * @param event - Details of the key event to release from capture. The <code>key</code> property must be
        specified. The <code>text</code> property is ignored. The other properties default to <code>false</code>.
     */
    function releaseKeyEvents(event: KeyEvent): void;
    /**
     * Disables default Interface actions for a joystick.
     * @param joystickID - The integer ID of the joystick.
     */
    function captureJoystick(joystickID: number): void;
    /**
     * Re-enables default Interface actions for a joystick that has been disabled using
    {@link Controller.captureJoystick|captureJoystick}.
     * @param joystickID - The integer ID of the joystick.
     */
    function releaseJoystick(joystickID: number): void;
    /**
     * Disables {@link Entities.mousePressOnEntity} and {@link Entities.mouseDoublePressOnEntity} events on entities.
     * @example
     * <caption>Disable entity click events for a short period.</caption>
    Entities.mousePressOnEntity.connect(function (entityID, event) {
        print("Clicked on entity: " + entityID);
    });
    
    Script.setTimeout(function () {
        Controller.captureEntityClickEvents();
    }, 5000);
    
    Script.setTimeout(function () {
        Controller.releaseEntityClickEvents();
    }, 10000);
     */
    function captureEntityClickEvents(): void;
    /**
     * Re-enables {@link Entities.mousePressOnEntity} and {@link Entities.mouseDoublePressOnEntity} events on entities that were
    disabled using {@link Controller.captureEntityClickEvents|captureEntityClickEvents}.
     */
    function releaseEntityClickEvents(): void;
    /**
     * Gets the dimensions of the Interface window's interior if in desktop mode or the HUD surface if in HMD mode.
     * @returns The dimensions of the Interface window interior if in desktop mode or HUD surface if in HMD mode.
     */
    function getViewportDimensions(): TVec2;
    /**
     * Gets the recommended area to position UI on the HUD surface if in HMD mode or Interface's window interior if in desktop
    mode.
     * @returns The recommended area in which to position UI.
     */
    function getRecommendedHUDRect(): Rect;
    /**
     * Enables or disables the virtual game pad that is displayed on certain devices (e.g., Android).
     * @param enable - If <code>true</code> then the virtual game pad doesn't work, otherwise it does work provided
        that it is not hidden by {@link Controller.setVPadHidden|setVPadHidden}.
     */
    function setVPadEnabled(enable: boolean): void;
    /**
     * Shows or hides the virtual game pad that is displayed on certain devices (e.g., Android).
     * @param hidden - If <code>true</code> then the virtual game pad is hidden, otherwise it is shown.
     */
    function setVPadHidden(hidden: boolean): void;
    /**
     * Sets the amount of extra margin between the virtual game pad that is displayed on certain devices (e.g., Android) and
    the bottom of the display.
     * @param margin - Integer number of pixels in the extra margin.
     */
    function setVPadExtraBottomMargin(margin: number): void;
    /**
     * <p>The <code>Controller.Actions</code> object has properties representing predefined actions on the user's avatar and
    Interface. The property values are integer IDs, uniquely identifying each action. <em>Read-only.</em></p>
    <p>These actions can be used as end points in the routes of a {@link MappingObject}. The data item routed to each action
    is either a number or a {@link Pose}.</p>
    
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td colSpan=4><strong>Avatar Movement</strong></td></tr>
        <tr><td><code>TranslateX</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its
          x-axis, if the camera isn't in independent or mirror modes.</td></tr>
        <tr><td><code>TranslateY</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its
          y-axis, if the camera isn't in independent or mirror modes.</td></tr>
        <tr><td><code>TranslateZ</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its
          z-axis, if the camera isn't in independent or mirror modes.</td></tr>
        <tr><td><code>Pitch</code></td><td>number</td><td>number</td><td>Rotate the user's avatar head and attached camera
          about its negative x-axis (i.e., positive values pitch down) at a rate proportional to the control value, if the
          camera isn't in HMD, independent, or mirror modes.</td></tr>
        <tr><td><code>Yaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis at a rate
          proportional to the control value, if the camera isn't in independent or mirror modes.</td></tr>
        <tr><td><code>Roll</code></td><td>number</td><td>number</td><td>No action.</td></tr>
        <tr><td><code>DeltaPitch</code></td><td>number</td><td>number</td><td>Rotate the user's avatar head and attached
          camera about its negative x-axis (i.e., positive values pitch down) by an amount proportional to the control value,
          if the camera isn't in HMD, independent, or mirror modes.</td></tr>
        <tr><td><code>DeltaYaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis by an
          amount proportional to the control value, if the camera isn't in independent or mirror modes.</td></tr>
        <tr><td><code>DeltaRoll</code></td><td>number</td><td>number</td><td>No action.</td></tr>
        <tr><td><code>StepTranslateX</code></td><td>number</td><td>number</td><td>No action.</td></tr>
        <tr><td><code>StepTranslateY</code></td><td>number</td><td>number</td><td>No action.</td></tr>
        <tr><td><code>StepTranslateZ</code></td><td>number</td><td>number</td><td>No action.</td></tr>
        <tr><td><code>StepPitch</code></td><td>number</td><td>number</td><td>No action.</td></tr>
        <tr><td><code>StepYaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis in a
          step increment, if the camera isn't in independent or mirror modes.</td></tr>
        <tr><td><code>StepRoll</code></td><td>number</td><td>number</td><td>No action.</td></tr>
    
        <tr><td colSpan=4><strong>Avatar Skeleton</strong></td></tr>
        <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Set the hips pose of the user's avatar.
          </td></tr>
        <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Set the spine2 pose of the user's avatar.
          </td></tr>
        <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Set the head pose of the user's avatar.
          </td></tr>
        <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Set the left arm pose of the user's avatar.
          </td></tr>
        <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Set the right arm pose of the user's
          avatar.</td></tr>
        <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Set the left hand pose of the user's
          avatar.</td></tr>
        <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 1 finger joint pose
          of the user's avatar.</td></tr>
        <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 2 finger joint pose
          of the user's avatar.</td></tr>
        <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 3 finger joint pose
          of the user's avatar.</td></tr>
        <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 4 finger joint pose
          of the user's avatar.</td></tr>
        <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Set the right hand of the user's avatar.
          </td></tr>
        <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 1 finger
          joint pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 2 finger
          joint pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 3 finger
          joint pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 4 finger
          joint pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 1 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 2 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 3 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 4 finger joint
          pose of the user's avatar.</td></tr>
        <tr><td><code>LeftFoot</code></td><td>number</td><td>{@link Pose}</td><td>Set the left foot pose of the user's
          avatar.</td></tr>
        <tr><td><code>RightFoot</code></td><td>number</td><td>{@link Pose}</td><td>Set the right foot pose of the user's
          avatar.</td></tr>
    
        <tr><td colSpan=4><strong>Application</strong></td></tr>
        <tr><td><code>BoomIn</code></td><td>number</td><td>number</td><td>Zoom camera in from third person toward first
          person view.</td></tr>
        <tr><td><code>BoomOut</code></td><td>number</td><td>number</td><td>Zoom camera out from first person to third
          person view.</td></tr>
        <tr><td><code>CycleCamera</code></td><td>number</td><td>number</td><td>Cycle the camera view from first person look
          at, to (third person) look at, to selfie if in desktop mode, then back to first person and repeat.</td></tr>
        <tr><td><code>ContextMenu</code></td><td>number</td><td>number</td><td>Show/hide the tablet.</td></tr>
        <tr><td><code>ToggleMute</code></td><td>number</td><td>number</td><td>Toggle the microphone mute.</td></tr>
        <tr><td><code>TogglePushToTalk</code></td><td>number</td><td>number</td><td>Toggle push to talk.</td></tr>
        <tr><td><code>ToggleOverlay</code></td><td>number</td><td>number</td><td>Toggle the display of overlays.</td></tr>
        <tr><td><code>Sprint</code></td><td>number</td><td>number</td><td>Set avatar sprint mode.</td></tr>
        <tr><td><code>ReticleClick</code></td><td>number</td><td>number</td><td>Set mouse-pressed.</td></tr>
        <tr><td><code>ReticleX</code></td><td>number</td><td>number</td><td>Move the cursor left/right in the x direction.
          </td></tr>
        <tr><td><code>ReticleY</code></td><td>number</td><td>number</td><td>move the cursor up/down in the y direction.
          </td></tr>
        <tr><td><code>ReticleLeft</code></td><td>number</td><td>number</td><td>Move the cursor left.</td></tr>
        <tr><td><code>ReticleRight</code></td><td>number</td><td>number</td><td>Move the cursor right.</td></tr>
        <tr><td><code>ReticleUp</code></td><td>number</td><td>number</td><td>Move the cursor up.</td></tr>
        <tr><td><code>ReticleDown</code></td><td>number</td><td>number</td><td>Move the cursor down.</td></tr>
        <tr><td><code>UiNavLateral</code></td><td>number</td><td>number</td><td>Generate a keyboard left or right arrow key
          event.</td></tr>
        <tr><td><code>UiNavVertical</code></td><td>number</td><td>number</td><td>Generate a keyboard up or down arrow key
          event.</td></tr>
        <tr><td><code>UiNavGroup</code></td><td>number</td><td>number</td><td>Generate a keyboard tab or back-tab key event.
          </td></tr>
        <tr><td><code>UiNavSelect</code></td><td>number</td><td>number</td><td>Generate a keyboard Enter key event.
          </td></tr>
        <tr><td><code>UiNavBack</code></td><td>number</td><td>number</td><td>Generate a keyboard Esc key event.</td></tr>
        <tr><td><code>LeftHandClick</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>RightHandClick</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>Shift</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>PrimaryAction</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>SecondaryAction</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. It takes no action.</span></td></tr>
    
        <tr><td colSpan=4><strong>Aliases</strong></td></tr>
        <tr><td><code>Backward</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateZ</code> in the
          positive direction.</td></tr>
        <tr><td><code>Forward</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateZ</code> in the negative
          direction.</td></tr>
        <tr><td><code>StrafeRight</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateX</code> in the
          positive direction.</td></tr>
        <tr><td><code>StrafeLeft</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateX</code> in the
          negative direction.</td></tr>
        <tr><td><code>Up</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateY</code> in the positive
          direction.</td></tr>
        <tr><td><code>Down</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateY</code> in the negative
          direction.</td></tr>
        <tr><td><code>PitchDown</code></td><td>number</td><td>number</td><td>Alias for <code>Pitch</code> in the positive
          direction.</td></tr>
        <tr><td><code>PitchUp</code></td><td>number</td><td>number</td><td>Alias for <code>Pitch</code> in the negative
          direction.</td></tr>
        <tr><td><code>YawLeft</code></td><td>number</td><td>number</td><td>Alias for <code>Yaw</code> in the positive
          direction.</td></tr>
        <tr><td><code>YawRight</code></td><td>number</td><td>number</td><td>Alias for <code>Yaw</code> in the negative
          direction.</td></tr>
    
        <tr><td colSpan=4><strong>Deprecated Aliases</strong></td></tr>
        <tr><td><code>LEFT_HAND</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>LeftHand</code> instead.</span></td></tr>
        <tr><td><code>RIGHT_HAND</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>RightHand</code> instead.</span></td></tr>
        <tr><td><code>BOOM_IN</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>BoomIn</code> instead.</span></td></tr>
        <tr><td><code>BOOM_OUT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>BoomOut</code> instead.</span></td></tr>
        <tr><td><code>CONTEXT_MENU</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>ContextMenu</code> instead.</span></td></tr>
        <tr><td><code>TOGGLE_MUTE</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>ToggleMute</code> instead.</span></td></tr>
        <tr><td><code>TOGGLE_PUSHTOTALK</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>TogglePushToTalk</code> instead.</span></td></tr>
        <tr><td><code>SPRINT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>Sprint</code> instead.</span></td></tr>
        <tr><td><code>LONGITUDINAL_BACKWARD</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>Backward</code> instead.</span></td></tr>
        <tr><td><code>LONGITUDINAL_FORWARD</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>Forward</code> instead.</span></td></tr>
        <tr><td><code>LATERAL_LEFT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>StrafeLeft</code> instead.</span></td></tr>
        <tr><td><code>LATERAL_RIGHT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>StrafeRight</code> instead.</span></td></tr>
        <tr><td><code>VERTICAL_UP</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>Up</code> instead.</span></td></tr>
        <tr><td><code>VERTICAL_DOWN</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>Down</code> instead.</span></td></tr>
        <tr><td><code>PITCH_DOWN</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>PitchDown</code> instead.</span></td></tr>
        <tr><td><code>PITCH_UP</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>PitchUp</code> instead.</span></td></tr>
        <tr><td><code>YAW_LEFT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>YawLeft</code> instead.</span></td></tr>
        <tr><td><code>YAW_RIGHT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>YawRight</code> instead.</span></td></tr>
        <tr><td><code>LEFT_HAND_CLICK</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>LeftHandClick</code> instead.</span></td></tr>
        <tr><td><code>RIGHT_HAND_CLICK</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>RightHandClick</code> instead.</span></td></tr>
        <tr><td><code>SHIFT</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>Shift</code> instead.</span></td></tr>
        <tr><td><code>ACTION1</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>PrimaryAction</code> instead.</span></td></tr>
        <tr><td><code>ACTION2</code></td><td>number</td><td>number</td><td><span class="important">Deprecated: This
          action is deprecated and will be removed. Use <code>SecondaryAction</code> instead.</span></td></tr>
    
        <tr><td colSpan=4><strong>Deprecated Trackers</strong></td><tr>
        <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
        <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td><span class="important">Deprecated:
          This action is deprecated and will be removed. It takes no action.</span></td></tr>
      </tbody>
    </table>
     */
    type Actions = any;
    /**
     * <p>Some controller actions may be associated with one or both hands:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>Left hand.</td></tr>
        <tr><td><code>1</code></td><td>Right hand.</td></tr>
        <tr><td><code>2</code></td><td>Both hands.</td></tr>
      </tbody>
    </table>
     */
    type Hand = number;
    /**
     * <p>The <code>Controller.Hardware</code> object has properties representing standard and hardware-specific controller and
    computer outputs, plus predefined actions on Interface and the user's avatar. <em>Read-only.</em></p>
    <p>The outputs can be mapped to actions or functions in a {@link RouteObject} mapping. Additionally, hardware-specific
    controller outputs can be mapped to standard controller outputs.
    <p>Controllers typically implement a subset of the {@link Controller.Standard} controls, plus they may implement some extras.
    Some common controllers are included in the table. You can see the outputs provided by these and others by
    viewing their {@link Controller.MappingJSON|MappingJSON} files at
    <a href="https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers">
    https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers</a>.</p>
    
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>Controller.Hardware.Actions</code></td><td>object</td><td>Synonym for {@link Controller.Actions}.</td></tr>
        <tr><td><code>Controller.Hardware.Application</code></td><td>object</td><td>Interface state outputs. See
          {@link Controller.HardwareApplication}.</td></tr>
        <tr><td><code>Controller.Hardware.Keyboard</code></td><td>object</td><td>Keyboard, mouse, and touch pad outputs. See
          {@link Controller.HardwareKeyboard}.</td></tr>
        <tr><td><code>Controller.Hardware.OculusTouch</code></td><td>object</td><td>Oculus Rift HMD outputs. See
          {@link Controller.HardwareOculusTouch}.</td></tr>
        <tr><td><code>Controller.Hardware.Vive</code></td><td>object</td><td>Vive HMD outputs. See
          {@link Controller.HardwareVive}.</td></tr>
      </tbody>
    </table>
     * @example
     * <caption>List all the currently available <code>Controller.Hardware</code> properties.</caption>
    function printProperties(string, item) {
        print(string);
        for (var key in item) {
            if (item.hasOwnProperty(key)) {
                printProperties(string + "." + key, item[key]);
            }
        }
    }
    
    printProperties("Controller.Hardware", Controller.Hardware);
     *
     */
    type Hardware = any;
    /**
     * Finds the name of a particular controller from its device ID.
     * @example
     * <caption>Get the name of the Oculus Touch controller from its ID.</caption>
    var deviceID = Controller.findDevice("OculusTouch");
    print("Device ID = " + deviceID);
    
    var deviceName = Controller.getDeviceName(deviceID);
    print("Device name = " + deviceName);
     * @param deviceID - The integer ID of the device.
     * @returns The name of the device if found, otherwise <code>"unknown"</code>.
     */
    function getDeviceName(deviceID: number): string;
    /**
     * Gets the current value of an action.
     * @example
     * <caption>Periodically report the value of the "TranslateX" action.</caption>
    var actionID = Controller.findAction("TranslateX");
    
    function reportValue() {
        print(Controller.getActionValue(actionID));
    }
    reportTimer = Script.setInterval(reportValue, 1000);
     * @param actionID - The integer ID of the action.
     * @returns The current value of the action.
     */
    function getActionValue(actionID: number): number;
    /**
     * Finds the ID of a specific controller from its device name.
     * @example
     * <caption>Get the ID of the Oculus Touch.</caption>
    var deviceID = Controller.findDevice("OculusTouch");
    print("Device ID = " + deviceID);
     * @param deviceName - The name of the device to find.
     * @returns The integer ID of the device if available, otherwise <code>65535</code>.
     */
    function findDevice(deviceName: string): number;
    /**
     * Gets the names of all currently available controller devices plus "Actions", "Application", and "Standard".
     * @example
     * <caption>Get the names of all currently available controller devices.</caption>
    var deviceNames = Controller.getDeviceNames();
    print(JSON.stringify(deviceNames));
    // ["Standard","Keyboard","LeapMotion","OculusTouch","Application","Actions"] or similar.
     * @returns An array of device names.
     */
    function getDeviceNames(): string[];
    /**
     * Finds the ID of an action from its name.
     * @example
     * <caption>Get the ID of the "TranslateY" action. Compare with the property value.</caption>
    var actionID = Controller.findAction("TranslateY");
    print("Action ID = " + actionID);  // 1
    print("Property value = " + Controller.Actions.TranslateY);  // 537001728 or similar value.
     * @param actionName - The name of the action: one of the {@link Controller.Actions} property names.
     * @returns The integer ID of the action if found, otherwise <code>4095</code>. Note that this value is not
    the same as the value of the relevant {@link Controller.Actions} property.
     */
    function findAction(actionName: string): number;
    /**
     * Gets the names of all actions available as properties of {@link Controller.Actions}.
     * @example
     * <caption>Get the names of all actions.</caption>
    var actionNames = Controller.getActionNames();
    print("Action names: " + JSON.stringify(actionNames));
    // ["TranslateX","TranslateY","TranslateZ","Roll", ...
     * @returns An array of action names.
     */
    function getActionNames(): string[];
    /**
     * Gets the value of a controller button or axis output. Note: Also gets the value of a controller axis output.
     * @example
     * <caption>Report the Standard and Vive right trigger values.</caption>
    var triggerValue = Controller.getValue(Controller.Standard.RT);
    print("Trigger value: " + triggerValue);
    
    if (Controller.Hardware.Vive) {
        triggerValue = Controller.getValue(Controller.Hardware.Vive.RT);
        print("Vive trigger value: " + triggerValue);
    } else {
        print("No Vive present");
    }
     * @param source - The {@link Controller.Standard} or {@link Controller.Hardware} item.
     * @returns The current value of the controller item output if <code>source</code> is valid, otherwise
        <code>0</code>.
     */
    function getValue(source: number): number;
    /**
     * Gets the value of a controller axis output. Note: Also gets the value of a controller button output.
     * @param source - The {@link Controller.Standard} or {@link Controller.Hardware} item.
     * @returns The current value of the controller item output if <code>source</code> is valid, otherwise
        <code>0</code>.
     */
    function getAxisValue(source: number): number;
    /**
     * Gets the value of a controller pose output.
     * @param source - The {@link Controller.Standard} or {@link Controller.Hardware} pose output.
     * @returns The current value of the controller pose output if <code>source</code> is a pose output, otherwise
        an invalid pose with <code>Pose.valid == false</code>.
     */
    function getPoseValue(source: number): Pose;
    /**
     * Triggers a haptic pulse on connected and enabled devices that have the capability.
     * @example
     * <caption>Trigger a haptic pulse on the right hand.</caption>
    var HAPTIC_STRENGTH = 0.5;
    var HAPTIC_DURATION = 10;
    var RIGHT_HAND = 1;
    Controller.triggerHapticPulse(HAPTIC_STRENGTH, HAPTIC_DURATION, RIGHT_HAND);
     * @param strength - The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.
     * @param duration - The duration of the haptic pulse, in milliseconds.
     * @param [index = 2] - The index on devices on which to trigger the haptic pulse.  The meaning of each index
        will vary by device.  For example, for hand controllers, <code>index = 0</code> is the left hand,
        <code>index = 1</code> is the right hand, and <code>index = 2</code> is both hands.  For other devices,
        such as haptic vests, index will have a different meaning, defined by the input device.
     */
    function triggerHapticPulse(strength: number, duration: number, index?: number): void;
    /**
     * Triggers a 250ms haptic pulse on connected and enabled devices that have the capability.
     * @param strength - The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.
     * @param [index = 2] - The index on devices on which to trigger the haptic pulse.  The meaning of each index
        will vary by device.  For example, for hand controllers, <code>index = 0</code> is the left hand,
        <code>index = 1</code> is the right hand, and <code>index = 2</code> is both hands.  For other devices,
        such as haptic vests, index will have a different meaning, defined by the input device.
     */
    function triggerShortHapticPulse(strength: number, index?: number): void;
    /**
     * Triggers a haptic pulse on a particular device if connected and enabled and it has the capability.
     * @example
     * <caption>Trigger a haptic pulse on an Oculus Touch controller.</caption>
    var HAPTIC_STRENGTH = 0.5;
    var deviceID = Controller.findDevice("OculusTouch");
    var HAPTIC_DURATION = 10;
    var RIGHT_HAND = 1;
    Controller.triggerHapticPulseOnDevice(deviceID, HAPTIC_STRENGTH, HAPTIC_DURATION, RIGHT_HAND);
     * @param deviceID - The ID of the device to trigger the haptic pulse on.
     * @param strength - The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.
     * @param duration - The duration of the haptic pulse, in milliseconds.
     * @param [index = 2] - The index on this device on which to trigger the haptic pulse.  The meaning of each index
        will vary by device.  For example, for hand controllers, <code>index = 0</code> is the left hand,
        <code>index = 1</code> is the right hand, and <code>index = 2</code> is both hands.  For other devices,
        such as haptic vests, index will have a different meaning, defined by the input device.
     */
    function triggerHapticPulseOnDevice(deviceID: number, strength: number, duration: number, index?: number): void;
    /**
     * Triggers a 250ms haptic pulse on a particular device if connected and enabled and it has the capability.
     * @param deviceID - The ID of the device to trigger the haptic pulse on.
     * @param strength - The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.
     * @param [index = 2] - The index on this device on which to trigger the haptic pulse.  The meaning of each index
        will vary by device.  For example, for hand controllers, <code>index = 0</code> is the left hand,
        <code>index = 1</code> is the right hand, and <code>index = 2</code> is both hands.  For other devices,
        such as haptic vests, index will have a different meaning, defined by the input device.
     */
    function triggerShortHapticPulseOnDevice(deviceID: number, strength: number, index?: number): void;
    /**
     * Creates a new controller mapping. Routes can then be added to the mapping using {@link MappingObject} methods and
    routed to <code>Standard</code> controls, <code>Actions</code>, or script functions using {@link RouteObject}
    methods. The mapping can then be enabled using {@link Controller.enableMapping|enableMapping} for it to take effect.
     * @example
     * <caption>Create a simple mapping that makes the right trigger move your avatar up.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    
    mapping.from(Controller.Standard.RT).to(Controller.Actions.TranslateY);
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param [mappingName = Uuid.generate()] - A unique name for the mapping. If not specified a new UUID generated
        by {@link Uuid(0).generate|Uuid.generate} is used.
     * @returns A controller mapping object.
     */
    function newMapping(mappingName?: string): MappingObject;
    /**
     * Enables or disables a controller mapping. When enabled, the routes in the mapping have effect.
     * @param mappingName - The name of the mapping.
     * @param [enable = true] - If <code>true</code> then the mapping is enabled, otherwise it is disabled.
     */
    function enableMapping(mappingName: string, enable?: boolean): void;
    /**
     * Disables a controller mapping. When disabled, the routes in the mapping have no effect.
     * @param mappingName - The name of the mapping.
     */
    function disableMapping(mappingName: string): void;
    /**
     * Creates a new controller mapping from a {@link Controller.MappingJSON|MappingJSON} string. Use
    {@link Controller.enableMapping|enableMapping} to enable the mapping for it to take effect.
     * @example
     * <caption>Create a simple mapping that makes the right trigger move your avatar up.</caption>
    var mappingJSON = {
        "name": "org.overte.controllers.example.jsonMapping",
        "channels": [
            { "from": "Standard.RT", "to": "Actions.TranslateY" }
        ]
    };
    
    var mapping = Controller.parseMapping(JSON.stringify(mappingJSON));
    mapping.enable();
    
    Script.scriptEnding.connect(function () {
        mapping.disable();
    });
     * @param jsonString - A JSON string of the {@link Controller.MappingJSON|MappingJSON}.
     * @returns A controller mapping object.
     */
    function parseMapping(jsonString: string): MappingObject;
    /**
     * Creates a new controller mapping from a {@link Controller.MappingJSON|MappingJSON} JSON file at a URL. Use
    {@link Controller.enableMapping|enableMapping} to enable the mapping for it to take effect.
    <p><strong>Warning:</strong> This function is not yet implemented; it doesn't load a mapping and just returns
    <code>null</code>.
     * @param jsonURL - The URL the {@link Controller.MappingJSON|MappingJSON} JSON file.
     * @returns A controller mapping object.
     */
    function loadMapping(jsonURL: string): MappingObject;
    /**
     * Gets the {@link Controller.Hardware} property tree. Calling this function is the same as using the {@link Controller}
    property, <code>Controller.Hardware</code>.
     * @returns The {@link Controller.Hardware} property tree.
     */
    function getHardware(): Controller.Hardware;
    /**
     * Gets the {@link Controller.Actions} property tree. Calling this function is the same as using the {@link Controller}
    property, <code>Controller.Actions</code>.
     * @returns The {@link Controller.Actions} property tree.
     */
    function getActions(): Controller.Actions;
    /**
     * Gets the {@link Controller.Standard} property tree. Calling this function is the same as using the {@link Controller}
    property, <code>Controller.Standard</code>.
     * @returns The {@link Controller.Standard} property tree.
     */
    function getStandard(): Controller.Standard;
    /**
     * Starts making a recording of currently active controllers.
     * @example
     * <caption>Make a controller recording.</caption>
    // Delay start of recording for 2s.
    Script.setTimeout(function () {
        print("Start input recording");
        Controller.startInputRecording();
    }, 2000);
    
    // Make a 10s recording.
    Script.setTimeout(function () {
        print("Stop input recording");
        Controller.stopInputRecording();
        Controller.saveInputRecording();
        print("Input recording saved in: " + Controller.getInputRecorderSaveDirectory());
    }, 12000);
     */
    function startInputRecording(): void;
    /**
     * Stops making a recording started by {@link Controller.startInputRecording|startInputRecording}.
     */
    function stopInputRecording(): void;
    /**
     * Plays back the current recording from the beginning. The current recording may have been recorded by
    {@link Controller.startInputRecording|startInputRecording} and
    {@link Controller.stopInputRecording|stopInputRecording}, or loaded by
    {@link Controller.loadInputRecording|loadInputRecording}. Playback repeats in a loop until
    {@link Controller.stopInputPlayback|stopInputPlayback} is called.
     * @example
     * <caption>Play back a controller recording.</caption>
    var file = Window.browse("Select Recording", Controller.getInputRecorderSaveDirectory());
    if (file !== null) {
        print("Play recording: " + file);
        Controller.loadInputRecording("file:///" + file);
        Controller.startInputPlayback();
    
        // Stop playback after 20s.
        Script.setTimeout(function () {
            print("Stop playing recording");
            Controller.stopInputPlayback();
        }, 20000);
    }
     */
    function startInputPlayback(): void;
    /**
     * Stops play back of a recording started by {@link Controller.startInputPlayback|startInputPlayback}.
     */
    function stopInputPlayback(): void;
    /**
     * Saves the current recording to a file. The current recording may have been recorded by
    {@link Controller.startInputRecording|startInputRecording} and
    {@link Controller.stopInputRecording|stopInputRecording}, or loaded by
    {@link Controller.loadInputRecording|loadInputRecording}. It is saved in the directory returned by
    {@link Controller.getInputRecorderSaveDirectory|getInputRecorderSaveDirectory}.
     */
    function saveInputRecording(): void;
    /**
     * Loads an input recording, ready for play back.
     * @param file - The path to the recording file, prefixed by <code>"file:///"</code>.
     */
    function loadInputRecording(file: string): void;
    /**
     * Gets the directory in which input recordings are saved.
     * @returns The directory in which input recordings are saved.
     */
    function getInputRecorderSaveDirectory(): string;
    /**
     * Gets the names of all the active and running (enabled) input devices.
     * @example
     * <caption>List all active and running input devices.</caption>
    print("Running devices: " + JSON.stringify(Controller.getRunningInputDeviceNames()));
     * @returns The list of current active and running input devices.
     */
    function getRunningInputDevices(): string[];
    /**
     * Disables processing of mouse "move", "press", "double-press", and "release" events into
    {@link Controller.Hardware|Controller.Hardware.Keyboard} outputs.
     * @example
     * <caption>Disable Controller.Hardware.Keyboard mouse events for a short period.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Hardware.Keyboard.MouseX).to(function (x) {
        print("Mouse x = " + x);
    });
    mapping.from(Controller.Hardware.Keyboard.MouseY).to(function (y) {
        print("Mouse y = " + y);
    });
    Controller.enableMapping(MAPPING_NAME);
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
    
    Script.setTimeout(function () {
        Controller.captureMouseEvents();
    }, 5000);
    
    Script.setTimeout(function () {
        Controller.releaseMouseEvents();
    }, 10000);
     */
    function captureMouseEvents(): void;
    /**
     * Enables processing of mouse "move", "press", "double-press", and "release" events into
    {@link Controller.HardwareKeyboard|Controller.Hardware.Keyboard} outputs that were disabled using
    {@link Controller.captureMouseEvents|captureMouseEvents}.
     */
    function releaseMouseEvents(): void;
    /**
     * Disables processing of touch "begin", "update", and "end" events into
    {@link Controller.Hardware|Controller.Hardware.Keyboard},
    {@link Controller.Hardware|Controller.Hardware.Touchscreen}, and
    {@link Controller.Hardware|Controller.Hardware.TouchscreenVirtualPad} outputs.
     */
    function captureTouchEvents(): void;
    /**
     * Enables processing of touch "begin", "update", and "end" events into
    {@link Controller.Hardware|Controller.Hardware.Keyboard},
    {@link Controller.Hardware|Controller.Hardware.Touchscreen}, and
    {@link Controller.Hardware|Controller.Hardware.TouchscreenVirtualPad} outputs that were disabled using
    {@link Controller.captureTouchEvents|captureTouchEvents}.
     */
    function releaseTouchEvents(): void;
    /**
     * Disables processing of mouse wheel rotation events into {@link Controller.Hardware|Controller.Hardware.Keyboard}
    outputs.
     */
    function captureWheelEvents(): void;
    /**
     * Enables processing of mouse wheel rotation events into {@link Controller.Hardware|Controller.Hardware.Keyboard}
    outputs that wer disabled using {@link Controller.captureWheelEvents|captureWheelEvents}.
     */
    function releaseWheelEvents(): void;
    /**
     * Disables translating and rotating the user's avatar in response to keyboard and controller controls.
     * @example
     * <caption>Disable avatar translation and rotation for a short period.</caption>
    Script.setTimeout(function () {
        Controller.captureActionEvents();
    }, 5000);
    
    Script.setTimeout(function () {
        Controller.releaseActionEvents();
    }, 10000);
     */
    function captureActionEvents(): void;
    /**
     * Enables translating and rotating the user's avatar in response to keyboard and controller controls that were disabled
    using {@link Controller.captureActionEvents|captureActionEvents}.
     */
    function releaseActionEvents(): void;
    /**
     * @param deviceName - Device name.
     * @param isRunning - Is running.
     * @param runningDevices - Running devices.
     */
    function updateRunningInputDevices(deviceName: string, isRunning: boolean, runningDevices: string[]): void;
    /**
     * <p>The <code>Controller.Standard</code> object has properties representing standard controller outputs. Those for physical
    controllers are based on the XBox controller, with aliases for PlayStation. The property values are integer IDs, uniquely
    identifying each output. <em>Read-only.</em></p>
    <p>These outputs can be mapped to actions or functions in a {@link RouteObject} mapping. The data value provided by each
    control is either a number or a {@link Pose}. Numbers are typically normalized to <code>0.0</code> or <code>1.0</code> for
    button states, the range <code>0.0</code> &ndash; <code>1.0</code> for unidirectional scales, and the range
    <code>-1.0</code> &ndash; <code>1.0</code> for bidirectional scales.</p>
    <p>Each hardware device has a mapping from its outputs to a subset of <code>Controller.Standard</code> items, specified in a
    JSON file. For example,
    <a href="https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/vive.json">vive.json</a>
    and <a href="https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/leapmotion.json">
    leapmotion.json</a>.</p>
    
    <table>
      <thead>
          <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>
      </thead>
      <tbody>
    
        <tr><td colspan="4"><strong>Buttons</strong></td></tr>
        <tr><td><code>A</code></td><td>number</td><td>number</td><td>"A" button pressed.</td></tr>
        <tr><td><code>B</code></td><td>number</td><td>number</td><td>"B" button pressed.</td></tr>
        <tr><td><code>X</code></td><td>number</td><td>number</td><td>"X" button pressed.</td></tr>
        <tr><td><code>Y</code></td><td>number</td><td>number</td><td>"Y" button pressed.</td></tr>
        <tr><td><code>DL</code></td><td>number</td><td>number</td><td>D-pad left pressed.</td></tr>
        <tr><td><code>DR</code></td><td>number</td><td>number</td><td>D-pad right pressed.</td></tr>
        <tr><td><code>DU</code></td><td>number</td><td>number</td><td>D-pad up pressed.</td></tr>
        <tr><td><code>DD</code></td><td>number</td><td>number</td><td>D-pad down pressed.</td></tr>
        <tr><td><code>Start</code></td><td>number</td><td>number</td><td>"Start" center button pressed.</td></tr>
        <tr><td><code>Back</code></td><td>number</td><td>number</td><td>"Back" center button pressed.</td></tr>
        <tr><td><code>LB</code></td><td>number</td><td>number</td><td>Left bumper button pressed.</td></tr>
        <tr><td><code>RB</code></td><td>number</td><td>number</td><td>Right bumper button pressed.</td></tr>
    
        <tr><td colspan="4"><strong>Sticks</strong></td></tr>
        <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left stick x-axis scale.</td></tr>
        <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left stick y-axis scale.</td></tr>
        <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>
        <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>
        <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left stick button pressed.</td></tr>
        <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right stick button pressed.</td></tr>
        <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left stick is touched.</td></tr>
        <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right stick is touched.</td></tr>
    
        <tr><td colspan="4"><strong>Triggers</strong></td></tr>
        <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>
        <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>
        <tr><td><code>LTClick</code></td><td>number</td><td>number</td><td>Left trigger click.</td></tr>
        <tr><td><code>RTClick</code></td><td>number</td><td>number</td><td>Right trigger click.</td></tr>
        <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>
        <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>
        <tr><td><code>LeftGripTouch</code></td><td>number</td><td>number</td><td>Left grip is touched.</td></tr>
        <tr><td><code>RightGripTouch</code></td><td>number</td><td>number</td><td>Right grip is touched.</td></tr>
    
        <tr><td colspan="4"><strong>Aliases, PlayStation Style Names</strong></td></tr>
        <tr><td><code>Cross</code></td><td>number</td><td>number</td><td>Alias for <code>A</code>.</td></tr>
        <tr><td><code>Circle</code></td><td>number</td><td>number</td><td>Alias for <code>B</code>.</td></tr>
        <tr><td><code>Square</code></td><td>number</td><td>number</td><td>Alias for <code>X</code>.</td></tr>
        <tr><td><code>Triangle</code></td><td>number</td><td>number</td><td>Alias for <code>Y</code>.</td></tr>
        <tr><td><code>Left</code></td><td>number</td><td>number</td><td>Alias for <code>DL</code>.</td></tr>
        <tr><td><code>Right</code></td><td>number</td><td>number</td><td>Alias for <code>DR</code>.</td></tr>
        <tr><td><code>Up</code></td><td>number</td><td>number</td><td>Alias for <code>DU</code>.</td></tr>
        <tr><td><code>Down</code></td><td>number</td><td>number</td><td>Alias for <code>DD</code>.</td></tr>
        <tr><td><code>Select</code></td><td>number</td><td>number</td><td>Alias for <code>Back</code>.</td></tr>
        <tr><td><code>L1</code></td><td>number</td><td>number</td><td>Alias for <code>LB</code>.</td></tr>
        <tr><td><code>R1</code></td><td>number</td><td>number</td><td>Alias for <code>RB</code>.</td></tr>
        <tr><td><code>L3</code></td><td>number</td><td>number</td><td>Alias for <code>LS</code>.</td></tr>
        <tr><td><code>R3</code></td><td>number</td><td>number</td><td>Alias for <code>RS</code>.</td></tr>
        <tr><td><code>L2</code></td><td>number</td><td>number</td><td>Alias for <code>LT</code>.</td></tr>
        <tr><td><code>R2</code></td><td>number</td><td>number</td><td>Alias for <code>RT</code>.</td></tr>
    
        <tr><td colspan="4"><strong>Finger Abstractions</strong></td></tr>
        <tr><td><code>LeftPrimaryThumb</code></td><td>number</td><td>number</td><td>Left primary thumb button pressed.</td></tr>
        <tr><td><code>LeftSecondaryThumb</code></td><td>number</td><td>number</td><td>Left secondary thumb button pressed.
          </td></tr>
        <tr><td><code>RightPrimaryThumb</code></td><td>number</td><td>number</td><td>Right primary thumb button pressed.
          </td></tr>
        <tr><td><code>RightSecondaryThumb</code></td><td>number</td><td>number</td><td>Right secondary thumb button pressed.
          </td></tr>
        <tr><td><code>LeftPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching primary thumb
          button.</td></tr>
        <tr><td><code>LeftSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching secondary thumb
          button.</td></tr>
        <tr><td><code>LeftThumbUp</code></td><td>number</td><td>number</td><td>Left thumb not touching primary or secondary
          thumb buttons.</td></tr>
        <tr><td><code>RightPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching primary thumb
          button.</td></tr>
        <tr><td><code>RightSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching secondary thumb
          button.</td></tr>
        <tr><td><code>RightThumbUp</code></td><td>number</td><td>number</td><td>Right thumb not touching primary or secondary
          thumb buttons.</td></tr>
        <tr><td><code>LeftPrimaryIndex</code></td><td>number</td><td>number</td><td>Left primary index control pressed.</td></tr>
        <tr><td><code>LeftSecondaryIndex</code></td><td>number</td><td>number</td><td>Left secondary index control pressed.
          </td></tr>
        <tr><td><code>RightPrimaryIndex</code></td><td>number</td><td>number</td><td>Right primary index control pressed.
          </td></tr>
        <tr><td><code>RightSecondaryIndex</code></td><td>number</td><td>number</td><td>Right secondary index control pressed.
          </td></tr>
        <tr><td><code>LeftPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching primary
          index finger control.</td></tr>
        <tr><td><code>LeftSecondaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching
          secondary index finger control.</td></tr>
        <tr><td><code>LeftIndexPoint</code></td><td>number</td><td>number</td><td>Left index finger is pointing, not touching
          primary or secondary index finger controls.</td></tr>
        <tr><td><code>RightPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching primary
          index finger control.</td></tr>
        <tr><td><code>RightSecondaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching
          secondary index finger control.</td></tr>
        <tr><td><code>RightIndexPoint</code></td><td>number</td><td>number</td><td>Right index finger is pointing, not touching
          primary or secondary index finger controls.</td></tr>
    
        <tr><td colspan="4"><strong>Avatar Skeleton</strong></td></tr>
        <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Hips pose.</td></tr>
        <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Spine2 pose.</td></tr>
        <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>
        <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Left arm pose.</td></tr>
        <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Right arm pose</td></tr>
        <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>
        <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 4 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Left index 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Left index 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Left index 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Left index 4 finger joint pose.</td></tr>
        <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 1 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 2 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 3 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 4 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 4 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 4 finger joint pose.</td></tr>
        <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Right hand pose.</td></tr>
        <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 4 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Right index 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Right index 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Right index 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Right index 4 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 4 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 1 finger joint pose.</td></tr>
        <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 2 finger joint pose.</td></tr>
        <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 3 finger joint pose.</td></tr>
        <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 4 finger joint pose.</td></tr>
        <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 4 finger joint pose.
          </td></tr>
        <tr><td><code>LeftFoot</code></td><td>number</td><td>{@link Pose}</td><td>Left foot pose.</td></tr>
        <tr><td><code>RightFoot</code></td><td>number</td><td>{@link Pose}</td><td>Right foot pose.</td></tr>
    
        <tr><td colspan="4"><strong>Trackers</strong></td></tr>
        <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 0 pose.</td></tr>
        <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 1 pose.</td></tr>
        <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 2 pose.</td></tr>
        <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 3 pose.</td></tr>
        <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 4 pose.</td></tr>
        <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 5 pose.</td></tr>
        <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 6 pose.</td></tr>
        <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 7 pose.</td></tr>
        <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 8 pose.</td></tr>
        <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 9 pose.</td></tr>
        <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 10 pose.</td></tr>
        <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 11 pose.</td></tr>
        <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 12 pose.</td></tr>
        <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 13 pose.</td></tr>
        <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 14 pose.</td></tr>
        <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 15 pose.</td></tr>
    
      </tbody>
    </table>
     */
    type Standard = any;
    /**
     * A {@link MappingObject} can be specified in JSON format. A simple example is provided below. Full examples &mdash; the
    default mappings provided in Interface &mdash;  can be found at
    <a href="https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers">
    https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers</a>.
     * @example
     * <caption>A simple mapping JSON that makes the right trigger move your avatar up after a dead zone.</caption>
    {
        "name": "org.overte.controllers.example.jsonMapping",
        "channels": [
            {
                "from": "Standard.RT",
                "filters": { "type": "deadZone", "min": 0.05 },
                "to": "Actions.TranslateY"
            }
        ]
    }
     */
    type MappingJSON = {
        /**
         * The name of the mapping.
         */
        name: string;
        /**
         * An array of routes.
         */
        channels: Controller.MappingJSONRoute[];
    };
    /**
     * A route in a {@link Controller.MappingJSON}.
     */
    type MappingJSONRoute = {
        /**
         * The name of a {@link Controller.Hardware} property or an axis made from
         * them. If a property name, the leading <code>"Controller.Hardware."</code> can be omitted.
         */
        from: string | Controller.MappingJSONAxis;
        /**
         * If <code>true</code>, then peeking is enabled per {@link RouteObject#peek}.
         */
        peek?: boolean;
        /**
         * If <code>true</code>, then debug is enabled per {@link RouteObject#debug}.
         */
        debug?: boolean;
        /**
         * One or more numeric {@link Controller.Hardware} property names which are evaluated
         * as booleans and ANDed together. Prepend a property name with a <code>!</code> to do a logical NOT. The leading
         * <code>"Controller.Hardware."</code> can be omitted from the property names.
         * @defaultValue []
         */
        when?: string | string[];
        /**
         * One or more filters in the route.
         * @defaultValue []
         */
        filters?: Controller.MappingJSONFilter | Controller.MappingJSONFilter[];
        /**
         * The name of a {@link Controller.Actions} or {@link Controller.Standard} property. The leading
         * <code>"Controller."</code> can be omitted.
         */
        to: string;
    };
    /**
     * An axis pair in a {@link Controller.MappingJSONRoute}.
     * @example
     * <caption>An axis using the keyboard's left and right keys.</caption>
    { "makeAxis" : [
            ["Keyboard.Left"],
            ["Keyboard.Right"]
        ]
    }
     */
    type MappingJSONAxis = {
        /**
         * A two-member array of single-member arrays of {@link Controller.Hardware} property names.
         * The leading <code>"Controller.Hardware."</code> can be omitted from the property names.
         */
        makeAxis: string[][];
    };
    /**
     * A filter in a {@link Controller.MappingJSONRoute}.
     * @example
     * <caption>A hysteresis filter.</caption>
    {
        "type": "hysteresis",
        "min": 0.85,
        "max": 0.9
    }
     */
    type MappingJSONFilter = {
        /**
         * The name of the filter, being the name of the one of the {@link RouteObject}'s filter methods.
         */
        type: string;
        /**
         * If the filter method has a second parameter, the property name  is the name of that parameter and
         * the property value is the value to use.
         */
        _1?: string;
        /**
         * If the filter method has a second parameter, the property name  is the name of that parameter and
         * the property value is the value to use.
         */
        _2?: string;
    };
    /**
     * <p>The <code>Controller.Hardware.Keyboard</code> object has properties representing keyboard, mouse, and display touch
    events. The property values are integer IDs, uniquely identifying each output. <em>Read-only.</em></p>
    <p>These events can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject}
    mapping. For presses, each data value is either <code>1.0</code> for "true" or <code>0.0</code> for "false".</p>
    
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code> &ndash; <code>9</code></td><td>number</td><td>number</td><td>A "0" &ndash; "1" key on the
          keyboard or keypad is pressed.</td></tr>
        <tr><td><code>A</code> &ndash; <code>Z</code></td><td>number</td><td>number</td><td>A "A" &ndash; "Z" key on the
          keyboard is pressed.</td></tr>
        <tr><td><code>Space</code></td><td>number</td><td>number</td><td>The space bar on the keyboard is pressed.</td></tr>
        <tr><td><code>Tab</code></td><td>number</td><td>number</td><td>The tab key on the keyboard is pressed.</td></tr>
        <tr><td><code>Shift</code></td><td>number</td><td>number</td><td>The shift key on the keyboard is pressed.</td></tr>
        <tr><td><code>Control</code></td><td>number</td><td>number</td><td>The control key on the keyboard is pressed. (The
          "Command" key on OSX.)</td></tr>
        <tr><td><code>Left</code></td><td>number</td><td>number</td><td>The left arrow key on the keyboard or keypad is pressed.
          </td></tr>
        <tr><td><code>Right</code></td><td>number</td><td>number</td><td>The right arrow key on the keyboard or keypad is
          pressed.</td></tr>
        <tr><td><code>Up</code></td><td>number</td><td>number</td><td>The up arrow key on the keyboard or keypad is pressed.
          </td></tr>
        <tr><td><code>Down</code></td><td>number</td><td>number</td><td>The down arrow key on the keyboard or keypad is pressed.
          </td></tr>
        <tr><td><code>PgUp</code></td><td>number</td><td>number</td><td>The page up key on the keyboard or keypad is pressed.
          </td></tr>
        <tr><td><code>PgDown</code></td><td>number</td><td>number</td><td>The page down key on the keyboard or keypad is pressed.
          </td></tr>
        <tr><td><code>LeftMouseButton</code></td><td>number</td><td>number</td><td>The left mouse button is pressed.</td></tr>
        <tr><td><code>MiddleMouseButton</code></td><td>number</td><td>number</td><td>The middle mouse button is pressed.
          </td></tr>
        <tr><td><code>RightMouseButton</code></td><td>number</td><td>number</td><td>The right mouse button is pressed.</td></tr>
        <tr><td><code>LeftMouseClicked</code></td><td>number</td><td>number</td><td>The left mouse button was clicked.</td></tr>
        <tr><td><code>MiddleMouseClicked</code></td><td>number</td><td>number</td><td>The middle mouse button was clicked.
          </td></tr>
        <tr><td><code>RightMouseClicked</code></td><td>number</td><td>number</td><td>The right mouse button was clicked.
          </td></tr>
        <tr><td><code>MouseMoveRight</code></td><td>number</td><td>number</td><td>The mouse moved right. The data value is how
          far it moved.</td></tr>
        <tr><td><code>MouseMoveLeft</code></td><td>number</td><td>number</td><td>The mouse moved left. The data value is how far
          it moved.</td></tr>
        <tr><td><code>MouseMoveUp</code></td><td>number</td><td>number</td><td>The mouse moved up. The data value is how far it
          moved.</td></tr>
        <tr><td><code>MouseMoveDown</code></td><td>number</td><td>number</td><td>The mouse moved down. The data value is how far
          it moved.</td></tr>
        <tr><td><code>MouseX</code></td><td>number</td><td>number</td><td>The mouse x-coordinate changed. The data value is its
          new x-coordinate value.</td></tr>
        <tr><td><code>MouseY</code></td><td>number</td><td>number</td><td>The mouse y-coordinate changed. The data value is its
          new y-coordinate value.</td></tr>
        <tr><td><code>MouseWheelRight</code></td><td>number</td><td>number</td><td>The mouse wheel rotated right or two-finger
          swipe moved right. The data value is the number of units moved (typically <code>1.0</code>).</td></tr>
        <tr><td><code>MouseWheelLeft</code></td><td>number</td><td>number</td><td>The mouse wheel rotated left or two-finger
          swipe moved left. The data value is the number of units moved (typically <code>1.0</code>).</td></tr>
        <tr><td><code>MouseWheelUp</code></td><td>number</td><td>number</td><td>The mouse wheel rotated up or two-finger swipe
          moved up. The data value is the number of units move3d (typically <code>1.0</code>).
          <p><strong>Warning:</strong> The mouse wheel in an ordinary mouse generates left/right wheel events instead of
          up/down.</p>
          </td></tr>
        <tr><td><code>MouseWheelDown</code></td><td>number</td><td>number</td><td>The mouse wheel rotated down or two-finger
          swipe moved down. The data value is the number of units moved (typically <code>1.0</code>).
          <p><strong>Warning:</strong> The mouse wheel in an ordinary mouse generates left/right wheel events instead of
          up/down.</p>
          </td></tr>
        <tr><td><code>TouchpadRight</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device
          moved right. The data value is how far the average position of all touch points moved.</td></tr>
        <tr><td><code>TouchpadLeft</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device
          moved left. The data value is how far the average position of all touch points moved.</td></tr>
        <tr><td><code>TouchpadUp</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device
          moved up. The data value is how far the average position of all touch points moved.</td></tr>
        <tr><td><code>TouchpadDown</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device
          moved down. The data value is how far the average position of all touch points moved.</td></tr>
        <tr><td><code>GesturePinchOut</code></td><td>number</td><td>number</td><td>The average of two touches on a touch-enabled
          device moved out. The data value is how far the average positions of the touch points moved out.</td></tr>
        <tr><td><code>GesturePinchOut</code></td><td>number</td><td>number</td><td>The average of two touches on a touch-enabled
          device moved in. The data value is how far the average positions of the touch points moved in.</td></tr>
      </tbody>
    </table>
     */
    type HardwareKeyboard = any;
    /**
     * <p>The <code>Controller.Hardware.OculusTouch</code> object has properties representing the Oculus Rift. The property values
    are integer IDs, uniquely identifying each output. <em>Read-only.</em></p>
    <p>These outputs can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject}
    mapping.</p>
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td colspan="4"><strong>Buttons</strong></td></tr>
        <tr><td><code>A</code></td><td>number</td><td>number</td><td>"A" button pressed.</td></tr>
        <tr><td><code>B</code></td><td>number</td><td>number</td><td>"B" button pressed.</td></tr>
        <tr><td><code>X</code></td><td>number</td><td>number</td><td>"X" button pressed.</td></tr>
        <tr><td><code>Y</code></td><td>number</td><td>number</td><td>"Y" button pressed.</td></tr>
        <tr><td><code>LeftApplicationMenu</code></td><td>number</td><td>number</td><td>Left application menu button pressed.
          </td></tr>
        <tr><td><code>RightApplicationMenu</code></td><td>number</td><td>number</td><td>Right application menu button pressed.
          </td></tr>
        <tr><td colspan="4"><strong>Sticks</strong></td></tr>
        <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left stick x-axis scale.</td></tr>
        <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left stick y-axis scale.</td></tr>
        <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>
        <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>
        <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left stick button pressed.</td></tr>
        <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right stick button pressed.</td></tr>
        <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left stick is touched.</td></tr>
        <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right stick is touched.</td></tr>
        <tr><td colspan="4"><strong>Triggers</strong></td></tr>
        <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>
        <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>
        <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>
        <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>
        <tr><td colspan="4"><strong>Finger Abstractions</strong></td></tr>
        <tr><td><code>LeftPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching primary thumb
          button.</td></tr>
        <tr><td><code>LeftSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching secondary thumb
          button.</td></tr>
        <tr><td><code>LeftThumbUp</code></td><td>number</td><td>number</td><td>Left thumb not touching primary or secondary
          thumb buttons.</td></tr>
        <tr><td><code>RightPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching primary thumb
          button.</td></tr>
        <tr><td><code>RightSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching secondary thumb
          button.</td></tr>
        <tr><td><code>RightThumbUp</code></td><td>number</td><td>number</td><td>Right thumb not touching primary or secondary
          thumb buttons.</td></tr>
        <tr><td><code>LeftPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching primary
          index finger control.</td></tr>
        <tr><td><code>LeftIndexPoint</code></td><td>number</td><td>number</td><td>Left index finger is pointing, not touching
          primary or secondary index finger controls.</td></tr>
        <tr><td><code>RightPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching primary
          index finger control.</td></tr>
        <tr><td><code>RightIndexPoint</code></td><td>number</td><td>number</td><td>Right index finger is pointing, not touching
          primary or secondary index finger controls.</td></tr>
        <tr><td colspan="4"><strong>Avatar Skeleton</strong></td></tr>
        <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>
        <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>
        <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>right hand pose.</td></tr>
      </tbody>
    </table>
     */
    type HardwareOculusTouch = any;
    /**
     * <p>The <code>Controller.Hardware.Vive</code> object has properties representing the Vive. The property values are integer
    IDs, uniquely identifying each output. <em>Read-only.</em></p>
    <p>These outputs can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject}
    mapping.</p>
    <table>
      <thead>
        <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td colspan="4"><strong>Buttons</strong></td></tr>
        <tr><td><code>LeftApplicationMenu</code></td><td>number</td><td>number</td><td>Left application menu button pressed.
          </td></tr>
        <tr><td><code>RightApplicationMenu</code></td><td>number</td><td>number</td><td>Right application menu button pressed.
          </td></tr>
        <tr><td colspan="4"><strong>Touch Pad (Sticks)</strong></td></tr>
        <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left touch pad x-axis scale.</td></tr>
        <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left touch pad y-axis scale.</td></tr>
        <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>
        <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>
        <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left touch pad pressed.</td></tr>
        <tr><td><code>LSCenter</code></td><td>number</td><td>number</td><td>Left touch pad center pressed.</td></tr>
        <tr><td><code>LSX</code></td><td>number</td><td>number</td><td>Left touch pad pressed x-coordinate.</td></tr>
        <tr><td><code>LSY</code></td><td>number</td><td>number</td><td>Left touch pad pressed y-coordinate.</td></tr>
        <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right touch pad pressed.</td></tr>
        <tr><td><code>RSCenter</code></td><td>number</td><td>number</td><td>Right touch pad center pressed.</td></tr>
        <tr><td><code>RSX</code></td><td>number</td><td>number</td><td>Right touch pad pressed x-coordinate.</td></tr>
        <tr><td><code>RSY</code></td><td>number</td><td>number</td><td>Right touch pad pressed y-coordinate.</td></tr>
        <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left touch pad is touched.</td></tr>
        <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right touch pad is touched.</td></tr>
        <tr><td colspan="4"><strong>Triggers</strong></td></tr>
        <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>
        <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>
        <tr><td><code>LTClick</code></td><td>number</td><td>number</td><td>Left trigger click.</td></tr>
        <tr><td><code>RTClick</code></td><td>number</td><td>number</td><td>Right trigger click.</td></tr>
        <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>
        <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>
        <tr><td colspan="4"><strong>Avatar Skeleton</strong></td></tr>
        <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Hips pose.</td></tr>
        <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Spine2 pose.</td></tr>
        <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>
        <tr><td><code>LeftEye</code></td><td>number</td><td>{@link Pose}</td><td>Left eye pose.</td></tr>
        <tr><td><code>RightEye</code></td><td>number</td><td>{@link Pose}</td><td>Right eye pose.</td></tr>
        <tr><td><code>EyeBlink_L</code></td><td>number</td><td>number</td><td>Left eyelid blink.</td></tr>
        <tr><td><code>EyeBlink_R</code></td><td>number</td><td>number</td><td>Right eyelid blink.</td></tr>
        <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Left arm pose.</td></tr>
        <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Right arm pose</td></tr>
        <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>
        <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 4 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Left index 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Left index 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Left index 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Left index 4 finger joint pose.</td></tr>
        <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 1 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 2 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 3 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 4 finger joint pose.
          </td></tr>
        <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 4 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 1 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 2 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 3 finger joint pose.</td></tr>
        <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 4 finger joint pose.</td></tr>
        <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Right hand pose.</td></tr>
        <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 4 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Right index 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Right index 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Right index 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Right index 4 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 4 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 1 finger joint pose.</td></tr>
        <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 2 finger joint pose.</td></tr>
        <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 3 finger joint pose.</td></tr>
        <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 4 finger joint pose.</td></tr>
        <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 1 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 2 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 3 finger joint pose.
          </td></tr>
        <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 4 finger joint pose.
          </td></tr>
        <tr><td colspan="4"><strong>Trackers</strong></td></tr>
        <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 0 pose.</td></tr>
        <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 1 pose.</td></tr>
        <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 2 pose.</td></tr>
        <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 3 pose.</td></tr>
        <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 4 pose.</td></tr>
        <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 5 pose.</td></tr>
        <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 6 pose.</td></tr>
        <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 7 pose.</td></tr>
        <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 8 pose.</td></tr>
        <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 9 pose.</td></tr>
        <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 10 pose.</td></tr>
        <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 11 pose.</td></tr>
        <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 12 pose.</td></tr>
        <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 13 pose.</td></tr>
        <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 14 pose.</td></tr>
        <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 15 pose.</td></tr>
      </tbody>
    </table>
     */
    type HardwareVive = any;
}

declare namespace InteractiveWindow {
    /**
     * The possible docking locations of an <code>InteractiveWindow</code>.
     */
    type DockAreas = {
        /**
         * Dock to the top edge of the Interface window.
         */
        TOP: InteractiveWindow.DockArea;
        /**
         * Dock to the bottom edge of the Interface window.
         */
        BOTTOM: InteractiveWindow.DockArea;
        /**
         * Dock to the left edge of the Interface window.
         */
        LEFT: InteractiveWindow.DockArea;
        /**
         * Dock to the right edge of the Interface window.
         */
        RIGHT: InteractiveWindow.DockArea;
    };
    /**
     * The possible relative position anchors of an <code>InteractiveWindow</code> relative to the Interface window.
     */
    type RelativePositionAnchors = {
        /**
         * Position is not relative to any part of the Interface
         * window.
         */
        NO_ANCHOR: InteractiveWindow.RelativePositionAnchor;
        /**
         * Position is offset from the top left of the Interface window.
         */
        TOP_LEFT: InteractiveWindow.RelativePositionAnchor;
        /**
         * Position is offset from the top right of the Interface
         * window.
         */
        TOP_RIGHT: InteractiveWindow.RelativePositionAnchor;
        /**
         * Position offset from the bottom right of the Interface
         * window.
         */
        BOTTOM_RIGHT: InteractiveWindow.RelativePositionAnchor;
        /**
         * Position is offset from the bottom left of the Interface
         * window.
         */
        BOTTOM_LEFT: InteractiveWindow.RelativePositionAnchor;
    };
    /**
     * The possible display modes for an <code>InteractiveWindow</code>.
     */
    type PresentationModes = {
        /**
         * The window is displayed inside Interface: in the desktop window in
         * desktop mode or on the HUD surface in HMD mode.
         */
        VIRTUAL: InteractiveWindow.PresentationMode;
        /**
         * The window is displayed separately from the Interface window, as its
         * own separate window.
         */
        NATIVE: InteractiveWindow.PresentationMode;
    };
    /**
     * Property values used when creating an <code>InteractiveWindow</code>.
     */
    type WindowProperties = {
        /**
         * The title of the window.
         * @defaultValue "InteractiveWindow
         */
        title?: string;
        /**
         * The initial position of the window, in pixels.
         */
        position?: TVec2;
        /**
         * The initial size of the window, in pixels
         */
        size?: TVec2;
        /**
         * <code>true</code> to make the window visible when created, <code>false</code> to make
         * it invisible.
         * @defaultValue true
         */
        visible?: boolean;
        /**
         * <code>Desktop.PresentationMode.VIRTUAL</code> to display the window inside Interface, <code>.NATIVE</code> to display it
         * as its own separate window.
         * @defaultValue Desktop.PresentationMode.VIRTUAL
         */
        presentationMode?: InteractiveWindow.PresentationMode;
        /**
         * Controls how a <code>NATIVE</code> window is
         * displayed. If used, the window is docked to the specified edge of the Interface window, otherwise the window is
         * displayed as its own separate window.
         */
        presentationWindowInfo?: InteractiveWindow.PresentationWindowInfo;
        /**
         * Customizes window behavior.
         */
        additionalFlags?: InteractiveWindow.Flags;
        /**
         * Customizes window controls.
         */
        overrideFlags?: InteractiveWindow.OverrideFlags;
        /**
         * The anchor for the
         * <code>relativePosition</code>, if used.
         */
        relativePositionAnchor?: InteractiveWindow.RelativePositionAnchor;
        /**
         * The position of the window, relative to the <code>relativePositionAnchor</code>, in
         * pixels. Excludes the window frame.
         */
        relativePosition?: TVec2;
        /**
         * <code>true</code> to make the window full screen.
         */
        isFullScreenWindow?: boolean;
    };
    /**
     * <p>A set of flags customizing <code>InteractiveWindow</code> controls. The value is constructed by using the <code>|</code>
    (bitwise OR) operator on the individual flag values.</code>.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0x00000001</code></td><td>Window</td><td>Displays the window as a window rather than a dialog.</td></tr>
        <tr><td><code>0x00001000</code></td><td>WindowTitleHint</td><td>Adds a title bar.</td><td>
        <tr><td><code>0x00002000</code></td><td>WindowSystemMenuHint</td><td>Adds a window system menu.</td><td>
        <tr><td><code>0x00004000</code></td><td>WindowMinimizeButtonHint</td><td>Adds a minimize button.</td><td>
        <tr><td><code>0x00008000</code></td><td>WindowMaximizeButtonHint</td><td>Adds a maximize button.</td><td>
        <tr><td><code>0x00040000</code></td><td>WindowStaysOnTopHint</td><td>The window stays on top of other windows.
          <em>Not used on Windows.</em>
        <tr><td><code>0x08000000</code></td><td>WindowCloseButtonHint</td><td>Adds a close button.</td><td>
      <tbody>
    </table>
     */
    type OverrideFlags = number;
    /**
     * Configures how a <code>NATIVE</code> window is displayed.
     */
    type PresentationWindowInfo = {
        /**
         * The edge of the Interface window to dock to.
         */
        dockArea: InteractiveWindow.DockArea;
    };
    /**
     * <p>A set of  flags controlling <code>InteractiveWindow</code> behavior. The value is constructed by using the
    <code>|</code> (bitwise OR) operator on the individual flag values.</p>
    <table>
      <thead>
        <tr><th>Flag Name</th><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td>ALWAYS_ON_TOP</td><td><code>1</code></td><td>The window always displays on top.</td></tr>
        <tr><td>CLOSE_BUTTON_HIDES</td><td><code>2</code></td><td>The window hides instead of closing when the user clicks
          the "close" button.</td></tr>
      </tbody>
    </table>
     */
    type Flags = number;
    /**
     * <p>A display mode for an <code>InteractiveWindow</code>.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>VIRTUAL</td><td>The window is displayed inside Interface: in the desktop window in
          desktop mode or on the HUD surface in HMD mode.</td></tr>
        <tr><td><code>1</code></td><td>NATIVE</td><td>The window is displayed separately from the Interface window, as its
        own separate window.</td></tr>
      <tbody>
    </table>
     */
    type PresentationMode = number;
    /**
     * <p>A docking location of an <code>InteractiveWindow</code>.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>TOP</td><td>Dock to the top edge of the Interface window.</td></tr>
        <tr><td><code>1</code></td><td>BOTTOM</td><td>Dock to the bottom edge of the Interface window.</td></tr>
        <tr><td><code>2</code></td><td>LEFT</td><td>Dock to the left edge of the Interface window.</td></tr>
        <tr><td><code>3</code></td><td>RIGHT</td><td>Dock to the right edge of the Interface window.</td></tr>
      <tbody>
    </table>
     */
    type DockArea = number;
    /**
     * <p>The anchor for a relative position of an <code>InteractiveWindow</code>.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>NO_ANCHOR</td><td>Position is not relative to any part of the Interface window.</td></tr>
        <tr><td><code>1</code></td><td>TOP_LEFT</td><td>Position is offset from the top left of the Interface window.</td></tr>
        <tr><td><code>2</code></td><td>TOP_RIGHT</td><td>Position is offset from the top right of the Interface window.</td></tr>
        <tr><td><code>3</code></td><td>BOTTOM_RIGHT</td><td>Position offset from the bottom right of the Interface
        window.</td></tr>
        <tr><td><code>4</code></td><td>BOTTOM_LEFFT</td><td>Position is offset from the bottom left of the Interface
            window.</td></tr>
      <tbody>
    </table>
     */
    type RelativePositionAnchor = number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Desktop</code> API provides the dimensions of the computer screen, sets the opacity of the HUD surface, and
enables QML and HTML windows to be shown inside or outside of Interface.
 * @property width - The width of the computer screen including task bar and system menu, in pixels.
    <em>Read-only.</em>
 * @property height - The height of the computer screen including task bar and system menu, in pixels.
    <em>Read-only.</em>
 * @property ALWAYS_ON_TOP - A flag value that makes an {@link InteractiveWindow} always display on
    top. <em>Read-only.</em>
 * @property CLOSE_BUTTON_HIDES - A flag value that makes an {@link InteractiveWindow} hide instead
    of closing when the user clicks the "close" button.<em> Read-only.</em>
 * @property PresentationMode - The possible display options for an
    {@link InteractiveWindow}: display inside Interface or in a separate desktop window. <em>Read-only.</em>
 * @property DockArea - The possible docking locations of an {@link InteractiveWindow}: top,
    bottom, left, or right of the Interface window.
    <em>Read-only.</em>
 * @property RelativePositionAnchor - The possible relative position anchors for an
    {@link InteractiveWindow}: none, top left, top right, bottom right, or bottom left of the Interface window.
    <em>Read-only.</em>
 */
declare namespace Desktop {
    /**
     * Sets the opacity of the HUD surface.
     * @param alpha - The opacity, <code>0.0 &ndash; 1.0</code>.
     */
    function setHUDAlpha(alpha: number): void;
    /**
     * Opens a QML window within Interface: in the Interface window in desktop mode or on the HUD surface in HMD mode. If a
    window of the specified name already exists, it is shown, otherwise a new window is created from the QML.
     * @example
     * <caption>Open the general settings dialog.</caption>
    Desktop.show("hifi/dialogs/GeneralPreferencesDialog.qml", "GeneralPreferencesDialog");
     * @param url - The QML file that specifies the window content.
     * @param name - A unique name for the window.
     */
    function show(url: string, name: string): void;
    /**
     * Creates a new window that can be displayed either within Interface or as a separate desktop window.
     * @example
     * <caption>Open a dialog in its own window separate from Interface.</caption>
    var nativeWindow = Desktop.createWindow(Script.resourcesPath() + 'qml/OverlayWindowTest.qml', {
        title: "Native Window",
        presentationMode: Desktop.PresentationMode.NATIVE,
        size: { x: 500, y: 400 }
    });
    
    Script.scriptEnding.connect(function () {
        nativeWindow.close();
    });
     *
     * @param url - The QML file that specifies the window content. The QML file can use a <code>WebView</code>
        control (defined by "WebView.qml" included in the Interface install) to embed an HTML web page (complete with
        <code>EventBridge</code> object).
     * @param [properties] - Initial window properties.
     * @returns A new window object.
     */
    function createWindow(url: string, properties?: InteractiveWindow.WindowProperties): InteractiveWindow;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>DialogsMamnager</code> API provides facilities to work with some key dialogs.
 */
declare namespace DialogsManager {
    /**
     * <em>Currently performs no action.</em>
     */
    function showFeed(): void;
    /**
     * Shows the "Goto" dialog.
     */
    function showAddressBar(): void;
    /**
     * Hides the "Goto" dialog.
     */
    function hideAddressBar(): void;
    /**
     * Shows the login dialog.
     */
    function showLoginDialog(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The GooglePoly API allows you to interact with Google Poly models direct from inside High Fidelity.
 */
declare namespace GooglePoly {
    function setAPIKey(key: string): void;
    function getAssetList(keyword: string, category: string, format: string): string;
    function getFBX(keyword: string, category: string): string;
    function getOBJ(keyword: string, category: string): string;
    function getBlocks(keyword: string, category: string): string;
    function getGLTF(keyword: string, category: string): string;
    function getGLTF2(keyword: string, category: string): string;
    function getTilt(keyword: string, category: string): string;
    function getModelInfo(input: string): string;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>HMD</code> API provides access to the HMD used in VR display mode.
 * @property position - The position of the HMD if currently in VR display mode, otherwise
    {@link TVec3(0)|Vec3.ZERO}. <em>Read-only.</em>
 * @property orientation - The orientation of the HMD if currently in VR display mode, otherwise
    {@link TQuat(0)|Quat.IDENTITY}. <em>Read-only.</em>
 * @property active - <code>true</code> if the display mode is HMD, otherwise <code>false</code>. <em>Read-only.</em>
 * @property mounted - <code>true</code> if currently in VR display mode and the HMD is being worn, otherwise
    <code>false</code>. <em>Read-only.</em>
 * @property playerHeight - The real-world height of the user. <em>Read-only.</em> <em>Currently always returns a
    value of <code>1.755</code>.</em>
 * @property eyeHeight - The real-world height of the user's eyes. <em>Read-only.</em> <em>Currently always returns a
    value of <code>1.655</code>.</em>
 * @property ipd - The inter-pupillary distance (distance between eyes) of the user, used for rendering. Defaults to
    the human average of <code>0.064</code> unless set by the HMD. <em>Read-only.</em>
 * @property ipdScale - A scale factor applied to the <code>ipd</code> property value.
 * @property showTablet - <code>true</code> if the tablet is being displayed, <code>false</code> otherwise.
    <em>Read-only.</em>
 * @property tabletContextualMode - <code>true</code> if the tablet has been opened in contextual mode, otherwise
    <code>false</code>. In contextual mode, the tablet has been opened at a specific world position and orientation rather
    than at a position and orientation relative to the user. <em>Read-only.</em>
 * @property tabletID - The UUID of the tablet body model entity.
 * @property tabletScreenID - The UUID of the tablet's screen entity.
 * @property homeButtonID - The UUID of the tablet's "home" button entity.
 * @property homeButtonHighlightID - The UUID of the tablet's "home" button highlight entity.
 * @property miniTabletID - The UUID of the mini tablet's body model entity. <code>null</code> if not in HMD mode.
 * @property miniTabletScreenID - The UUID of the mini tablet's screen entity. <code>null</code> if not in HMD mode.
 * @property miniTabletHand - The hand that the mini tablet is displayed on: <code>0</code> for left hand,
    <code>1</code> for right hand, <code>-1</code> if not in HMD mode.
 * @property miniTabletEnabled - <code>true</code> if the mini tablet is enabled to be displayed, otherwise
    <code>false</code>.
 * @property playArea - The size and position of the HMD play area in sensor coordinates. <em>Read-only.</em>
 * @property sensorPositions - The positions of the VR system sensors in sensor coordinates. <em>Read-only.</em>
 * @property visionSqueezeRatioX - The amount of vision squeeze for the x-axis when moving, range <code>0.0</code>
    &ndash; <code>1.0</code>.
 * @property visionSqueezeRatioY - The amount of vision squeeze for the y-axis when moving, range <code>0.0</code>
    &ndash; <code>1.0</code>.
 * @property visionSqueezeTurningXFactor - The additional amount of vision squeeze for the x-axis when turning,
    range <code>0.0</code> &ndash; <code>1.0</code>.
 * @property visionSqueezeTurningYFactor - <em>Currently unused.</em>
 * @property visionSqueezeUnSqueezeDelay - The delay in undoing the vision squeeze effect after motion stops, in
    seconds.
 * @property visionSqueezeUnSqueezeSpeed - How quickly the vision squeeze effect fades, once
    <code>visionSqueezeUnSqueezeDelay</code> has passed.
 * @property visionSqueezeTransition - How tightly vision is squeezed, range <code>0.01</code> &ndash;
    <code>0.7</code>.
 * @property visionSqueezePerEye - <code>1</code> if each eye gets a tube to see through, <code>0</code> if the face
    gets a tube.
 * @property visionSqueezeGroundPlaneY - Adjusts how far below the camera the vision squeeze grid is displayed at.
 * @property visionSqueezeSpotlightSize - The diameter of the circle of vision squeeze grid that is illuminated
    around the camera.
 */
declare namespace HMD {
    const active: boolean;
    /**
     * Calculates the intersection of a ray with the HUD overlay.
     * @example
     * <caption>Draw a square on the HUD overlay in the direction you're looking.</caption>
    var hudIntersection = HMD.calculateRayUICollisionPoint(MyAvatar.getHeadPosition(),
        Quat.getForward(MyAvatar.headOrientation));
    var hudPoint = HMD.overlayFromWorldPoint(hudIntersection);
    
    var DIMENSIONS = { x: 50, y: 50 };
    var square = Overlays.addOverlay("rectangle", {
        x: hudPoint.x - DIMENSIONS.x / 2,
        y: hudPoint.y - DIMENSIONS.y / 2,
        width: DIMENSIONS.x,
        height: DIMENSIONS.y,
        color: { red: 255, green: 0, blue: 0 }
    });
    
    Script.scriptEnding.connect(function () {
        Overlays.deleteOverlay(square);
    });
     * @param position - The origin of the ray.
     * @param direction - The direction of the ray.
     * @returns The point of intersection with the HUD overlay if it intersects, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function calculateRayUICollisionPoint(position: TVec3, direction: TVec3): TVec3;
    /**
     * Gets the 2D HUD overlay coordinates of a 3D point on the HUD overlay.
    2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.
     * @example
     * <caption>Draw a square on the HUD overlay in the direction you're looking.</caption>
    var hudIntersection = HMD.calculateRayUICollisionPoint(MyAvatar.getHeadPosition(),
        Quat.getForward(MyAvatar.headOrientation));
    var hudPoint = HMD.overlayFromWorldPoint(hudIntersection);
    
    var DIMENSIONS = { x: 50, y: 50 };
    var square = Overlays.addOverlay("rectangle", {
        x: hudPoint.x - DIMENSIONS.x / 2,
        y: hudPoint.y - DIMENSIONS.y / 2,
        width: DIMENSIONS.x,
        height: DIMENSIONS.y,
        color: { red: 255, green: 0, blue: 0 }
    });
    
    Script.scriptEnding.connect(function () {
        Overlays.deleteOverlay(square);
    });
     * @param position - The point on the HUD overlay in world coordinates.
     * @returns The point on the HUD overlay in HUD coordinates.
     */
    function overlayFromWorldPoint(position: TVec3): TVec2;
    /**
     * Gets the 3D world coordinates of a 2D point on the HUD overlay.
    2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.
     * @param coordinates - The point on the HUD overlay in HUD coordinates.
     * @returns The point on the HUD overlay in world coordinates.
     */
    function worldPointFromOverlay(coordinates: TVec2): TVec3;
    /**
     * Gets the 2D point on the HUD overlay represented by given spherical coordinates.
    2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.
    Spherical coordinates are polar coordinates in radians with <code>{ x: 0, y: 0 }</code> being the center of the HUD
    overlay.
     * @param sphericalPos - The point on the HUD overlay in spherical coordinates.
     * @returns The point on the HUD overlay in HUD coordinates.
     */
    function sphericalToOverlay(sphericalPos: TVec2): TVec2;
    /**
     * Gets the spherical coordinates of a 2D point on the HUD overlay.
    2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.
    Spherical coordinates are polar coordinates in radians with <code>{ x: 0, y: 0 }</code> being the center of the HUD
    overlay.
     * @param overlayPos - The point on the HUD overlay in HUD coordinates.
     * @returns The point on the HUD overlay in spherical coordinates.
     */
    function overlayToSpherical(overlayPos: TVec2): TVec2;
    /**
     * Recenters the HMD HUD to the current HMD position and orientation.
     */
    function centerUI(): void;
    /**
     * Gets the name of the HMD audio input device.
     * @returns The name of the HMD audio input device if in HMD mode, otherwise an empty string.
     */
    function preferredAudioInput(): string;
    /**
     * Gets the name of the HMD audio output device.
     * @returns The name of the HMD audio output device if in HMD mode, otherwise an empty string.
     */
    function preferredAudioOutput(): string;
    /**
     * Checks whether there is an HMD available.
     * @example
     * <caption>Report on HMD availability.</caption>
    print("Is any HMD available: " + HMD.isHMDAvailable());
    print("Is an Oculus Rift HMD available: " + HMD.isHMDAvailable("Oculus Rift"));
    print("Is a Vive HMD available: " + HMD.isHMDAvailable("OpenVR (Vive)"));
     * @param [name = ""] - The name of the HMD to check for, e.g., <code>"Oculus Rift"</code>. The name is the same as
        may be displayed in Interface's "Display" menu. If no name is specified, then any HMD matches.
     * @returns <code>true</code> if an HMD of the specified <code>name</code> is available, otherwise
        <code>false</code>.
     */
    function isHMDAvailable(name?: string): boolean;
    /**
     * Checks whether there is an HMD head controller available.
     * @example
     * <caption>Report HMD head controller availability.</caption>
    print("Is any HMD head controller available: " + HMD.isHeadControllerAvailable());
    print("Is an Oculus head controller available: " + HMD.isHeadControllerAvailable("Oculus"));
    print("Is a Vive head controller available: " + HMD.isHeadControllerAvailable("OpenVR"));
     * @param [name = ""] - The name of the HMD head controller to check for, e.g., <code>"Oculus"</code>. If no name is
        specified, then any HMD head controller matches.
     * @returns <code>true</code> if an HMD head controller of the specified <code>name</code> is available,
        otherwise <code>false</code>.
     */
    function isHeadControllerAvailable(name?: string): boolean;
    /**
     * Checks whether there are HMD hand controllers available.
     * @example
     * <caption>Report HMD hand controller availability.</caption>
    print("Are any HMD hand controllers available: " + HMD.isHandControllerAvailable());
    print("Are Oculus hand controllers available: " + HMD.isHandControllerAvailable("Oculus"));
    print("Are Vive hand controllers available: " + HMD.isHandControllerAvailable("OpenVR"));
     * @param [name = ""] - The name of the HMD hand controller to check for, e.g., <code>"Oculus"</code>. If no name is
        specified, then any HMD hand controller matches.
     * @returns <code>true</code> if an HMD hand controller of the specified <code>name</code> is available,
        otherwise <code>false</code>.
     */
    function isHandControllerAvailable(name?: string): boolean;
    /**
     * Checks whether there are specific HMD controllers available.
     * @example
     * <caption>Report if particular Oculus controllers are available.</caption>
    print("Is an Oculus Touch controller available: " + HMD.isSubdeviceContainingNameAvailable("Touch"));
    print("Is an Oculus Remote controller available: " + HMD.isSubdeviceContainingNameAvailable("Remote"));
     * @param name - The name of the HMD controller to check for, e.g., <code>"OculusTouch"</code>.
     * @returns <code>true</code> if an HMD controller with a name containing the specified <code>name</code> is
        available, otherwise <code>false</code>.
     */
    function isSubdeviceContainingNameAvailable(name: string): boolean;
    /**
     * Signals that models of the HMD hand controllers being used should be displayed. The models are displayed at their actual,
    real-world locations.
     * @example
     * <caption>Show your hand controllers for 10 seconds.</caption>
    HMD.requestShowHandControllers();
    Script.setTimeout(function () {
        HMD.requestHideHandControllers();
    }, 10000);
     */
    function requestShowHandControllers(): void;
    /**
     * Signals that it is no longer necessary to display models of the HMD hand controllers being used. If no other scripts
    want the models displayed then they are no longer displayed.
     */
    function requestHideHandControllers(): void;
    /**
     * Checks whether any script wants models of the HMD hand controllers displayed. Requests are made and canceled using
    {@link HMD.requestShowHandControllers|requestShowHandControllers} and
    {@link HMD.requestHideHandControllers|requestHideHandControllers}.
     * @returns <code>true</code> if any script is requesting that HMD hand controller models be displayed.
     */
    function shouldShowHandControllers(): boolean;
    /**
     * Causes the borders in HUD windows to be enlarged when the laser intersects them in HMD mode. By default, borders are not
    enlarged.
     */
    function activateHMDHandMouse(): void;
    /**
     * Causes the border in HUD windows to no longer be enlarged when the laser intersects them in HMD mode. By default,
    borders are not enlarged.
     */
    function deactivateHMDHandMouse(): void;
    /**
     * Suppresses the activation of the HMD-provided keyboard, if any. Successful calls should be balanced with a call to
    {@link HMD.unsuppressKeyboard|unsuppressKeyboard} within a reasonable amount of time.
     * @returns <code>true</code> if the current HMD provides a keyboard and it was successfully suppressed (e.g., it
    isn't being displayed), otherwise <code>false</code>.
     */
    function suppressKeyboard(): boolean;
    /**
     * Unsuppresses the activation of the HMD-provided keyboard, if any.
     */
    function unsuppressKeyboard(): void;
    /**
     * Checks whether the HMD-provided keyboard, if any, is visible.
     * @returns <code>true</code> if the current HMD provides a keyboard and it is visible, otherwise
    <code>false</code>.
     */
    function isKeyboardVisible(): boolean;
    /**
     * Closes the tablet if it is open.
     */
    function closeTablet(): void;
    /**
     * Opens the tablet if the tablet is used in the current display mode and it isn't already showing, and sets the tablet to
    contextual mode if requested. In contextual mode, the page displayed on the tablet is wholly controlled by script (i.e.,
    the user cannot navigate to another).
     * @param [contextualMode = false] - If <code>true</code> then the tablet is opened at a specific position and
        orientation already set by the script, otherwise it opens at a position and orientation relative to the user. For
        contextual mode, set the world or local position and orientation of the <code>HMD.tabletID</code> overlay.
     */
    function openTablet(contextualMode?: boolean): void;
    /**
     * Gets the position on the HUD overlay that your HMD is looking at, in HUD coordinates.
     * @returns The position on the HUD overlay that your HMD is looking at, in pixels.
     */
    function getHUDLookAtPosition2D(): TVec2;
    /**
     * Gets the position on the HUD overlay that your HMD is looking at, in world coordinates.
     * @returns The position on the HUD overlay the your HMD is looking at, in world coordinates.
     */
    function getHUDLookAtPosition3D(): TVec3;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Keyboard</code> API provides facilities to use an in-world, virtual keyboard. When enabled, this keyboard is
displayed instead of the 2D keyboard that raises at the bottom of the tablet or Web entities when a text input field has
focus and you're in HMD mode.
 * @property raised - <code>true</code> if the virtual keyboard is visible, <code>false</code> if it isn't.
 * @property password - <code>true</code> if <code>"*"</code>s are displayed on the virtual keyboard's display
    instead of the characters typed, <code>false</code> if the actual characters are displayed.
 * @property use3DKeyboard - <code>true</code> if user settings have "Use Virtual Keyboard" enabled,
    <code>false</code> if it's disabled. <em>Read-only.</em>
 * @property preferMalletsOverLasers - <code>true</code> if user settings for the virtual keyboard have "Mallets"
    selected, <code>false</code> if "Lasers" is selected. <em>Read-only.</em>
 */
declare namespace Keyboard {
    /**
     * Loads a JSON file that defines the virtual keyboard's layout. The default JSON file used is
    {@link https://github.com/highfidelity/hifi/blob/master/interface/resources/config/keyboard.json|https://github.com/highfidelity/hifi/.../keyboard.json}.
     * @param path - The keyboard JSON file.
     */
    function loadKeyboardFile(path: string): void;
    /**
     * Enables the left mallet so that it is displayed when in HMD mode.
     */
    function enableLeftMallet(): void;
    /**
     * Enables the right mallet so that it is displayed when in HMD mode.
     */
    function enableRightMallet(): void;
    /**
     * Disables the left mallet so that it is not displayed when in HMD mode.
     */
    function disableLeftMallet(): void;
    /**
     * Disables the right mallet so that it is not displayed when in HMD mode.
     */
    function disableRightMallet(): void;
    /**
     * Configures the virtual keyboard to recognize a ray pointer as the left hand's laser.
     * @param leftHandLaser - The ID of a ray pointer created by {@link Pointers.createPointer}.
     */
    function setLeftHandLaser(leftHandLaser: number): void;
    /**
     * Configures the virtual keyboard to recognize a ray pointer as the right hand's laser.
     * @param rightHandLaser - The ID of a ray pointer created by {@link Pointers.createPointer}.
     */
    function setRightHandLaser(rightHandLaser: number): void;
    /**
     * Checks whether an entity is part of the virtual keyboard.
     * @param entityID - The entity ID.
     * @returns <code>true</code> if the entity is part of the virtual keyboard, <code>false</code> if it isn't.
     */
    function containsID(entityID: Uuid): boolean;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Menu</code> API provides access to the menu that is displayed at the top of the window on a user's desktop and in
the tablet when the "MENU" button is pressed.

<h3>Groupings</h3>

<p>A "grouping" provides a way to group a set of menus or menu items together so that they can all be set visible or invisible
as a group.</p>
<p>There is currently only one available group: <code>"Developer"</code>. This grouping can be toggled in the
"Settings" menu.</p>
<p>If a menu item doesn't belong to a group, it is always displayed.</p>
 */
declare namespace Menu {
    /**
     * Adds a new top-level menu.
     * @example
     * <caption>Add a menu and a nested submenu.</caption>
    Menu.addMenu("Test Menu");
    Menu.addMenu("Test Menu > Test Sub Menu");
     * @example
     * <caption>Add a menu to the Settings menu that is only visible if Settings > Developer is enabled.</caption>
    Menu.addMenu("Settings > Test Grouping Menu", "Developer");
     * @param menuName - Name that will be displayed for the menu. Nested menus can be specified using the
        <code>"&gt;"</code> character.
     * @param [grouping] - Name of the grouping, if any, to add this menu to.
     */
    function addMenu(menuName: string, grouping?: string): void;
    /**
     * Removes a top-level menu.
     * @example
     * <caption>Remove a menu and nested submenu.</caption>
    Menu.removeMenu("Test Menu > Test Sub Menu");
    Menu.removeMenu("Test Menu");
     * @param menuName - Name of the menu to remove.
     */
    function removeMenu(menuName: string): void;
    /**
     * Checks whether a top-level menu exists.
     * @example
     * <caption>Check if the "Developer" menu exists.</caption>
    if (Menu.menuExists("Developer")) {
        print("Developer menu exists.");
    }
     * @param menuName - Name of the menu to check exists.
     * @returns <code>true</code> if the menu exists, otherwise <code>false</code>.
     */
    function menuExists(menuName: string): boolean;
    /**
     * Adds a separator with an unclickable label below it. The separator will be placed at the bottom of the menu. To add a
    separator at a specific point in the menu, use {@link Menu.addMenuItem} with {@link Menu.MenuItemProperties} instead.
     * @example
     * <caption>Add a separator.</caption>
    Menu.addSeparator("Developer", "Test Separator");
     * @param menuName - Name of the menu to add the separator to.
     * @param separatorName - Name of the separator that will be displayed as the label below the separator line.
     */
    function addSeparator(menuName: string, separatorName: string): void;
    /**
     * Removes a separator from a menu.
     * @example
     * <caption>Remove a separator.</caption>
    Menu.removeSeparator("Developer", "Test Separator");
     * @param menuName - Name of the menu to remove the separator from.
     * @param separatorName - Name of the separator to remove.
     */
    function removeSeparator(menuName: string, separatorName: string): void;
    /**
     * Adds a new menu item to a menu. The menu item is specified using {@link Menu.MenuItemProperties}.
     * @example
     * <caption>Add a menu item at a particular position in the "Developer" menu.</caption>
    Menu.addMenuItem({
        menuName:     "Developer",
        menuItemName: "Test",
        afterItem:    "Log",
        shortcutKey:  "Ctrl+Shift+T"
    });
     * @param properties - Properties of the menu item to create.
     */
    function addMenuItem(properties: Menu.MenuItemProperties): void;
    /**
     * Adds a new menu item to a menu. The new item is added at the end of the menu.
     * @example
     * <caption>Add a menu item to the end of the "Developer" menu.</caption>
    Menu.addMenuItem("Developer", "Test", "Ctrl+Shift+T");
     * @param menuName - Name of the menu to add the menu item to.
     * @param menuItem - Name of the menu item. This is what will be displayed in the menu.
     * @param [shortcutKey] - A shortcut key that can be used to trigger the menu item.
     */
    function addMenuItem(menuName: string, menuItem: string, shortcutKey?: string): void;
    /**
     * Removes a menu item from a menu.
     * @example
     * <caption>Remove a menu item from the "Developer" menu.</caption>
    Menu.removeMenuItem("Developer", "Test");
     * @param menuName - Name of the menu to remove a menu item from.
     * @param menuItem - Name of the menu item to remove.
     */
    function removeMenuItem(menuName: string, menuItem: string): void;
    /**
     * Checks whether a menu item exists.
     * @example
     * <caption>Determine if the Developer &gt; Stats menu exists.</caption>
    if (Menu.menuItemExists("Developer", "Stats")) {
        print("Developer > Stats menu item exists.");
    }
     * @param menuName - Name of the menu that the menu item is in.
     * @param menuItem - Name of the menu item to check for existence of.
     * @returns <code>true</code> if the menu item exists, otherwise <code>false</code>.
     */
    function menuItemExists(menuName: string, menuItem: string): boolean;
    /**
     * Checks whether a checkable menu item is checked.
     * @example
     * <caption>Report whether the Settings > Developer menu item is turned on.</caption>
    print("Developer menu showing: " + Menu.isOptionChecked("Developer Menu"));
     * @param menuOption - The name of the menu item.
     * @returns <code>true</code> if the option is checked, otherwise <code>false</code>.
     */
    function isOptionChecked(menuOption: string): boolean;
    /**
     * Sets a checkable menu item as checked or unchecked.
     * @example
     * <caption>Turn on Settings > Developer Menu.</caption>
    Menu.setIsOptionChecked("Developer Menu", true);
    print("Developer menu showing: " + Menu.isOptionChecked("Developer Menu"));
     * @param menuOption - The name of the menu item to modify.
     * @param isChecked - If <code>true</code>, the menu item will be checked, otherwise it will not be checked.
     */
    function setIsOptionChecked(menuOption: string, isChecked: boolean): void;
    /**
     * Triggers a menu item as if the user clicked on it.
     * @example
     * <caption>Open the Asset Browser dialog.</caption>
    Menu.triggerOption('Asset Browser');
     * @param menuOption - The name of the menu item to trigger.
     */
    function triggerOption(menuOption: string): void;
    /**
     * Checks whether a menu or menu item is enabled. If disabled, the item is grayed out and unusable.
    Menus are enabled by default.
     * @example
     * <caption>Report whether the Settings > Developer Menu item is enabled.</caption>
    print("Developer Menu item enabled: " + Menu.isMenuEnabled("Settings > Developer Menu"));
     * @param menuName - The name of the menu or menu item to check.
     * @returns <code>true</code> if the menu is enabled, otherwise <code>false</code>.
     */
    function isMenuEnabled(menuName: string): boolean;
    /**
     * Sets a menu or menu item to be enabled or disabled. If disabled, the item is grayed out and unusable.
     * @example
     * <caption>Disable the Settings > Developer Menu item.</caption>
    Menu.setMenuEnabled("Settings > Developer Menu", false);
    print("Developer Menu item enabled: " + Menu.isMenuEnabled("Settings > Developer Menu"));
     * @param menuName - The name of the menu or menu item to modify.
     * @param isEnabled - If <code>true</code>, the menu will be enabled, otherwise it will be disabled.
     */
    function setMenuEnabled(menuName: string, isEnabled: boolean): void;
    /**
     * A set of properties that can be passed to {@link Menu.addMenuItem} to create a new menu item.
    
    If none of the properties, <code>position</code>, <code>beforeItem</code>, <code>afterItem</code>, or <code>grouping</code>
    are specified, the menu item will be placed at the end of the menu.
     */
    type MenuItemProperties = {
        /**
         * Name of the menu. Nested menus can be described using the ">" character.
         */
        menuName: string;
        /**
         * Name of the menu item.
         */
        menuItemName: string;
        /**
         * Whether or not the menu item is checkable.
         */
        isCheckable?: boolean;
        /**
         * Whether or not the menu item is checked.
         */
        isChecked?: boolean;
        /**
         * Whether or not the menu item is a separator.
         */
        isSeparator?: boolean;
        /**
         * A shortcut key that triggers the menu item.
         */
        shortcutKey?: string;
        /**
         * A {@link KeyEvent} that specifies a key that triggers the menu item.
         */
        shortcutKeyEvent?: KeyEvent;
        /**
         * The position to place the new menu item. An integer number with <code>0</code> being the first
         * menu item.
         */
        position?: number;
        /**
         * The name of the menu item to place this menu item before.
         */
        beforeItem?: string;
        /**
         * The name of the menu item to place this menu item after.
         */
        afterItem?: string;
        /**
         * The name of grouping to add this menu item to.
         */
        grouping?: string;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Performance</code> API provides control and information on graphics performance settings.
 * @property performancePreset - The current graphics performance preset.
 * @property refreshRateProfile - The current refresh rate profile.
 */
declare namespace Performance {
    /**
     * <p>Graphics performance presets.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>UNKNOWN</td><td>Custom settings of world detail, rendering effects, and refresh
          rate.</td></tr>
        <tr><td><code>1</code></td><td>LOW</td><td>Low world detail, no rendering effects, lo refresh rate.</td></tr>
        <tr><td><code>2</code></td><td>MID</td><td>Medium world detail, some rendering effects, medium refresh
          rate.</td></tr>
        <tr><td><code>3</code></td><td>HIGH</td><td>Maximum world detail, all rendering effects, high refresh rate.</td></tr>
      </tbody>
    </table>
     */
    type PerformancePreset = number;
    /**
     * <p>Refresh rate profile.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>ECO</td><td>Low refresh rate, which is reduced when Interface doesn't have focus or
          is minimized.</td></tr>
        <tr><td><code>1</code></td><td>INTERACTIVE</td><td>Medium refresh rate, which is reduced when Interface doesn't have
          focus or is minimized.</td></tr>
        <tr><td><code>2</code></td><td>REALTIME</td><td>High refresh rate, even when Interface doesn't have focus or is
          minimized. </td></tr>
      </tbody>
    </table>
     */
    type RefreshRateProfile = number;
    /**
     * Sets graphics performance to a preset.
     * @param performancePreset - The graphics performance preset to to use.
     */
    function setPerformancePreset(performancePreset: Performance.PerformancePreset): void;
    /**
     * Gets the current graphics performance preset in use.
     * @returns The current graphics performance preset in use.
     */
    function getPerformancePreset(): Performance.PerformancePreset;
    /**
     * Gets the names of the graphics performance presets.
     * @returns The names of the graphics performance presets. The array index values correspond to
        {@link Performance.PerformancePreset} values.
     */
    function getPerformancePresetNames(): string[];
    /**
     * Sets the curfrent refresh rate profile.
     * @param refreshRateProfile - The refresh rate profile.
     */
    function setRefreshRateProfile(refreshRateProfile: Performance.RefreshRateProfile): void;
    /**
     * Gets the current refresh rate profile in use.
     * @returns The refresh rate profile.
     */
    function getRefreshRateProfile(): Performance.RefreshRateProfile;
    /**
     * Gets the names of the refresh rate profiles.
     * @returns The names of the refresh rate profiles. The array index values correspond to
        {@link Performance.RefreshRateProfile} values.
     */
    function getRefreshRateProfileNames(): string[];
    /**
     * Gets the current target refresh rate, in Hz, per the current refresh rate profile and refresh rate regime if in desktop
    mode; a higher rate if in VR mode.
     * @returns The current target refresh rate, in Hz.
     */
    function getActiveRefreshRate(): number;
    /**
     * Gets the current user experience mode.
     * @returns The current user experience mode.
     */
    function getUXMode(): UXMode;
    /**
     * Gets the current refresh rate regime that's in effect.
     * @returns The current refresh rate regime.
     */
    function getRefreshRateRegime(): RefreshRateRegime;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>PlatformInfo</code> API provides information about the hardware platform being used.
 */
declare namespace PlatformInfo {
    /**
     * <p>The platform tier of a computer is an indication of its rendering capability.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>UNKNOWN</td><td>Unknown rendering capability.</td></tr>
        <tr><td><code>1</code></td><td>LOW</td><td>Low-end PC, capable of rendering low-quality graphics.</td></tr>
        <tr><td><code>2</code></td><td>MID</td><td>Business-class PC, capable of rendering medium-quality graphics.</td></tr>
        <tr><td><code>3</code></td><td>HIGH</td><td>High-end PC, capable of rendering high-quality graphics.</td></tr>
      </tbody>
    </table>
     */
    type PlatformTier = number;
    /**
     * Gets the operating system type.
     * @returns The operating system type: <code>"WINDOWS"</code>, <code>"MACOS"</code>, or <code>"UNKNOWN"</code>.
     */
    function getOperatingSystemType(): string;
    /**
     * Gets information on the CPU model.
     * @returns Information on the CPU.
     */
    function getCPUBrand(): string;
    /**
     * Gets the number of logical CPU cores.
     * @returns The number of logical CPU cores.
     */
    function getNumLogicalCores(): number;
    /**
     * Gets the total amount of usable physical memory, in MB.
     * @returns The total system memory in megabytes.
     */
    function getTotalSystemMemoryMB(): number;
    /**
     * Gets the model of the graphics card currently being used.
     * @returns The model of the graphics card currently being used.
     */
    function getGraphicsCardType(): string;
    /**
     * Checks whether Oculus Touch controllers are connected.
     * @returns <code>true</code> if Oculus Touch controllers are connected, <code>false</code> if they aren't.
     */
    function hasRiftControllers(): boolean;
    /**
     * Checks whether Vive controllers are connected.
     * @returns <code>true</code> if Vive controllers are connected, <code>false</code> if they aren't.
     */
    function hasViveControllers(): boolean;
    /**
     * Checks whether HTML on 3D surfaces (e.g., Web entities) is supported.
     * @returns <code>true</code> if the current display supports HTML on 3D surfaces, <code>false</code> if it
        doesn't.
     */
    function has3DHTML(): boolean;
    /**
     * Checks whether Interface is running on a stand-alone HMD device (CPU incorporated into the HMD display).
     * @returns <code>true</code> if Interface is running on a stand-alone HMD device, <code>false</code> if it isn't.
     */
    function isStandalone(): boolean;
    /**
     * Gets the number of CPUs.
     * @returns The number of CPUs.
     */
    function getNumCPUs(): number;
    /**
     * Gets the index number of the master CPU.
     * @returns The index of the master CPU.
     */
    function getMasterCPU(): number;
    /**
     * Gets the platform description of a CPU.
     * @example
     * <caption>Report details of the computer's CPUs.</caption>
    var numCPUs = PlatformInfo.getNumCPUs();
    print("Number of CPUs: " + numCPUs);
    for (var i = 0; i < numCPUs; i++) {
        var cpuDescription = PlatformInfo.getCPU(i);
        print("CPU " + i + ": " + cpuDescription);
    }
     * @param index - The index number of the CPU.
     * @returns The CPU's {@link PlatformInfo.CPUDescription|CPUDescription} information as a JSON string.
     */
    function getCPU(index: number): string;
    /**
     * Gets the number of GPUs.
     * @returns The number of GPUs.
     */
    function getNumGPUs(): number;
    /**
     * Gets the index number of the master GPU.
     * @returns The index of the master GPU.
     */
    function getMasterGPU(): number;
    /**
     * Gets the platform description of a GPU.
     * @example
     * <caption>Report details of the computer's GPUs.</caption>
    var numGPUs = PlatformInfo.getNumGPUs();
    print("Number of GPUs: " + numGPUs);
    for (var i = 0; i < numGPUs; i++) {
        var gpuDescription = PlatformInfo.getGPU(i);
        print("GPU " + i + ": " + gpuDescription);
    }
     * @param index - The index number of the GPU.
     * @returns The GPU's {@link PlatformInfo.GPUDescription|GPUDescription} information as a JSON string.
     */
    function getGPU(index: number): string;
    /**
     * Gets the number of displays.
     * @returns The number of displays.
     */
    function getNumDisplays(): number;
    /**
     * Gets the index number of the master display.
     * @returns The index of the master display.
     */
    function getMasterDisplay(): number;
    /**
     * Gets the platform description of a display.
     * @example
     * <caption>Report details of the systems's displays.</caption>
    var numDisplays = PlatformInfo.getNumDisplays();
    print("Number of displays: " + numDisplays);
    for (var i = 0; i < numDisplays; i++) {
        var displayDescription = PlatformInfo.getDisplay(i);
        print("Display " + i + ": " + displayDescription);
    }
     * @param index - The index number of the display.
     * @returns The display's {@link PlatformInfo.DisplayDescription|DisplayDescription} information as a JSON string.
     */
    function getDisplay(index: number): string;
    /**
     * Gets the platform description of computer memory.
     * @example
     * <caption>Report details of the computer's memory.</caption>
    print("Memory: " + PlatformInfo.getMemory());
     * @returns The computer's {@link PlatformInfo.MemoryDescription|MemoryDescription} information as a JSON string.
     */
    function getMemory(): string;
    /**
     * Gets the platform description of the computer.
     * @returns The {@link PlatformInfo.ComputerDescription|ComputerDescription} information as a JSON string.
     */
    function getComputer(): string;
    /**
     * Gets the complete description of the computer as a whole.
     * @returns The {@link PlatformInfo.PlatformDescription|PlatformDescription} information as a JSON string.
     */
    function getPlatform(): string;
    /**
     * Gets the platform tier of the computer, profiled at Interface start-up.
     * @example
     * <caption>Report the platform tier of the computer.</caption>
    var platformTier = PlatformInfo.getTierProfiled();
    var platformTierName = PlatformInfo.getPlatformTierNames()[platformTier];
    print("Platform tier: " + platformTier + ", " + platformTierName);
     * @returns The platform tier of the computer.
     */
    function getTierProfiled(): PlatformInfo.PlatformTier;
    /**
     * Gets the names of the possible platform tiers, per {@link PlatformInfo.PlatformTier}.
     * @returns The names of the possible platform tiers.
     */
    function getPlatformTierNames(): string[];
    /**
     * Gets whether the current hardware can use deferred rendering.
     * @returns <code>true</code> if the current hardware can use deferred rendering, <code>false</code> if it can't.
     */
    function isRenderMethodDeferredCapable(): boolean;
    /**
     * Information on the computer platform as a whole.
     */
    type PlatformDescription = {
        /**
         * Information on the computer.
         */
        computer: PlatformInfo.ComputerDescription;
        /**
         * Information on the computer's CPUs.
         */
        cpus: PlatformInfo.CPUDescription[];
        /**
         * Information on the computer's displays.
         */
        displays: PlatformInfo.DisplayDescription[];
        /**
         * Information on the computer's GPUs.
         */
        gpus: PlatformInfo.GPUDescription[];
        /**
         * Information on the computer's graphics APIs.
         */
        graphicsAPIs: PlatformInfo.GraphicsAPIDescription[];
        /**
         * Information on the computer's memory.
         */
        memory: PlatformInfo.MemoryDescription;
        /**
         * Information on the computer's network cards.
         */
        nics: PlatformInfo.NICDescription;
    };
    /**
     * Information on a CPU.
     */
    type CPUDescription = {
        /**
         * The CPU vendor (e.g., <code>"Intel"</code> or <code>"AMD"</code>).
         */
        vendor: string;
        /**
         * The CPU model.
         */
        model: string;
        /**
         * The number of logical cores.
         */
        numCores: number;
        /**
         * <code>true</code> if the CPU is the "master" or primary CPU, <code>false</code> or
         * <code>undefined</code> if it isn't.
         */
        isMaster: boolean;
    };
    /**
     * Information on a GPU.
     */
    type GPUDescription = {
        /**
         * The GPU vendor (e.g., <code>"NVIDIA"</code>, <code>"AMD"</code>, or <code>"Intel"</code>).
         */
        vendor: string;
        /**
         * The GPU model.
         */
        model: string;
        /**
         * The GPU driver version.
         */
        driver: string;
        /**
         * The size of the GPU's video memory, in MB.
         */
        videoMemory: number;
        /**
         * The index numbers of the displays currently being driven by the GPU. An empty array if
         * the GPU is currently not driving any displays.
         */
        displays: number[];
        /**
         * <code>true</code> if the GPU is the "master" or primary GPU, <code>false</code> or
         * <code>undefined</code> if it isn't.
         */
        isMaster: boolean;
    };
    /**
     * Information on a graphics API.
     */
    type GraphicsAPIDescription = {
        /**
         * The name of the graphics API.
         */
        name: string;
        /**
         * The version of the graphics API.
         */
        version: string;
        /**
         * If an OpenGL API, then the graphics card that performs the rendering.
         */
        renderer?: string;
        /**
         * If an OpenGL API, then the OpenGL vendor.
         */
        vendor?: string;
        /**
         * If an OpenGL API, then the shading language version.
         */
        shadingLanguageVersion?: string;
        /**
         * If an OpenGL API, then the list of OpenGL extensions supported.
         */
        extensions?: string[];
        /**
         * If a Vulkan API, then the devices provided in the API.
         */
        devices?: PlatformInfo.VulkanAPIDescription[];
    };
    /**
     * Information on a Vulkan graphics API.
     */
    type VulkanAPIDescription = {
        /**
         * The driver version.
         */
        driverVersion: string;
        /**
         * The API version.
         */
        apiVersion: string;
        /**
         * The device type.
         */
        deviceType: string;
        /**
         * The device vendor.
         */
        vendor: string;
        /**
         * The device name.
         */
        name: string;
        /**
         * The list of Vulkan extensions supported.
         */
        extensions: string[];
        /**
         * The Vulkan queues available.
         */
        queues: PlatformInfo.VulkanQueueDescription[];
        /**
         * The Vulkan heaps available.
         */
        heaps: PlatformInfo.VulkanHeapDescription[];
    };
    /**
     * Information on a Vulkan queue.
     */
    type VulkanQueueDescription = {
        /**
         * The Vulkan queue flags.
         */
        flags: string;
        /**
         * The queue count.
         */
        count: number;
    };
    /**
     * Information on a Vulkan heap.
     */
    type VulkanHeapDescription = {
        /**
         * The Vulkan heap flags.
         */
        flags: string;
        /**
         * The heap size.
         */
        size: number;
    };
    /**
     * Information on a network card.
     */
    type NICDescription = {
        /**
         * The name of the network card.
         */
        name: string;
        /**
         * The MAC address of the network card.
         */
        mac: string;
    };
    /**
     * Information on a display.
     */
    type DisplayDescription = {
        /**
         * The display's description.
         */
        description: string;
        /**
         * The display's device name.
         */
        deviceName: string;
        /**
         * The pixel coordinate of the left edge of the display (e.g., <code>0</code>).
         */
        boundsLeft: number;
        /**
         * The pixel coordinate of the right edge of the display (e.g., <code>1920</code>).
         */
        boundsRight: number;
        /**
         * The pixel coordinate of the top edge of the display (e.g., <code>0</code>).
         */
        boundsTop: number;
        /**
         * The pixel coordinate of the bottom edge of the display (e.g., <code>1080</code>).
         */
        boundsBottom: number;
        /**
         * The index number of the GPU that's driving the display.
         */
        gpu: number;
        /**
         * The physical dots per inch of the display.
         */
        ppi: number;
        /**
         * The logical dots per inch of the desktop as used by the operating system.
         */
        ppiDesktop: number;
        /**
         * The physical width of the display, in inches.
         */
        physicalWidth: number;
        /**
         * The physical height of the display, in inches.
         */
        physicalHeight: number;
        /**
         * The refresh rate of the current display mode, in Hz.
         */
        modeRefreshrate: number;
        /**
         * The width of the current display mode, in pixels.
         */
        modeWidth: number;
        /**
         * The height of the current display mode, in pixels.
         */
        modeHeight: number;
        /**
         * <code>true</code> if the GPU is the "master" or primary display, <code>false</code> or
         * <code>undefined</code> if it isn't.
         */
        isMaster: boolean;
    };
    /**
     * Information on the computer's memory.
     */
    type MemoryDescription = {
        /**
         * The total amount of usable physical memory, in MB.
         */
        memTotal: number;
    };
    /**
     * Information on the computer.
     */
    type ComputerDescription = {
        /**
         * The operating system.
         */
        OS: PlatformInfo.ComputerOS;
        /**
         * The operating system version.
         */
        OSversion: string;
        /**
         * The computer vendor.
         */
        vendor: string;
        /**
         * The computer model.
         */
        model: string;
        /**
         * The platform tier of the computer, profiled at Interface start-up.
         */
        profileTier: PlatformInfo.PlatformTier;
    };
    /**
     * <p>The computer operating system.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"WINDOWS"</code></td><td>Windows.</td></tr>
        <tr><td><code>"MACOS"</code></td><td>Mac OS.</td></tr>
        <tr><td><code>"LINUX"</code></td><td>Linux.</td></tr>
        <tr><td><code>"ANDROID"</code></td><td>Android.</td></tr>
      </tbody>
    </table>
     */
    type ComputerOS = string;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Rates</code> API provides some information on current rendering performance.
 * @example
 * <caption>Report current rendering rates.</caption>
// The rates to report.
var rates = [
    "render",
    "present",
    "newFrame",
    "dropped",
    "simulation"
];

// Report the rates.
for (var i = 0; i < rates.length; i++) {
    print("Rates." + rates[i], "=", Rates[rates[i]]);
}
 *
 * @property render - The rate at which new GPU frames are being created, in Hz.
    <em>Read-only.</em>
 * @property present - The rate at which the display plugin is presenting to the display device, in Hz.
    <em>Read-only.</em>
 * @property newFrame - The rate at which the display plugin is presenting new GPU frames, in Hz.
    <em>Read-only.</em>
 * @property dropped - The rate at which the display plugin is dropping GPU frames, in Hz.
    <em>Read-only.</em>
 * @property simulation - The rate at which the game loop is running, in Hz.
    <em>Read-only.</em>
 */
declare namespace Rates { }

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Render</code> API enables you to configure the graphics engine.
 * @property renderMethod - The render method being used.
 * @property shadowsEnabled - <code>true</code> if shadows are enabled, <code>false</code> if they're disabled.
 * @property ambientOcclusionEnabled - <code>true</code> if ambient occlusion is enabled, <code>false</code> if it's
    disabled.
 * @property antialiasingMode - The active anti-aliasing mode.
 * @property viewportResolutionScale - The view port resolution scale, <code>&gt; 0.0</code>.
 */
declare namespace Render {
    /**
     * <p>The rendering method is specified by the following values:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>DEFERRED</td><td>More complex rendering pipeline where lighting is applied to the
          scene as a whole after all objects have been rendered.</td></tr>
        <tr><td><code>1</code></td><td>FORWARD</td><td>Simpler rendering pipeline where each object in the scene, in turn,
          is rendered and has lighting applied.</td></tr>
      </tbody>
    </table>
     */
    type RenderMethod = number;
    /**
     * Gets the configuration for a rendering job by name.
    <p><strong>Warning:</strong> For internal, debugging purposes. Subject to change.</p>
     * @param name - The name of the rendering job.
     * @returns The configuration for the rendering job.
     */
    function getConfig(name: string): any;
    /**
     * Gets the render method being used.
     * @example
     * <caption>Report the current render method.</caption>
    var renderMethod = Render.getRenderMethod();
    print("Current render method: " + Render.getRenderMethodNames()[renderMethod]);
     * @returns The render method being used.
     */
    function getRenderMethod(): Render.RenderMethod;
    /**
     * Sets the render method to use.
     * @param renderMethod - The render method to use.
     */
    function setRenderMethod(renderMethod: Render.RenderMethod): void;
    /**
     * Gets the names of the possible render methods, per {@link Render.RenderMethod}.
     * @example
     * <caption>Report the names of the possible render methods.</caption>
    var renderMethods = Render.getRenderMethodNames();
    print("Render methods:");
    for (var i = 0; i < renderMethods.length; i++) {
        print("- " + renderMethods[i]);
    }
     * @returns The names of the possible render methods.
     */
    function getRenderMethodNames(): string[];
    /**
     * Gets whether or not shadows are enabled.
     * @returns <code>true</code> if shadows are enabled, <code>false</code> if they're disabled.
     */
    function getShadowsEnabled(): boolean;
    /**
     * Sets whether or not shadows are enabled.
     * @param enabled - <code>true</code> to enable shadows, <code>false</code> to disable.
     */
    function setShadowsEnabled(enabled: boolean): void;
    /**
     * Gets whether or not ambient occlusion is enabled.
     * @returns <code>true</code> if ambient occlusion is enabled, <code>false</code> if it's disabled.
     */
    function getAmbientOcclusionEnabled(): boolean;
    /**
     * Sets whether or not ambient occlusion is enabled.
     * @param enabled - <code>true</code> to enable ambient occlusion, <code>false</code> to disable.
     */
    function setAmbientOcclusionEnabled(enabled: boolean): void;
    /**
     * Gets the active anti-aliasing mode.
     * @returns The active anti-aliasing mode.
     */
    function getAntialiasingMode(): AntialiasingMode;
    /**
     * Sets the active anti-aliasing mode.
     * @param The - active anti-aliasing mode.
     */
    function setAntialiasingMode(The: AntialiasingMode): void;
    /**
     * Gets the view port resolution scale.
     * @returns The view port resolution scale, <code>&gt; 0.0</code>.
     */
    function getViewportResolutionScale(): number;
    /**
     * Sets the view port resolution scale.
     * @param resolutionScale - The view port resolution scale to set, <code>&gt; 0.0</code>.
     */
    function setViewportResolutionScale(resolutionScale: number): void;
    /**
     * Returns the list of screens
     * @returns The names of the available screens
     */
    function getScreens(): string[];
    /**
     * Gets the screen used when switching to full screen mode
     * @returns The name of the screen used for full screen mode
     */
    function getFullScreenScreen(): string;
    /**
     * Sets the screen used when switching to full screen mode
    This function will only succeed if the name passed is one of the entries from Render.getScreens.
    Otherwise, it will return False and have no effect.
     * @returns True if the setting was successful
     */
    function setFullScreenScreen(): boolean;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Selection</code> API provides a means of grouping together and highlighting avatars and entities in named lists.
 * @example
 * <caption>Outline an entity when it is grabbed by the mouse or a controller.</caption>
// Create an entity and copy the following script into the entity's "Script URL" field.
// Move the entity behind another entity to see the occluded outline.
(function () {
    var LIST_NAME = "SelectionExample",
        ITEM_TYPE = "entity",
        HIGHLIGHT_STYLE = {
            outlineUnoccludedColor: { red: 0, green: 180, blue: 239 },
            outlineUnoccludedAlpha: 0.5,
            outlineOccludedColor: { red: 239, green: 180, blue: 0 },
            outlineOccludedAlpha: 0.5,
            outlineWidth: 4
        };

    Selection.enableListHighlight(LIST_NAME, HIGHLIGHT_STYLE);

    this.startNearGrab = function (entityID) {
        Selection.addToSelectedItemsList(LIST_NAME, ITEM_TYPE, entityID);
    };

    this.startDistanceGrab = function (entityID) {
        Selection.addToSelectedItemsList(LIST_NAME, ITEM_TYPE, entityID);
    };

    this.releaseGrab = function (entityID) {
        Selection.removeFromSelectedItemsList(LIST_NAME, ITEM_TYPE, entityID);
    };

    Script.scriptEnding.connect(function () {
        Selection.removeListFromMap(LIST_NAME);
    });
});
 */
declare namespace Selection {
    /**
     * <p>The type of a specific item in a selection list.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"avatar"</code></td><td>The item is an avatar.</td></tr>
        <tr><td><code>"entity"</code></td><td>The item is an entity.</td></tr>
      </tbody>
    </table>
     */
    type ItemType = string;
    /**
     * A selection list.
     */
    type SelectedItemsList = {
        /**
         * The IDs of the avatars in the selection list.
         */
        avatars: Uuid[];
        /**
         * The IDs of the entities in the selection list.
         */
        entities: Uuid[];
    };
    /**
     * The highlighting style of a selection list.
     */
    type HighlightStyle = {
        /**
         * Unoccluded outline color.
         * @defaultValue 255,178,51
         */
        outlineUnoccludedColor: Color;
        /**
         * Occluded outline color.
         * @defaultValue 255,178,51
         */
        outlineOccludedColor: Color;
        /**
         * Unoccluded fill color.
         * @defaultValue 51,178,255
         */
        fillUnoccludedColor: Color;
        /**
         * Occluded fill color.
         * @defaultValue 51,178,255
         */
        fillOccludedColor: Color;
        /**
         * Unoccluded outline alpha, range <code>0.0</code> &ndash; <code>1.0</code>.
         * @defaultValue 0.9
         */
        outlineUnoccludedAlpha: number;
        /**
         * Occluded outline alpha, range <code>0.0</code> &ndash; <code>1.0</code>.
         * @defaultValue 0.9
         */
        outlineOccludedAlpha: number;
        /**
         * Unoccluded fill alpha, range <code>0.0</code> &ndash; <code>1.0</code>.
         * @defaultValue 0.0
         */
        fillUnoccludedAlpha: number;
        /**
         * Occluded fill alpha, range <code>0.0</code> &ndash; <code>1.0</code>.
         * @defaultValue 0.0
         */
        fillOccludedAlpha: number;
        /**
         * Width of the outline, in pixels.
         * @defaultValue 2
         */
        outlineWidth: number;
        /**
         * <code>true</code> to fade the outside edge of the outline, <code>false</code>
         * to have a sharp edge.
         */
        isOutlineSmooth: boolean;
    };
    /**
     * Gets the names of all current selection lists.
     * @example
     * <caption>List all the current selection lists.</caption>
    print("Selection lists: " + Selection.getListNames());
     * @returns The names of all current selection lists.
     */
    function getListNames(): string[];
    /**
     * Deletes a selection list.
     * @param listName - The name of the selection list to delete.
     * @returns <code>true</code> if the selection existed and was successfully removed, otherwise <code>false</code>.
     */
    function removeListFromMap(listName: string): boolean;
    /**
     * Adds an item to a selection list. The list is created if it doesn't exist.
     * @param listName - The name of the selection list to add the item to.
     * @param itemType - The type of item being added.
     * @param itemID - The ID of the item to add.
     * @returns <code>true</code> if the item was successfully added or already existed in the list, otherwise
        <code>false</code>.
     */
    function addToSelectedItemsList(listName: string, itemType: Selection.ItemType, itemID: Uuid): boolean;
    /**
     * Removes an item from a selection list.
     * @param listName - The name of the selection list to remove the item from.
     * @param itemType - The type of item being removed.
     * @param itemID - The ID of the item to remove.
     * @returns <code>true</code> if the item was successfully removed or was not in the list, otherwise
        <code>false</code>.
     */
    function removeFromSelectedItemsList(listName: string, itemType: Selection.ItemType, itemID: Uuid): boolean;
    /**
     * Removes all items from a selection list.
     * @param listName - The name of the selection list.
     * @returns <code>true</code> always.
     */
    function clearSelectedItemsList(listName: string): boolean;
    /**
     * Prints the list of avatars and entities in a selection to the program log (but not the Script Log window).
     * @param listName - The name of the selection list.
     */
    function printList(listName: string): void;
    /**
     * Gets the list of avatars and entities in a selection list.
     * @param listName - The name of the selection list.
     * @returns The content of the selection list if the list exists, otherwise an empty object.
     */
    function getSelectedItemsList(listName: string): Selection.SelectedItemsList;
    /**
     * Gets the names of all current selection lists that have highlighting enabled.
     * @returns The names of the selection lists that currently have highlighting enabled.
     */
    function getHighlightedListNames(): string[];
    /**
     * Enables highlighting for a selection list. All items in or subsequently added to the list are displayed with the
    highlight effect specified. The method can be called multiple times with different values in the style to modify the
    highlighting.
    <p>Note: This function implicitly calls {@link Selection.enableListToScene|enableListToScene}.</p>
     * @param listName - The name of the selection list.
     * @param highlightStyle - The highlight style.
     * @returns <code>true</code> always.
     */
    function enableListHighlight(listName: string, highlightStyle: Selection.HighlightStyle): boolean;
    /**
     * Disables highlighting for a selection list.
    <p>Note: This function implicitly calls {@link Selection.disableListToScene|disableListToScene}.</p>
     * @param listName - The name of the selection list.
     * @returns <code>true</code> always.
     */
    function disableListHighlight(listName: string): boolean;
    /**
     * Enables scene selection for a selection list. All items in or subsequently added to the list are sent to a scene
    selection in the rendering engine for debugging purposes.
     * @param listName - The name of the selection list.
     * @returns <code>true</code> always.
     */
    function enableListToScene(listName: string): boolean;
    /**
     * Disables scene selection for a selection list.
     * @param listName - The name of the selection list.
     * @returns <code>true</code> always.
     */
    function disableListToScene(listName: string): boolean;
    /**
     * Gets the current highlighting style for a selection list.
     * @param listName - The name of the selection list.
     * @returns The highlight style of the selection list if the list exists and highlighting is
        enabled, otherwise an empty object.
     */
    function getListHighlightStyle(listName: string): Selection.HighlightStyle;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Settings</code> API provides a facility to store and retrieve values that persist between Interface runs.
 */
declare namespace Settings {
    /**
     * Retrieves the value from a named setting.
     * @example
     * <caption>Retrieve non-existent setting values.</caption>
    var value1 = Settings.getValue("Script Example/Nonexistent Key");
    print("Value: " + (Class<value1) + " " + JSON.stringify(value1));  // string ""
    
    var value2 = Settings.getValue("Script Example/Nonexistent Key", true);
    print("Value: " + (Class<value2) + " " + JSON.stringify(value2));  // boolean true
    />>
     * @param key - The name of the setting.
     * @param [defaultValue = ""] - The value to return if the setting doesn't exist.
     * @returns The value stored in the named setting if it exists, otherwise the
        <code>defaultValue</code>.
     */
    function getValue(key: string, defaultValue?: string | number | boolean | any): string | number | boolean | any;
    /**
     * Stores a value in a named setting. If the setting already exists, its value is overwritten. If the value is
    <code>null</code> or <code>undefined</code>, the setting is deleted.
     * @example
     * <caption>Store and retrieve an object value.</caption>
    Settings.setValue("Script Example/My Key", { x: 0, y: 10, z: 0 });
    
    var value = Settings.getValue("Script Example/My Key");
    print("Value: " + (Class<value) + " " + JSON.stringify(value));  // object {"x":0,"y":10,"z":0>}
     *
     * @param key - The name of the setting. Be sure to use a unique name if creating a new setting.
     * @param value - The value to store in the setting. If <code>null</code> or
        <code>undefined</code> is specified, the setting is deleted.
     */
    function setValue(key: string, value: string | number | boolean | any | undefined): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Window</code> API provides various facilities not covered elsewhere, including: window dimensions, window focus,
camera view, announcements, user connections, common dialog boxes, snapshots, file import, domain navigation, domain changes,
domain physics, OS clipboard, build number.
 * @property innerWidth - The width of the drawable area of the Interface window (i.e., without borders or other
    chrome), in pixels. <em>Read-only.</em>
 * @property innerHeight - The height of the drawable area of the Interface window (i.e., without borders or other
    chrome), in pixels. <em>Read-only.</em>
 * @property x - The x display coordinate of the top left corner of the drawable area of the Interface window.
    <em>Read-only.</em>
 * @property y - The y display coordinate of the top left corner of the drawable area of the Interface window.
    <em>Read-only.</em>
 * @property interstitialModeEnabled - <code>true</code> if the interstitial graphics are displayed when a
    domain is loading, otherwise <code>false</code>.
 * @property location - Provides facilities for working with your current directory services location.
 */
declare namespace Window {
    /**
     * <p>The buttons that may be included in a message box created by {@link Window.openMessageBox|openMessageBox} are defined by
    numeric values:
    <table>
      <thead>
        <tr>
          <th>Button</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr> <td><strong>NoButton</strong></td> <td><code>0x0</code></td> <td>An invalid button.</td> </tr>
        <tr> <td><strong>Ok</strong></td> <td><code>0x400</code></td> <td>"OK"</td> </tr>
        <tr> <td><strong>Save</strong></td> <td><code>0x800</code></td> <td>"Save"</td> </tr>
        <tr> <td><strong>SaveAll</strong></td> <td><code>0x1000</code></td> <td>"Save All"</td> </tr>
        <tr> <td><strong>Open</strong></td> <td><code>0x2000</code></td> <td>"Open"</td> </tr>
        <tr> <td><strong>Yes</strong></td> <td><code>0x4000</code></td> <td>"Yes"</td> </tr>
        <tr> <td><strong>YesToAll</strong></td> <td><code>0x8000</code></td> <td>"Yes to All"</td> </tr>
        <tr> <td><strong>No</strong></td> <td><code>0x10000</code></td> <td>"No"</td> </tr>
        <tr> <td><strong>NoToAll</strong></td> <td><code>0x20000</code></td> <td>"No to All"</td> </tr>
        <tr> <td><strong>Abort</strong></td> <td><code>0x40000</code></td> <td>"Abort"</td> </tr>
        <tr> <td><strong>Retry</strong></td> <td><code>0x80000</code></td> <td>"Retry"</td> </tr>
        <tr> <td><strong>Ignore</strong></td> <td><code>0x100000</code></td> <td>"Ignore"</td> </tr>
        <tr> <td><strong>Close</strong></td> <td><code>0x200000</code></td> <td>"Close"</td> </tr>
        <tr> <td><strong>Cancel</strong></td> <td><code>0x400000</code></td> <td>"Cancel"</td> </tr>
        <tr> <td><strong>Discard</strong></td> <td><code>0x800000</code></td> <td>"Discard" or "Don't Save"</td> </tr>
        <tr> <td><strong>Help</strong></td> <td><code>0x1000000</code></td> <td>"Help"</td> </tr>
        <tr> <td><strong>Apply</strong></td> <td><code>0x2000000</code></td> <td>"Apply"</td> </tr>
        <tr> <td><strong>Reset</strong></td> <td><code>0x4000000</code></td> <td>"Reset"</td> </tr>
        <tr> <td><strong>RestoreDefaults</strong></td> <td><code>0x8000000</code></td> <td>"Restore Defaults"</td> </tr>
      </tbody>
    </table>
     */
    type MessageBoxButton = number;
    /**
     * Checks whether the Interface window has focus.
     * @returns <code>true</code> if the Interface window has focus, <code>false</code> if it doesn't.
     */
    function hasFocus(): boolean;
    /**
     * Makes the Interface window have focus. On Windows, if Interface doesn't already have focus, the task bar icon flashes to
    indicate that Interface wants attention but focus isn't taken away from the application that the user is using.
     */
    function setFocus(): void;
    /**
     * Raises the Interface window if it is minimized. If raised, the window gains focus.
     */
    function raise(): void;
    /**
     * Displays a dialog with the specified message and an "OK" button. The dialog is non-modal; the script continues without
    waiting for a user response.
     * @example
     * <caption>Display a friendly greeting.</caption>
    Window.alert("Welcome!");
    print("Script continues without waiting");
     * @param [message = ""] - The message to display.
     */
    function alert(message?: string): void;
    /**
     * Prompts the user to confirm something. Displays a modal dialog with a message plus "Yes" and "No" buttons.
     * @example
     * <caption>Ask the user a question requiring a yes/no answer.</caption>
    var answer = Window.confirm("Are you sure?");
    print(answer);  // true or false
     * @param [message = ""] - The question to display.
     * @returns <code>true</code> if the user selects "Yes", otherwise <code>false</code>.
     */
    function confirm(message?: string): boolean;
    /**
     * Prompts the user to enter some text. Displays a modal dialog with a message and a text box, plus "OK" and "Cancel"
    buttons.
     * @example
     * <caption>Ask the user a question requiring a text answer.</caption>
    var answer = Window.prompt("Question", "answer");
    if (answer === null) {
        print("User canceled");
    } else {
        print("User answer: " + answer);
    }
     * @param message - The question to display.
     * @param defaultText - The default answer text.
     * @returns The text that the user entered if they select "OK", otherwise null.
     */
    function prompt(message: string, defaultText: string): string;
    /**
     * Prompts the user to enter some text. Displays a non-modal dialog with a message and a text box, plus "OK" and "Cancel"
    buttons. A {@link Window.promptTextChanged|promptTextChanged} signal is emitted when the user OKs the dialog; no signal
    is emitted if the user cancels the dialog.
     * @example
     * <caption>Ask the user a question requiring a text answer without waiting for the answer.</caption>
    function onPromptTextChanged(text) {
        print("User answer: " + text);
    }
    Window.promptTextChanged.connect(onPromptTextChanged);
    
    Window.promptAsync("Question", "answer");
    print("Script continues without waiting");
     * @param [message = ""] - The question to display.
     * @param [defaultText = ""] - The default answer text.
     */
    function promptAsync(message?: string, defaultText?: string): void;
    /**
     * Prompts the user to choose a directory. Displays a modal dialog that navigates the directory tree.
     * @example
     * <caption>Ask the user to choose a directory.</caption>
    var directory = Window.browseDir("Select Directory", Paths.resources);
    print("Directory: " + directory);
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @returns The path of the directory if one is chosen, otherwise <code>null</code>.
     */
    function browseDir(title?: string, directory?: string): string;
    /**
     * Prompts the user to choose a directory. Displays a non-modal dialog that navigates the directory tree. A
    {@link Window.browseDirChanged|browseDirChanged} signal is emitted when a directory is chosen; no signal is emitted if
    the user cancels the dialog.
     * @example
     * <caption>Ask the user to choose a directory without waiting for the answer.</caption>
    function onBrowseDirChanged(directory) {
        print("Directory: " + directory);
    }
    Window.browseDirChanged.connect(onBrowseDirChanged);
    
    Window.browseDirAsync("Select Directory", Paths.resources);
    print("Script continues without waiting");
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     */
    function browseDirAsync(title?: string, directory?: string): void;
    /**
     * Prompts the user to choose a file. Displays a modal dialog that navigates the directory tree.
     * @example
     * <caption>Ask the user to choose an image file.</caption>
    var filename = Window.browse("Select Image File", Paths.resources, "Images (*.png *.jpg *.svg)");
    print("File: " + filename);
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @param [nameFilter = ""] - The types of files to display. Examples: <code>"*.json"</code> and
        <code>"Images (*.png *.jpg *.svg)"</code>. All files are displayed if a filter isn't specified.
     * @returns The path and name of the file if one is chosen, otherwise <code>null</code>.
     */
    function browse(title?: string, directory?: string, nameFilter?: string): string;
    /**
     * Prompts the user to choose a file. Displays a non-modal dialog that navigates the directory tree. A
    {@link Window.browseChanged|browseChanged} signal is emitted when a file is chosen; no signal is emitted if the user
    cancels the dialog.
     * @example
     * <caption>Ask the user to choose an image file without waiting for the answer.</caption>
    function onBrowseChanged(filename) {
        print("File: " + filename);
    }
    Window.browseChanged.connect(onBrowseChanged);
    
    Window.browseAsync("Select Image File", Paths.resources, "Images (*.png *.jpg *.svg)");
    print("Script continues without waiting");
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @param [nameFilter = ""] - The types of files to display. Examples: <code>"*.json"</code> and
        <code>"Images (*.png *.jpg *.svg)"</code>. All files are displayed if a filter isn't specified.
     */
    function browseAsync(title?: string, directory?: string, nameFilter?: string): void;
    /**
     * Prompts the user to specify the path and name of a file to save to. Displays a modal dialog that navigates the directory
    tree and allows the user to type in a file name.
     * @example
     * <caption>Ask the user to specify a file to save to.</caption>
    var filename = Window.save("Save to JSON file", Paths.resources, "*.json");
    print("File: " + filename);
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @param [nameFilter = ""] - The types of files to display. Examples: <code>"*.json"</code> and
        <code>"Images (*.png *.jpg *.svg)"</code>. All files are displayed if a filter isn't specified.
     * @returns The path and name of the file if one is specified, otherwise <code>null</code>. If a single file type
        is specified in the nameFilter, that file type extension is automatically appended to the result when appropriate.
     */
    function save(title?: string, directory?: string, nameFilter?: string): string;
    /**
     * Prompts the user to specify the path and name of a file to save to. Displays a non-modal dialog that navigates the
    directory tree and allows the user to type in a file name. A {@link Window.saveFileChanged|saveFileChanged} signal is
    emitted when a file is specified; no signal is emitted if the user cancels the dialog.
     * @example
     * <caption>Ask the user to specify a file to save to without waiting for an answer.</caption>
    function onSaveFileChanged(filename) {
        print("File: " + filename);
    }
    Window.saveFileChanged.connect(onSaveFileChanged);
    
    Window.saveAsync("Save to JSON file", Paths.resources, "*.json");
    print("Script continues without waiting");
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @param [nameFilter = ""] - The types of files to display. Examples: <code>"*.json"</code> and
        <code>"Images (*.png *.jpg *.svg)"</code>. All files are displayed if a filter isn't specified.
     */
    function saveAsync(title?: string, directory?: string, nameFilter?: string): void;
    /**
     * Prompts the user to choose an Asset Server item. Displays a modal dialog that navigates the tree of assets on the Asset
    Server.
     * @example
     * <caption>Ask the user to select an FBX asset.</caption>
    var asset = Window.browseAssets("Select FBX File", "/", "*.fbx");
    print("FBX file: " + asset);
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @param [nameFilter = ""] - The types of files to display. Examples: <code>"*.json"</code> and
        <code>"Images (*.png *.jpg *.svg)"</code>. All files are displayed if a filter isn't specified.
     * @returns The path and name of the asset if one is chosen, otherwise <code>null</code>.
     */
    function browseAssets(title?: string, directory?: string, nameFilter?: string): string;
    /**
     * Prompts the user to choose an Asset Server item. Displays a non-modal dialog that navigates the tree of assets on the
    Asset Server. An {@link Window.assetsDirChanged|assetsDirChanged} signal is emitted when an asset is chosen; no signal is
    emitted if the user cancels the dialog.
     * @example
     * function onAssetsDirChanged(asset) {
        print("FBX file: " + asset);
    }
    Window.assetsDirChanged.connect(onAssetsDirChanged);
    
    Window.browseAssetsAsync("Select FBX File", "/", "*.fbx");
    print("Script continues without waiting");
     * @param [title = ""] - The title to display at the top of the dialog.
     * @param [directory = ""] - The initial directory to start browsing at.
     * @param [nameFilter = ""] - The types of files to display. Examples: <code>"*.json"</code> and
        <code>"Images (*.png *.jpg *.svg)"</code>. All files are displayed if a filter isn't specified.
     */
    function browseAssetsAsync(title?: string, directory?: string, nameFilter?: string): void;
    /**
     * Opens the Asset Browser dialog. If a file to upload is specified, the user is prompted to enter the folder and name to
    map the file to on the asset server.
     * @example
     * <caption>Upload a file to the asset server.</caption>
    var filename = Window.browse("Select File to Add to Asset Server", Paths.resources);
    print("File: " + filename);
    Window.showAssetServer(filename);
     * @param [uploadFile = ""] - The path and name of a file to upload to the asset server.
     */
    function showAssetServer(uploadFile?: string): void;
    /**
     * Gets Interface's build number.
     * @returns Interface's build number.
     */
    function checkVersion(): string;
    /**
     * Gets Interface's user agent.
     * @returns Interface's user agent.
     */
    function getUserAgent(): string;
    /**
     * Gets the signature for Interface's protocol version.
     * @returns A string uniquely identifying the version of the directory services protocol that Interface is using.
     */
    function protocolSignature(): string;
    /**
     * Copies text to the operating system's clipboard.
     * @param text - The text to copy to the operating system's clipboard.
     */
    function copyToClipboard(text: string): void;
    /**
     * Takes a snapshot of the current Interface view from the primary camera. When a still image only is captured,
    {@link Window.stillSnapshotTaken|stillSnapshotTaken} is emitted; when a still image plus moving images are captured,
    {@link Window.processingGifStarted|processingGifStarted} and {@link Window.processingGifCompleted|processingGifCompleted}
    are emitted.
    <p>Snapshots are saved to the path specified in Settings &gt; General &gt; Snapshots, which can be accessed via the
    {@link Snapshot} API.</p>
     * @example
     * <caption>Using the snapshot function and signals.</caption>
    function onStillSnapshotTaken(path, notify) {
        print("Still snapshot taken: " + path);
        print("Notify: " + notify);
    }
    
    function onProcessingGifStarted(stillPath) {
        print("Still snapshot taken: " + stillPath);
    }
    
    function onProcessingGifCompleted(animatedPath) {
        print("Animated snapshot taken: " + animatedPath);
    }
    
    Window.stillSnapshotTaken.connect(onStillSnapshotTaken);
    Window.processingGifStarted.connect(onProcessingGifStarted);
    Window.processingGifCompleted.connect(onProcessingGifCompleted);
    
    var notify = true;
    var animated = true;
    var aspect = 1920 / 1080;
    var filename = "example-snapshot";
    Window.takeSnapshot(notify, animated, aspect, filename);
     * @param [notify = true] - This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}
        signal.
     * @param [includeAnimated = false] - If <code>true</code>, a moving image is captured as an animated GIF in addition
        to a still image.
     * @param [aspectRatio = 0] - The width/height ratio of the snapshot required. If the value is <code>0</code>, the
        full resolution is used (window dimensions in desktop mode; HMD display dimensions in HMD mode), otherwise one of the
        dimensions is adjusted in order to match the aspect ratio.
     * @param [filename = ""] - If a filename is not provided, the image is saved as "overte-snap-by-&lt;user
        name&gt;-on-YYYY-MM-DD_HH-MM-SS".
        <p>Still images are saved in JPEG, PNG or WEBP format according to the extension provided &mdash; <code>".jpg"</code>,
        <code>".jpeg"</code>, <code>".png"</code>, or <code>".webp"</code> &mdash; or if not provided then in the format chosen in general settings,
        Default is PNG. Animated images are saved in GIF format.</p>
     */
    function takeSnapshot(notify?: boolean, includeAnimated?: boolean, aspectRatio?: number, filename?: string): void;
    /**
     * Takes a still snapshot of the current view from the secondary camera that can be set up through the {@link Render} API.
    <p>Snapshots are saved to the path specified in Settings &gt; General &gt; Snapshots, which can be accessed via the
    {@link Snapshot} API.</p>
     * @param [notify = true] - This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}
        signal.
     * @param [filename = ""] - If a filename is not provided, the image is saved as "overte-snap-by-&lt;user
        name&gt;-on-YYYY-MM-DD_HH-MM-SS".
        <p>Still images are saved in JPEG, PNG or WEBP format according to the extension provided &mdash; <code>".jpg"</code>,
        <code>".jpeg"</code>, <code>".png"</code>, or <code>".webp"</code> &mdash; or if not provided then in the format chosen in general settings,
        Default is PNG. Animated images are saved in GIF format.</p>
     */
    function takeSecondaryCameraSnapshot(notify?: boolean, filename?: string): void;
    /**
     * Takes a 360&deg; snapshot at a given position for the secondary camera. The secondary camera does not need to have been
        set up.
    <p>Snapshots are saved to the path specified in Settings &gt; General &gt; Snapshots, which can be accessed via the
    {@link Snapshot} API.</p>
     * @param cameraPosition - The position of the camera for the snapshot.
     * @param [cubemapOutputFormat = false] - If <code>true</code> then the snapshot is saved as a cube map image,
        otherwise it is saved as an equirectangular image.
     * @param [notify = true] - This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}
        signal.
     * @param [filename = ""] - If a filename is not provided, the image is saved as "overte-snap-by-&lt;user
        name&gt;-on-YYYY-MM-DD_HH-MM-SS".
        <p>Still images are saved in JPEG, PNG or WEBP format according to the extension provided &mdash; <code>".jpg"</code>,
        <code>".jpeg"</code>, <code>".png"</code>, or <code>".webp"</code> &mdash; or if not provided then in the format chosen in general settings,
        Default is PNG. Animated images are saved in GIF format.</p>
     */
    function takeSecondaryCamera360Snapshot(cameraPosition: TVec3, cubemapOutputFormat?: boolean, notify?: boolean, filename?: string): void;
    /**
     * Emits a {@link Window.connectionAdded|connectionAdded} or a {@link Window.connectionError|connectionError} signal that
    indicates whether or not a user connection was successfully made using the Web API.
     * @param success - If <code>true</code> then {@link Window.connectionAdded|connectionAdded} is emitted, otherwise
        {@link Window.connectionError|connectionError} is emitted.
     * @param description - Descriptive text about the connection success or error. This is sent in the signal emitted.
     */
    function makeConnection(success: boolean, description: string): void;
    /**
     * Displays a notification message. Notifications are displayed in panels by the default script, nofications.js. An
    {@link Window.announcement|announcement} signal is emitted when this function is called.
     * @example
     * <caption>Send and capture an announcement message.</caption>
    function onAnnouncement(message) {
        // The message is also displayed as a notification by notifications.js.
        print("Announcement: " + message);
    }
    Window.announcement.connect(onAnnouncement);
    
    Window.displayAnnouncement("Hello");
     * @param message - The announcement message.
     */
    function displayAnnouncement(message: string): void;
    /**
     * Prepares a snapshot ready for sharing. A {@link Window.snapshotShared|snapshotShared} signal is emitted when the snapshot
    has been prepared.
     * @param path - The path and name of the image file to share.
     * @param [href = ""] - The directory services location where the snapshot was taken.
     */
    function shareSnapshot(path: string, href?: string): void;
    /**
     * Checks to see if physics is active for you in the domain you're visiting - there is a delay between your arrival at a
    domain and physics becoming active for you in that domain.
     * @example
     * <caption>Wait for physics to be enabled when you change domains.</caption>
    function checkForPhysics() {
        var isPhysicsEnabled = Window.isPhysicsEnabled();
        print("Physics enabled: " + isPhysicsEnabled);
        if (!isPhysicsEnabled) {
            Script.setTimeout(checkForPhysics, 1000);
        }
    }
    
    function onDomainChanged(domain) {
        print("Domain changed: " + domain);
        Script.setTimeout(checkForPhysics, 1000);
    }
    
    Window.domainChanged.connect(onDomainChanged);
     * @returns <code>true</code> if physics is currently active for you, otherwise <code>false</code>.
     */
    function isPhysicsEnabled(): boolean;
    /**
     * Sets what to show on the PC display. For entity camera view, the entity camera is configured using
    {@link Camera.setCameraEntity} and {@link Camera|Camera.mode}.
     * @param texture - The view to display.
     * @returns <code>true</code> if the display texture was successfully set, otherwise <code>false</code>.
     */
    function setDisplayTexture(texture: Window.DisplayTexture): boolean;
    /**
     * Checks if a 2D point is within the desktop window if in desktop mode, or the drawable area of the HUD overlay if in HMD
    mode.
     * @param point - The point to check.
     * @returns <code>true</code> if the point is within the window or HUD, otherwise <code>false</code>.
     */
    function isPointOnDesktopWindow(point: TVec2): boolean;
    /**
     * Gets the size of the drawable area of the Interface window if in desktop mode or the HMD rendering surface if in HMD mode.
     * @returns The width and height of the Interface window or HMD rendering surface, in pixels.
     */
    function getDeviceSize(): TVec2;
    /**
     * Gets the last domain connection error when a connection is refused.
     * @returns Integer number that enumerates the last domain connection refused.
     */
    function getLastDomainConnectionError(): Window.ConnectionRefusedReason;
    /**
     * Opens a non-modal message box that can have a variety of button combinations. See also,
    {@link Window.updateMessageBox|updateMessageBox} and {@link Window.closeMessageBox|closeMessageBox}.
     * @example
     * <caption>Ask the user whether that want to reset something.</caption>
    var messageBox;
    var resetButton = 0x4000000;
    var cancelButton = 0x400000;
    
    function onMessageBoxClosed(id, button) {
        if (id === messageBox) {
            if (button === resetButton) {
                print("Reset");
            } else {
                print("Don't reset");
            }
        }
    }
    Window.messageBoxClosed.connect(onMessageBoxClosed);
    
    messageBox = Window.openMessageBox("Reset Something",
        "Do you want to reset something?",
        resetButton + cancelButton, cancelButton);
     * @param title - The title to display for the message box.
     * @param text - Text to display in the message box.
     * @param buttons - The buttons to display on the message box; one or more button values added
        together.
     * @param defaultButton - The button that has focus when the message box is opened.
     * @returns The ID of the message box created.
     */
    function openMessageBox(title: string, text: string, buttons: Window.MessageBoxButton, defaultButton: Window.MessageBoxButton): number;
    /**
     * Opens a URL in the Interface window or other application, depending on the URL's scheme. The following schemes are
    supported:
    <ul>
      <li><code>hifi</code>: Navigate to the URL in Interface.</li>
      <li><code>hifiapp</code>: Open a system app in Interface.</li>
    </ul>
    <p>Other schemes will either be handled by the OS (e.g. <code>http</code>, <code>https</code>, or <code>mailto</code>) or
    will display a dialog asking the user to confirm that they want to try to open the URL.</p>
     * @param url - The URL to open.
     */
    function openUrl(url: string): void;
    /**
     * Opens an Android activity and optionally return back to the scene when the activity is completed. <em>Android only.</em>
     * @param activityName - The name of the activity to open: one of <code>"Home"</code>, <code>"Login"</code>, or
        <code>"Privacy Policy"</code>.
     * @param backToScene - If <code>true</code>, the user is automatically returned back to the scene when the
        activity is completed.
     */
    function openAndroidActivity(activityName: string, backToScene: boolean): void;
    /**
     * Updates the content of a message box that was opened with {@link Window.openMessageBox|openMessageBox}.
     * @param id - The ID of the message box.
     * @param title - The title to display for the message box.
     * @param text - Text to display in the message box.
     * @param buttons - The buttons to display on the message box; one or more button values added
        together.
     * @param defaultButton - The button that has focus when the message box is opened.
     */
    function updateMessageBox(id: number, title: string, text: string, buttons: Window.MessageBoxButton, defaultButton: Window.MessageBoxButton): void;
    /**
     * Closes a message box that was opened with {@link Window.openMessageBox|openMessageBox}.
     * @param id - The ID of the message box.
     */
    function closeMessageBox(id: number): void;
    /**
     * @returns Progress.
     */
    function domainLoadingProgress(): number;
    /**
     * Gets the number of display plugins currently available.
     * @returns The number of display plugins currently available.
     */
    function getDisplayPluginCount(): number;
    /**
     * Gets the name of a display plugin.
     * @example
     * <caption>Print the names of all available display plugins.</caption>
    for (var i = 0, length = Window.getDisplayPluginCount(); i < length; i++) {
        print(Window.getDisplayPluginName(i));
    }
     * @param index - The index of the display plugin. Must be less than the value returned by
        {@link Window.getDisplayPluginCount|getDisplayPluginCount}. The first display plugin has an index of <code>0</code>.
     * @returns The name of the display plugin.
     */
    function getDisplayPluginName(index: number): string;
    /**
     * Checks whether a display plugin is an HMD.
     * @param index - The index of the display plugin. Must be less than the value returned by
        {@link Window.getDisplayPluginCount|getDisplayPluginCount}. The first display plugin has an index of <code>0</code>.
     * @returns <code>true</code> if the display plugin is a HMD, <code>false</code> if it isn't.
     */
    function isDisplayPluginHmd(index: number): boolean;
    /**
     * Gets the index of the currently active display plugin.
     * @returns The index of the currently active display plugin. The first display plugin has an index of
        <code>0</code>.
     */
    function getActiveDisplayPlugin(): number;
    /**
     * Sets the currently active display plugin.
     * @param index - The index of the display plugin. Must be less than the value returned by
        {@link Window.getDisplayPluginCount|getDisplayPluginCount}. The first display plugin has an index of <code>0</code>.
     */
    function setActiveDisplayPlugin(index: number): void;
    /**
     * Opens an Interface web browser window.
     * @param [url = ""] - The URL of the web page to display.
     */
    function openWebBrowser(url?: string): void;
    /**
     * <p>The views that may be visible on the PC display.</p>
    <table>
      <thead>
        <tr>
          <th>Value</th>
          <th>View Displayed</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>""</code></td>
          <td>Normal view.</td>
        </tr>
        <tr>
          <td><code>"resource://hmdPreviewFrame"</code></td>
          <td>HMD preview.</td>
        </tr>
        <tr>
          <td><code>"resource://spectatorCameraFrame"</code></td>
          <td>Entity camera view.</td>
        </tr>
      </tbody>
    </table>
     */
    type DisplayTexture = string;
    /**
     * <p>The reasons that you may be refused connection to a domain are defined by numeric values:</p>
    <table>
      <thead>
        <tr>
          <th>Reason</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><strong>Unknown</strong></td>
          <td><code>0</code></td>
          <td>Some unknown reason.</td>
        </tr>
        <tr>
          <td><strong>ProtocolMismatch</strong></td>
          <td><code>1</code></td>
          <td>The communications protocols of the domain and your Interface are not the same.</td>
        </tr>
        <tr>
          <td><strong>LoginErrorMetaverse</strong></td>
          <td><code>2</code></td>
          <td>You could not be logged into the domain per your Directory Services login.</td>
        </tr>
        <tr>
          <td><strong>NotAuthorizedMetaverse</strong></td>
          <td><code>3</code></td>
          <td>You are not authorized to connect to the domain per your Directory Services login.</td>
        </tr>
        <tr>
          <td><strong>TooManyUsers</strong></td>
          <td><code>4</code></td>
          <td>The domain already has its maximum number of users.</td>
        </tr>
        <tr>
          <td><strong>TimedOut</strong></td>
          <td><code>5</code></td>
          <td>Connecting to the domain timed out.</td>
        </tr>
        <tr>
          <td><strong>LoginErrorDomain</strong></td>
          <td><code>2</code></td>
          <td>You could not be logged into the domain per your domain login.</td>
        </tr>
        <tr>
          <td><strong>NotAuthorizedDomain</strong></td>
          <td><code>6</code></td>
          <td>You are not authorized to connect to the domain per your domain login.</td>
        </tr>
      </tbody>
    </table>
     */
    type ConnectionRefusedReason = number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AvatarInputs</code> API provides facilities to manage user inputs.
 * @property cameraEnabled - <code>true</code> if webcam face tracking is enabled, <code>false</code> if it is
    disabled.
    <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and has been removed.</p>
 * @property cameraMuted - <code>true</code> if webcam face tracking is muted (temporarily disabled),
    <code>false</code> it if isn't.
    <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and has been removed.</p>
 * @property ignoreRadiusEnabled - <code>true</code> if the privacy shield is enabled, <code>false</code> if it
    is disabled.
    <em>Read-only.</em>
 * @property isHMD - <code>true</code> if the display mode is HMD, <code>false</code> if it isn't.
    <em>Read-only.</em>
 * @property showAudioTools - <code>true</code> if the microphone mute button and audio level meter are shown,
    <code>false</code> if they are hidden.
 * @property showBubbleTools - <code>true</code> if the privacy shield UI button is shown, <code>false</code> if
    it is hidden.
 */
declare namespace AvatarInputs {
    /**
     * Converts non-linear audio loudness to a linear audio level.
     * @param loudness - The non-linear audio loudness.
     * @returns The linear audio level.
     */
    function loudnessToAudioLevel(loudness: number): number;
    /**
     * Sets whether or not the microphone mute button and audio level meter is shown.
     * @param showAudioTools - <code>true</code> to show the microphone mute button and audio level meter,
        <code>false</code> to hide it.
     */
    function setShowAudioTools(showAudioTools: boolean): void;
    /**
     * Sets whether or not the privacy shield button is shown.
     * @param showBubbleTools - <code>true</code> to show the privacy shield button, <code>false</code> to hide it.
     */
    function setShowBubbleTools(showBubbleTools: boolean): void;
    /**
     * Resets sensors, audio, avatar animations, and the avatar rig.
     */
    function resetSensors(): void;
    /**
     * Toggles the muting (temporary disablement) of webcam face tracking on/off.
    <p class="important">Deprecated: This function is deprecated and has been removed.</p>
     */
    function toggleCameraMute(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>An <code>InteractiveWindow</code> can display either inside Interface or in its own window separate from the Interface
window. The window content is defined by a QML file, which can optionally include a <code>WebView</code> control that embeds
an HTML web page. (The <code>WebView</code> control is defined by a "WebView.qml" file included in the Interface install.)

<p>Create using {@link Desktop.createWindow}.</p>
 * @property title - The title of the window.
 * @property position - The absolute position of the window, in pixels.
 * @property relativePositionAnchor - The anchor for the
    <code>relativePosition</code>, if used.
 * @property relativePosition - The position of the window, relative to the <code>relativePositionAnchor</code>, in
    pixels. Excludes the window frame.
 * @property size - The size of the window, in pixels.
 * @property visible - <code>true</code> if the window is visible, <code>false</code> if it isn't.
 * @property presentationMode - The presentation mode of the window:
    <code>Desktop.PresentationMode.VIRTUAL</code> to display the window inside Interface, <code>.NATIVE</code> to display it
    as its own separate window.
 */
declare class InteractiveWindow {
    /**
     * Sends a message to the QML page. To receive the message, the QML page must implement a function:
    <pre class="prettyprint"><code>function fromScript(message) {
      ...
    }</code></pre>
     * @example
     * <caption>Send and receive messages with a QML window.</caption>
    // JavaScript file.
    
    var interactiveWindow = Desktop.createWindow(Script.resolvePath("InteractiveWindow.qml"), {
        title: "Interactive Window",
        size: { x: 400, y: 300 }
    });
    
    interactiveWindow.fromQml.connect(function (message) {
        print("Message received: " + message);
    });
    
    Script.setTimeout(function () {
        interactiveWindow.sendToQml("Hello world!");
    }, 2000);
    
    Script.scriptEnding.connect(function () {
        interactiveWindow.close();
    });
     * @example
     * // QML file, "InteractiveWindow.qml".
    
    import QtQuick 2.5
    import QtQuick.Controls 1.4
    
    Rectangle {
    
        function fromScript(message) {
            text.text = message;
            sendToScript("Hello back!");
        }
    
        Label {
            id: text
            anchors.centerIn: parent
            text: "..."
        }
    }
     * @param message - The message to send to the QML page.
     */
    static sendToQml(message: string | any): void;
    /**
     * Sends a message to an embedded HTML web page. To receive the message, the HTML page's script must connect to the
    <code>EventBridge</code> that is automatically provided for the script:
    <pre class="prettyprint"><code>EventBridge.scriptEventReceived.connect(function(message) {
        ...
    });</code></pre>
     * @param message - The message to send to the embedded HTML web page.
     */
    static emitScriptEvent(message: string | any): void;
    /**
     * @param message - Message.
     */
    static emitWebEvent(message: any | string): void;
    /**
     * Closes the window. It can then no longer be used.
     */
    static close(): void;
    /**
     * Makes the window visible and raises it to the top.
     */
    static show(): void;
    /**
     * Raises the window to the top.
     */
    static raise(): void;
    /**
     * @param message - Message.
     */
    static qmlToScript(message: any): void;
    /**
     * The title of the window.
    */
    title: string;
    /**
     * The absolute position of the window, in pixels.
    */
    position: TVec2;
    /**
     * The anchor for the
     * <code>relativePosition</code>, if used.
    */
    relativePositionAnchor: InteractiveWindow.RelativePositionAnchor;
    /**
     * The position of the window, relative to the <code>relativePositionAnchor</code>, in
     * pixels. Excludes the window frame.
    */
    relativePosition: TVec2;
    /**
     * The size of the window, in pixels.
    */
    size: TVec2;
    /**
     * <code>true</code> if the window is visible, <code>false</code> if it isn't.
    */
    visible: boolean;
    /**
     * The presentation mode of the window:
     * <code>Desktop.PresentationMode.VIRTUAL</code> to display the window inside Interface, <code>.NATIVE</code> to display it
     * as its own separate window.
    */
    presentationMode: InteractiveWindow.PresentationMode;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Snapshot</code> API provides access to the path that snapshots are saved to. This path is that provided in
Settings &gt; General &gt; Snapshots. Snapshots may be taken using <code>Window</code> API functions such as
{@link Window.takeSnapshot}.
 */
declare namespace Snapshot {
    /**
     * Gets the path that snapshots are saved to.
     * @returns The path to save snapshots to.
     */
    function getSnapshotsLocation(): string;
    /**
     * Sets the path that snapshots are saved to.
     * @param location - The path to save snapshots to.
     */
    function setSnapshotsLocation(location: string): void;
    /**
     * Gets the currently selected snapshot format.
     * @returns Currently selected snapshot format.
     */
    function getSnapshotFormat(): string;
    /**
     * Sets the snapshot format.
     * @param format - one of the format names returned by Snapshot.getAvailableSnapshotFormats().
     */
    function setSnapshotFormat(format: string): void;
    /**
     * Gets the currently selected animated snapshot format.
     * @returns Currently selected snapshot format.
     */
    function getAnimatedSnapshotFormat(): string[];
    /**
     * Sets the snapshot format.
     * @param format - one of the format names returned by Snapshot.getAvailableSnapshotFormats().
     */
    function setAnimatedSnapshotFormat(format: string): void;
    /**
     * Returns a list of supported snapshot formats.
     * @returns List of supported snapshot formats.
     */
    function getAvailableSnapshotFormats(): string[];
    /**
     * Returns a list of supported snapshot formats with short descriptions.
     * @returns List of supported snapshot formats with short descriptions.
     */
    function getAvailableSnapshotFormatsWithDescriptions(): string[];
    /**
     * Returns a list of supported animated snapshot formats.
     * @returns List of supported animated snapshot formats.
     */
    function getAvailableAnimatedSnapshotFormats(): string[];
    /**
     * Returns a list of supported animated snapshot formats with short descriptions.
     * @returns List of supported animated snapshot formats with short descriptions.
     */
    function getAvailableAnimatedSnapshotFormatsWithDescriptions(): string[];
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Stats</code> API provides statistics on Interface and domain operation, per the statistics overlay.

<p><strong>Note:</strong> This API is primarily an internal diagnostics tool and is provided "as is".</p>
 * @property expanded - <code>true</code> if the statistics overlay should be in expanded form when the overlay is
    displayed, <code>false</code> if it shouldn't be expanded.
 * @property timingExpanded - <code>true</code> if timing details should be displayed when the statistics overlay is
    displayed in expanded form, <code>false</code> if timing details should not be displayed. Set by the menu item,
    Developer &gt; Timing &gt; Performance Timer &gt; Display Timing Details.
    <em>Read-only.</em>
 * @property monospaceFont - The name of the monospace font used in the statistics overlay.
    <em>Read-only.</em>
 * @property serverCount - The number of servers that Interface is connected to.
    <em>Read-only.</em>
 * @property renderrate - The rate at which new GPU frames are being created, in Hz.
    <em>Read-only.</em>
 * @property presentrate - The rate at which the display plugin is presenting to the display device, in Hz.
    <em>Read-only.</em>
 * @property stutterrate - The rate at which the display plugin is reprojecting old GPU frames, in Hz.
    <em>Read-only.</em>
 * @property appdropped - The number of times a frame has not been provided to the display device in time.
    <em>Read-only.</em>
 * @property longsubmits - The number of times the display device has taken longer than 11ms to return after being
    given a frame.
    <em>Read-only.</em>
 * @property longrenders - The number of times it has taken longer than 11ms to submit a new frame to the display
    device.
    <em>Read-only.</em>
 * @property longframes - The number of times <code>longsubmits + longrenders</code> has taken longer than 15ms.
    <em>Read-only.</em>
 * @property presentnewrate - The rate at which the display plugin is presenting new GPU frames, in Hz.
    <em>Read-only.</em>
 * @property presentdroprate - The rate at which the display plugin is dropping GPU frames, in Hz.
    <em>Read-only.</em>
 * @property gameLoopRate - The rate at which the game loop is running, in Hz.
    <em>Read-only.</em>
 * @property refreshRateTarget - The current target refresh rate, in Hz, per the current <code>refreshRateMode</code>
    and <code>refreshRateRegime</code> if in desktop mode; a higher rate if in VR mode.
    <em>Read-only.</em>
 * @property refreshRateMode - The current refresh rate profile.
    <em>Read-only.</em>
 * @property refreshRateRegime - The current refresh rate regime.
    <em>Read-only.</em>
 * @property uxMode - The user experience (UX) mode that Interface is running in.
    <em>Read-only.</em>
 * @property avatarCount - The number of avatars in the domain other than the client's.
    <em>Read-only.</em>
 * @property heroAvatarCount - The number avatars in a "hero" zone in the domain, other than the client's.
    <em>Read-only.</em>
 * @property physicsObjectCount - The number of objects that have collisions enabled.
    <em>Read-only.</em>
 * @property updatedAvatarCount - The number of avatars in the domain, other than the client's, that were updated in
    the most recent game loop.
    <em>Read-only.</em>
 * @property updatedHeroAvatarCount - The number of avatars in a "hero" zone in the domain, other than the client's,
    that were updated in the most recent game loop.
    <em>Read-only.</em>
 * @property notUpdatedAvatarCount - The number of avatars in the domain, other than the client's, that weren't able
    to be updated in the most recent game loop because there wasn't enough time to.
    <em>Read-only.</em>
 * @property packetInCount - The number of packets being received from the domain server, in packets per second.
    <em>Read-only.</em>
 * @property packetOutCount - The number of packets being sent to the domain server, in packets per second.
    <em>Read-only.</em>
 * @property mbpsIn - The amount of data being received from the domain server, in megabits per second.
    <em>Read-only.</em>
 * @property mbpsOut - The amount of data being sent to the domain server, in megabits per second.
   <em>Read-only.</em>
 * @property assetMbpsIn - The amount of data being received from the asset server, in megabits per second.
    <code>0.0</code> if not connected to an avatar mixer.
    <em>Read-only.</em>
 * @property assetMbpsOut - The amount of data being sent to the asset server, in megabits per second.
    <code>0.0</code> if not connected to an avatar mixer.
    <em>Read-only.</em>
 * @property audioPing - The ping time to the audio mixer, in ms.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property avatarPing - The ping time to the avatar mixer, in ms.
    <code>-1</code> if not connected to an avatar mixer.
    <em>Read-only.</em>
 * @property entitiesPing - The average ping time to the entity servers, in ms.
    <code>-1</code> if not connected to an entity server.
    <em>Read-only.</em>
 * @property assetPing - The ping time to the asset server, in ms.
    <code>-1</code> if not connected to an asset server.
    <em>Read-only.</em>
 * @property messagePing - The ping time to the message mixer, in ms.
    <code>-1</code> if not connected to a message mixer.
    <em>Read-only.</em>
 * @property position - The position of the user's avatar.
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property speed - The speed of the user's avatar, in m/s.
    <em>Read-only.</em>
 * @property yaw - The yaw of the user's avatar body, in degrees.
    <em>Read-only.</em>
 * @property avatarMixerInKbps - The amount of data being received from the avatar mixer, in kilobits per second.
    <code>-1</code> if not connected to an avatar mixer.
    <em>Read-only.</em>
 * @property avatarMixerInPps - The number of packets being received from the avatar mixer, in packets per second.
    <code>-1</code> if not connected to an avatar mixer.
    <em>Read-only.</em>
 * @property avatarMixerOutKbps - The amount of data being sent to the avatar mixer, in kilobits per second.
     <code>-1</code> if not connected to an avatar mixer.
     <em>Read-only.</em>
 * @property avatarMixerOutPps - The number of packets being sent to the avatar mixer, in packets per second.
     <code>-1</code> if not connected to an avatar mixer.
     <em>Read-only.</em>
 * @property myAvatarSendRate - The number of avatar packets being sent by the user's avatar, in packets per second.
     <em>Read-only.</em>
 * @property audioMixerInKbps - The amount of data being received from the audio mixer, in kilobits per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioMixerInPps - The number of packets being received from the audio mixer, in packets per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioMixerOutKbps - The amount of data being sent to the audio mixer, in kilobits per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioMixerOutPps - The number of packets being sent to the audio mixer, in packets per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioMixerKbps - The total amount of data being sent to and received from the audio mixer, in kilobits
    per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioMixerPps - The total number of packets being sent to and received from the audio mixer, in packets
    per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioOutboundPPS - The number of non-silent audio packets being sent by the user, in packets per second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioSilentOutboundPPS - The number of silent audio packets being sent by the user, in packets per
    second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioInboundPPS - The number of non-silent audio packets being received by the user, in packets per
    second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioAudioInboundPPS - The number of non-silent audio packets being received by the user, in packets per
    second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed. Use <code>audioInboundPPS</code>
    instead.</p>
 * @property audioSilentInboundPPS - The number of silent audio packets being received by the user, in packets per
    second.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioPacketLoss - The number of audio packets being lost, sent to or received from the audio mixer, in %.
    <code>-1</code> if not connected to an audio mixer.
    <em>Read-only.</em>
 * @property audioCodec - The name of the audio codec.
    <em>Read-only.</em>
 * @property audioNoiseGate - The status of the audio noise gate: <code>"Open"</code> or <code>"Closed"</code>.
    <em>Read-only.</em>
 * @property audioInjectors - The number of audio injectors, local and non-local.
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property entityPacketsInKbps - The average amount of data being received from entity servers, in kilobits per
    second. (Multiply by the number of entity servers to get the total amount of data being received.)
    <code>-1</code> if not connected to an entity server.
    <em>Read-only.</em>
 * @property downloads - The number of downloads in progress.
    <em>Read-only.</em>
 * @property downloadLimit - The maximum number of concurrent downloads.
    <em>Read-only.</em>
 * @property downloadsPending - The number of downloads pending.
    <em>Read-only.</em>
 * @property downloadUrls - The download URLs.
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property processing - The number of completed downloads being processed.
    <em>Read-only.</em>
 * @property processingPending - The number of completed downloads waiting to be processed.
    <em>Read-only.</em>
 * @property triangles - The number of triangles in the rendered scene.
    <em>Read-only.</em>
 * @property drawcalls - The number of draw calls made for the rendered scene.
    <em>Read-only.</em>
 * @property materialSwitches - The number of material switches performed for the rendered scene.
    <em>Read-only.</em>
 * @property itemConsidered - The number of item considerations made for rendering.
    <em>Read-only.</em>
 * @property itemOutOfView - The number of items out of view.
    <em>Read-only.</em>
 * @property itemTooSmall - The number of items too small to render.
    <em>Read-only.</em>
 * @property itemRendered - The number of items rendered.
    <em>Read-only.</em>
 * @property shadowConsidered - The number of shadow considerations made for rendering.
    <em>Read-only.</em>
 * @property shadowOutOfView - The number of shadows out of view.
    <em>Read-only.</em>
 * @property shadowTooSmall - The number of shadows too small to render.
    <em>Read-only.</em>
 * @property shadowRendered - The number of shadows rendered.
    <em>Read-only.</em>
 * @property sendingMode - Description of the octree sending mode.
    <em>Read-only.</em>
 * @property packetStats - Description of the octree packet processing state.
    <em>Read-only.</em>
 * @property lodAngle - The target LOD angle, in degrees.
    <em>Read-only.</em>
 * @property lodTargetFramerate - The target LOD frame rate, in Hz.
    <em>Read-only.</em>
 * @property lodStatus - Description of the current LOD.
    <em>Read-only.</em>
 * @property numEntityUpdates - The number of entity updates that happened last frame.
    <em>Read-only.</em>
 * @property numNeededEntityUpdates - The total number of entity updates scheduled for last frame.
    <em>Read-only.</em>
 * @property timingStats - Details of the average time (ms) spent in and number of calls made to different parts of
    the code. Provided only if <code>timingExpanded</code> is <code>true</code>. Only the top 10 items are provided if
    Developer &gt; Timing &gt; Performance Timer &gt; Only Display Top 10 is enabled.
    <em>Read-only.</em>
 * @property gameUpdateStats - Details of the average time (ms) spent in different parts of the game loop.
    <em>Read-only.</em>
 * @property serverElements - The total number of elements in the server octree.
    <em>Read-only.</em>
 * @property serverInternal - The number of internal elements in the server octree.
    <em>Read-only.</em>
 * @property serverLeaves - The number of leaf elements in the server octree.
    <em>Read-only.</em>
 * @property localElements - The total number of elements in the client octree.
    <em>Read-only.</em>
 * @property localInternal - The number of internal elements in the client octree.
    <em>Read-only.</em>
 * @property localLeaves - The number of leaf elements in the client octree.
    <em>Read-only.</em>
 * @property rectifiedTextureCount - The number of textures that have been resized so that their dimensions is a power
    of 2 if smaller than 128 pixels, or a multiple of 128 if greater than 128 pixels.
    <em>Read-only.</em>
 * @property decimatedTextureCount - The number of textures that have been reduced in size because they were over the
    maximum allowed dimensions of 8192 pixels on desktop or 2048 pixels on mobile.
    <em>Read-only.</em>
 * @property gpuBuffers - The number of OpenGL buffer objects managed by the GPU back-end.
    <em>Read-only.</em>
 * @property gpuBufferMemory - The total memory size of the <code>gpuBuffers</code>, in MB.
    <em>Read-only.</em>
 * @property gpuTextures - The number of OpenGL textures managed by the GPU back-end. This is the sum of the number of
    textures managed for <code>gpuTextureResidentMemory</code>,  <code>gpuTextureResourceMemory</code>, and
    <code>gpuTextureFramebufferMemory</code>.
    <em>Read-only.</em>
 * @property gpuTextureMemory - The total memory size of the <code>gpuTextures</code>, in MB. This is the sum of
    <code>gpuTextureResidentMemory</code>,  <code>gpuTextureResourceMemory</code>, and
    <code>gpuTextureFramebufferMemory</code>.
    <em>Read-only.</em>
 * @property glContextSwapchainMemory - The estimated memory used by the default OpenGL frame buffer, in MB.
    <em>Read-only.</em>
 * @property qmlTextureMemory - The memory size of textures managed by the offscreen QML surface, in MB.
    <em>Read-only.</em>
 * @property texturePendingTransfers - The memory size of textures pending transfer to the GPU, in MB.
    <em>Read-only.</em>
 * @property gpuTextureResidentMemory - The memory size of the "strict" textures that always have their full
    resolution in GPU memory, in MB.
    <em>Read-only.</em>
 * @property gpuTextureFramebufferMemory - The memory size of the frame buffer on the GPU, in MB.
    <em>Read-only.</em>
 * @property gpuTextureResourceMemory - The amount of GPU memory that has been allocated for "variable" textures that
    don't necessarily always have their full resolution in GPU memory, in MB.
    <em>Read-only.</em>
 * @property gpuTextureResourceIdealMemory - The amount of memory that "variable" textures would take up if they were
    all completely loaded, in MB.
    <em>Read-only.</em>
 * @property gpuTextureResourcePopulatedMemory - How much of the GPU memory allocated has actually been populated, in
     MB.
    <em>Read-only.</em>
 * @property gpuTextureMemoryPressureState - The stats of the texture transfer engine.
    <ul>
        <li><code>"Undersubscribed"</code>: There is texture data that can fit in memory but that isn't on the GPU, so more
        GPU texture memory should be allocated if possible.</li>
        <li><code>"Transfer"</code>: More GPU texture memory has been allocated and texture data is being transferred.</li>
        <li><code>"Idle"</code>: Either all texture data has been transferred to the GPU or there is nor more space
        available.</li>
    </ul>
    <em>Read-only.</em>
 * @property gpuFreeMemory - The amount of GPU memory available after all allocations, in MB.
    <em>Read-only.</em>
    <p><strong>Note:</strong> This is not a reliable number because OpenGL doesn't have an official method of getting this
    information.</p>
 * @property gpuTextureExternalMemory - The estimated amount of memory consumed by textures being used but that are
    not managed by the GPU library, in MB.
    <em>Read-only.</em>
 * @property gpuFrameSize - The dimensions of the frames being rendered, in pixels.
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property gpuFrameTime - The time the GPU is spending on a frame, in ms.
    <em>Read-only.</em>
 * @property gpuFrameTimePerPixel - The time the GPU is spending on a pixel, in ns.
    <em>Read-only.</em>
 * @property batchFrameTime - The time being spent batch processing each frame, in ms.
    <em>Read-only.</em>
 * @property engineFrameTime - The time being spent in the render engine each frame, in ms.
    <em>Read-only.</em>
 * @property avatarSimulationTime - The time being spent simulating avatars each frame, in ms.
    <em>Read-only.</em>
 * @property stylusPicksCount - The number of stylus picks currently in effect.
    <em>Read-only.</em>
 * @property rayPicksCount - The number of ray picks currently in effect.
    <em>Read-only.</em>
 * @property parabolaPicksCount - The number of parabola picks currently in effect.
    <em>Read-only.</em>
 * @property collisionPicksCount - The number of collision picks currently in effect.
    <em>Read-only.</em>
 * @property stylusPicksUpdated - The number of stylus pick intersection that were found in the most recent game loop:
    <ul>
        <li><code>x</code> = entity intersections.</li>
        <li><code>y</code> = avatar intersections.</li>
        <li><code>z</code> = HUD intersections.</li>
    </ul>
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property rayPicksUpdated - The number of ray pick intersections that were found in the most recent game loop:
    <ul>
        <li><code>x</code> = entity intersections.</li>
        <li><code>y</code> = avatar intersections.</li>
        <li><code>z</code> = HUD intersections.</li>
    </ul>
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property parabolaPicksUpdated - The number of parabola pick intersections that were found in the most recent game
    loop:
    <ul>
        <li><code>x</code> = entity intersections.</li>
        <li><code>y</code> = avatar intersections.</li>
        <li><code>z</code> = HUD intersections.</li>
    </ul>
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property collisionPicksUpdated - The number of collision pick intersections that were found in the most recent game
    loop:
    <ul>
        <li><code>x</code> = entity intersections.</li>
        <li><code>y</code> = avatar intersections.</li>
        <li><code>z</code> = HUD intersections.</li>
    </ul>
    <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
 * @property eventQueueDebuggingOn - <code>true</code> if event queue statistics are provided, <code>false</code> if
    they're not.
    <em>Read-only.</em>
 * @property mainThreadQueueDepth - The number of events in the main thread's event queue.
    Only provided if <code>eventQueueDebuggingOn</code> is <code>true</code>.
    <em>Read-only.</em>
 * @property nodeListThreadQueueDepth - The number of events in the node list thread's event queue.
    Only provided if <code>eventQueueDebuggingOn</code> is <code>true</code>.
    <em>Read-only.</em>
 * @property bgColor - <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property activeFocus - <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property activeFocusOnTab - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property anchors - <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property antialiasing - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property baselineOffset - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property children - <em>Read-only.</em>
    <p><strong>Note:</strong> Property not available in the API.</p>
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property clip - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property containmentMask - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property enabled - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property focus - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property height - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property implicitHeight - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property implicitWidth - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property layer - <em>Read-only.</em>
    <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property opacity - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property rotation - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property scale - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property smooth - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property state - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property transformOrigin - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property visible - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property width - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property x - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property y - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 * @property z - <p class="important">Deprecated: This property is deprecated and will be removed.</p>
 */
declare namespace Stats {
    /**
     * Updates statistics to make current values available to scripts even though the statistics overlay may not be displayed.
    (Many statistics values are normally updated only if the statistics overlay is displayed.)
    <p><strong>Note:</strong> Not all statistics values are updated when the statistics overlay isn't displayed or
    expanded.</p>
     * @example
     * <caption>Report avatar mixer data and packet rates.</caption>
    // The statistics to report.
    var stats = [
        "avatarMixerInKbps",
        "avatarMixerInPps",
        "avatarMixerOutKbps",
        "avatarMixerOutPps"
    ];
    
    // Update the statistics for the script.
    Stats.forceUpdateStats();
    
    // Report the statistics.
    for (var i = 0; i < stats.length; i++) {
        print(stats[i], "=", Stats[stats[i]]);
    }
     */
    function forceUpdateStats(): void;
    /**
     * @param x - X.
     * @param y - Y.
     */
    function childAt(x: number, y: number): any;
    /**
     * @param point - Point
     */
    function contains(point: TVec2): boolean;
    /**
     * @param [reason = 7] - Reason
     */
    function forceActiveFocus(reason?: number): void;
    /**
     * @param callback - Callback.
     * @param [targetSize = 0,0] - Target size.
     */
    function grabToImage(callback: any, targetSize?: Size): boolean;
    /**
     * @param global - Global.
     */
    function mapFromGlobal(global: any): void;
    /**
     * @param item - Item.
     */
    function mapFromItem(item: any): void;
    /**
     * @param global - Global.
     */
    function mapToGlobal(global: any): void;
    /**
     * @param item - Item
     */
    function mapToItem(item: any): void;
    /**
     * @param [forward = true] - Forward.
     */
    function nextItemInFocusChain(forward?: boolean): any;
    function update(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Overlays</code> API provides facilities to create and interact with overlays. These are 2D and 3D objects visible
only to yourself and that aren't persisted to the domain. They are used for UI.

<p><strong>Note:</strong> 3D overlays are local {@link Entities}, internally, so many of the methods also work with
entities.</p>
 * @property keyboardFocusOverlay - The <code>{@link Overlays.OverlayPropertiesWeb3D|"web3d"}</code> overlay
    ({@link Entities.EntityPropertiesWeb|Web} entity) that has keyboard focus. If no overlay (entity) has keyboard focus,
    returns <code>null</code>; set to <code>null</code> or {@link Uuid(0)|Uuid.NULL} to clear keyboard focus.
 */
declare namespace Overlays {
    /**
     * <p>An overlay may be one of the following types:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>2D/3D</th><th>Description</th><th>Properties</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"rectangle"</code></td><td>2D</td>
          <td>A rectangle.</td>
          <td>{@link Overlays.OverlayPropertiesRectangle|OverlayPropertiesRectangle}</td></tr>
        <tr><td><code>"image"</code></td><td>2D</td>
          <td>An image.</td>
          <td>{@link Overlays.OverlayPropertiesImage|OverlayPropertiesImage}</td></tr>
        <tr><td><code>"text"</code></td><td>2D</td>
          <td>Some text.</td>
          <td>{@link Overlays.OverlayPropertiesText|OverlayPropertiesText}</td></tr>
        <tr><td><code>"cube"</code></td><td>3D</td>
          <td><p>A cube. A <code>"shape"</code> overlay can also be used to create a cube.</p>
      </tbody>
    </table>
    <p>2D overlays are rendered on the display surface in desktop mode and on the HUD surface in HMD mode. 3D overlays are
    rendered at a position and orientation in-world.</p>
     */
    type OverlayType = string;
    /**
     * Different overlay types have different properties: some common to all overlays (listed in the table) and some specific to
    each {@link Overlays.OverlayType|OverlayType} (linked to below).
    <p>3D overlays are local entities, internally, so they also support the relevant entity's properties.</p>
     */
    type OverlayProperties = {
        /**
         * The ID of the overlay. <em>Read-only.</em>
         */
        id: Uuid;
        /**
         * The overlay's type. <em>Read-only.</em>
         */
        type: Overlays.OverlayType;
        /**
         * <code>true</code> if the overlay is rendered, <code>false</code> if it isn't.
         * @defaultValue true
         */
        visible: boolean;
    };
    /**
     * The <code>"image"</code> {@link Overlays.OverlayType|OverlayType} is for 2D images.
    It has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.
     */
    type OverlayPropertiesImage = {
        /**
         * The position and size of the image display area, in pixels. <em>Write-only.</em>
         */
        bounds: Rect;
        /**
         * Integer left, x-coordinate value of the image display area = <code>bounds.x</code>.
         * <em>Write-only.</em>
         */
        x: number;
        /**
         * Integer top, y-coordinate value of the image display area = <code>bounds.y</code>.
         * <em>Write-only.</em>
         */
        y: number;
        /**
         * Integer width of the image display area = <code>bounds.width</code>. <em>Write-only.</em>
         */
        width: number;
        /**
         * Integer height of the image display area = <code>bounds.height</code>. <em>Write-only.</em>
         */
        height: number;
        /**
         * The URL of the image file to display. The image is scaled to fit to the <code>bounds</code>.
         * <em>Write-only.</em>
         */
        imageURL: string;
        /**
         * The portion of the image to use. If not specified, the whole image is used.
         * <em>Write-only.</em>
         */
        subImage: Rect;
        /**
         * The color to apply over the top of the image to colorize it. <em>Write-only.</em>
         * @defaultValue 0,0,0
         */
        color: Color;
        /**
         * The opacity of the color applied over the top of the image, <code>0.0</code> &ndash;
         * <code>1.0</code>. <em>Write-only.</em>
         * @defaultValue 0.0
         */
        alpha: number;
    };
    /**
     * The <code>"text"</code> {@link Overlays.OverlayType|OverlayType} is for 2D text.
    It has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.
     */
    type OverlayPropertiesText = {
        /**
         * The position and size of the rectangle, in pixels. <em>Write-only.</em>
         */
        bounds: Rect;
        /**
         * Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>
         */
        x: number;
        /**
         * Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>
         */
        y: number;
        /**
         * Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>
         */
        width: number;
        /**
         * Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>
         */
        height: number;
        /**
         * The <code>leftMargin</code> and <code>topMargin</code> values, in pixels.
         * <em>Write-only.</em>
         */
        margin: number;
        /**
         * The left margin's size, in pixels. This value is also used for the right margin.
         * <em>Write-only.</em>
         */
        leftMargin: number;
        /**
         * The top margin's size, in pixels. This value is also used for the bottom margin.
         * <em>Write-only.</em>
         */
        topMargin: number;
        /**
         * The text to display. Text does not automatically wrap; use <code>"\n"</code> for a line break.
         * Text is clipped to the <code>bounds</code>. <em>Write-only.</em>
         * @defaultValue ""
         */
        text: string;
        /**
         * The height of a line of text, in pixels. <em>Write-only.</em>
         * @defaultValue 18
         */
        lineHeight: number;
        /**
         * The color of the text. Synonym: <code>textColor</code>. <em>Write-only.</em>
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>. <em>Write-only.</em>
         * @defaultValue 1.0
         */
        alpha: number;
        /**
         * The color of the background rectangle. <em>Write-only.</em>
         * @defaultValue 0,0,0
         */
        backgroundColor: Color;
        /**
         * The opacity of the background rectangle, <code>0.0</code> &ndash; <code>1.0</code>.
         * <em>Write-only.</em>
         * @defaultValue 0.7
         */
        backgroundAlpha: number;
    };
    /**
     * The <code>"rectangle"</code> {@link Overlays.OverlayType|OverlayType} is for 2D rectangles.
    It has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.
     */
    type OverlayPropertiesRectangle = {
        /**
         * The position and size of the rectangle, in pixels. <em>Write-only.</em>
         */
        bounds: Rect;
        /**
         * Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>
         */
        x: number;
        /**
         * Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>
         */
        y: number;
        /**
         * Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>
         */
        width: number;
        /**
         * Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>
         */
        height: number;
        /**
         * Integer corner radius, in pixels. <em>Write-only.</em>
         */
        radius: number;
        /**
         * The color of the overlay. <em>Write-only.</em>
         * @defaultValue 0,0,0
         */
        color: Color;
        /**
         * The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>. <em>Write-only.</em>
         * @defaultValue 1.0
         */
        alpha: number;
        /**
         * Integer width of the border, in pixels. The border is drawn within the rectangle's bounds.
         * It is not drawn unless either <code>borderColor</code> or <code>borderAlpha</code> are specified. <em>Write-only.</em>
         * @defaultValue 1
         */
        borderWidth: number;
        /**
         * The color of the border. <em>Write-only.</em>
         * @defaultValue 0,0,0
         */
        borderColor: Color;
        /**
         * The opacity of the border, <code>0.0</code> &ndash; <code>1.0</code>.
         * <em>Write-only.</em>
         * @defaultValue 1.0
         */
        borderAlpha: number;
    };
    /**
     * The result of a {@link PickRay} search using {@link Overlays.findRayIntersection|findRayIntersection}.
     */
    type RayToOverlayIntersectionResult = {
        /**
         * <code>true</code> if the {@link PickRay} intersected with a 3D overlay, otherwise
         * <code>false</code>.
         */
        intersects: boolean;
        /**
         * The UUID of the local entity that was intersected.
         */
        overlayID: Uuid;
        /**
         * The distance from the {@link PickRay} origin to the intersection point.
         */
        distance: number;
        /**
         * The normal of the overlay surface at the intersection point.
         */
        surfaceNormal: TVec3;
        /**
         * The position of the intersection point.
         */
        intersection: TVec3;
        /**
         * Additional intersection details, if available.
         */
        extraInfo: any;
    };
    /**
     * Adds an overlay to the scene.
     * @example
     * <caption>Add a cube overlay in front of your avatar.</caption>
    var overlay = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
     * @param type - The type of the overlay to add.
     * @param properties - The properties of the overlay to add.
     * @returns The ID of the newly created overlay if successful, otherwise {@link Uuid(0)|Uuid.NULL}.
     */
    function addOverlay(type: Overlays.OverlayType, properties: Overlays.OverlayProperties): Uuid;
    /**
     * Creates a clone of an existing overlay (or entity).
    <p>Note: For cloning behavior of 3D overlays and entities, see {@link Entities.cloneEntity}.</p>
     * @param id - The ID of the overlay (or entity) to clone.
     * @returns The ID of the new overlay (or entity) if successful, otherwise {@link Uuid(0)|Uuid.NULL}.
     */
    function cloneOverlay(id: Uuid): Uuid;
    /**
     * Edits an overlay's (or entity's) properties.
     * @example
     * <caption>Add an overlay in front of your avatar then change its color.</caption>
    var overlay = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    
    var success = Overlays.editOverlay(overlay, {
        color: { red: 255, green: 0, blue: 0 }
    });
    print("Success: " + success);
     * @param id - The ID of the overlay (or entity) to edit.
     * @param properties - The properties changes to make.
     * @returns <code>false</code> if Interface is exiting. Otherwise, if a 2D overlay then <code>true</code> always,
       and if a 3D overlay then <code>true</code> if the overlay was found and edited, otherwise <code>false</code>.
     */
    function editOverlay(id: Uuid, properties: Overlays.OverlayProperties): boolean;
    /**
     * Edits the properties of multiple overlays (or entities).
     * @example
     * <caption>Create two overlays in front of your avatar then change their colors.</caption>
    var overlayA = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    var overlayB = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    
    var overlayEdits = {};
    overlayEdits[overlayA] = { color: { red: 255, green: 0, blue: 0 } };
    overlayEdits[overlayB] = { color: { red: 0, green: 255, blue: 0 } };
    var success = Overlays.editOverlays(overlayEdits);
    print("Success: " + success);
     * @param propertiesById - An object with overlay (or entity) IDs as keys and
        {@link Overlays.OverlayProperties|OverlayProperties} edits to make as values.
     * @returns <code>false</code> if Interface is exiting, otherwise <code>true</code>.
     */
    function editOverlays(propertiesById: {
        [key: string]: Overlays.OverlayProperties;
    }): boolean;
    /**
     * Deletes an overlay (or entity).
     * @param id - The ID of the overlay (or entity) to delete.
     */
    function deleteOverlay(id: Uuid): void;
    /**
     * Gets the type of an overlay.
     * @example
     * <caption>Create an overlay in front of your avatar then get and report its type.</caption>
    var overlay = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    var type = Overlays.getOverlayType(overlay);
    print("Type: " + type); // cube
     * @param id - The ID of the overlay to get the type of.
     * @returns The type of the overlay if found, otherwise <code>"unknown"</code>.
     */
    function getOverlayType(id: Uuid): Overlays.OverlayType;
    /**
     * Gets an overlay's (or entity's) script object. In particular, this is useful for accessing a
    <code>{@link Overlays.OverlayPropertiesWeb3D|"web3d"}</code> overlay's <code>EventBridge</code> script object to
    exchange messages with the web page script.
    <p>To send a message from an Interface script to a <code>"web3d"</code> overlay over its event bridge:</p>
    <pre class="prettyprint"><code>var overlayObject = Overlays.getOverlayObject(overlayID);
    overlayObject.emitScriptEvent(message);</code></pre>
    <p>To receive a message from a <code>"web3d"</code> overlay over its event bridge in an Interface script:</p>
    <pre class="prettyprint"><code>var overlayObject = Overlays.getOverlayObject(overlayID);
    overlayObject.webEventReceived.connect(function(message) {
        ...
    };</code></pre>
     * @example
     * <caption>Exchange messages with a <code>"web3d"</code> overlay.</caption>
    // HTML file, name: "web3d.html".
    <!DOCTYPE html>
    <html>
    <head>
        <title>HELLO</title>
    </head>
    <body>
        <h1>HELLO</h1>
        <script>
            function onScriptEventReceived(message) {
                // Message received from the script.
                console.log("Message received: " + message);
            }
    
            EventBridge.scriptEventReceived.connect(onScriptEventReceived);
    
            setInterval(function () {
                // Send a message to the script.
                EventBridge.emitWebEvent("hello");
            }, 2000);
        </script>
    </body>
    </html>
    
    // Interface script file.
    var web3DOverlay = Overlays.addOverlay("web3d", {
        type: "Web",
        position : Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y : 0.5, z : -3 })),
        rotation : MyAvatar.orientation,
        sourceUrl : Script.resolvePath("web3d.html"),
        alpha : 1.0
        });
    
    var overlayObject;
    
    function onWebEventReceived(message) {
        // Message received.
        print("Message received: " + message);
    
        // Send a message back.
        overlayObject.emitScriptEvent(message + " back");
    }
    
    Script.setTimeout(function() {
        overlayObject = Overlays.getOverlayObject(web3DOverlay);
        overlayObject.webEventReceived.connect(onWebEventReceived);
    }, 500);
    
    Script.scriptEnding.connect(function() {
        Overlays.deleteOverlay(web3DOverlay);
    });
     * @param overlayID - The ID of the overlay to get the script object of.
     * @returns The script object for the overlay if found.
     */
    function getOverlayObject(overlayID: Uuid): any;
    /**
     * Gets the ID of the 2D overlay at a particular point on the desktop screen or HUD surface.
     * @example
     * <caption>Create a 2D overlay and add an event function that reports the overlay clicked on, if any.</caption>
    var overlay = Overlays.addOverlay("rectangle", {
        bounds: { x: 100, y: 100, width: 200, height: 100 },
        color: { red: 255, green: 255, blue: 255 }
    });
    print("Created: " + overlay);
    
    Controller.mousePressEvent.connect(function (event) {
        var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });
        print("Clicked: " + overlay);
    });
     * @param point - The point to check for an overlay.
     * @returns The ID of the 2D overlay at the specified point if found, otherwise <code>null</code>.
     */
    function getOverlayAtPoint(point: TVec2): Uuid;
    /**
     * Finds the closest 3D overlay (or local entity) intersected by a {@link PickRay}.
     * @example
     * <caption>Create a cube overlay in front of your avatar. Report 3D overlay intersection details for mouse
        clicks.</caption>
    var overlay = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    
    Controller.mousePressEvent.connect(function (event) {
        var pickRay = Camera.computePickRay(event.x, event.y);
        var intersection = Overlays.findRayIntersection(pickRay);
        print("Intersection: " + JSON.stringify(intersection));
    });
     * @param pickRay - The PickRay to use for finding overlays.
     * @param [precisionPicking = false] - <code>true</code> to pick against precise meshes, <code>false</code> to pick
        against coarse meshes. If <code>true</code> and the intersected entity is a model, the result's
        <code>extraInfo</code> property includes more information than it otherwise would.
     * @param [include = []] - If not empty, then the search is restricted to these overlays (and local entities).
     * @param [discard = []] - Overlays (and local entities) to ignore during the search.
     * @param [visibleOnly = false] - <code>true</code> if only overlays (and local entities) that are
        <code>{@link Overlays.OverlayProperties|visible}</code> should be searched.
     * @param [collideableOnly = false] - <code>true</code> if only local entities that are not
        <code>{@link Entities.EntityProperties|collisionless}</code> should be searched.
     * @returns The result of the search for the first intersected overlay (or local
        entity.
     */
    function findRayIntersection(pickRay: PickRay, precisionPicking?: boolean, include?: Uuid[], discard?: Uuid[], visibleOnly?: boolean, collideableOnly?: boolean): Overlays.RayToOverlayIntersectionResult;
    /**
     * Gets a list of visible 3D overlays (local entities) with bounding boxes that touch a search sphere.
     * @example
     * <caption>Create two overlays in front of your avatar then search for overlays near your avatar.</caption>
    var overlayA = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    print("Overlay A: " + overlayA);
    var overlayB = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    print("Overlay B: " + overlayB);
    
    var overlaysFound = Overlays.findOverlays(MyAvatar.position, 5.0);
    print("Overlays found: " + JSON.stringify(overlaysFound));
     * @param center - The center of the search sphere.
     * @param radius - The radius of the search sphere.
     * @returns The IDs of the overlays (local entities) that are visible and have bounding boxes that touch a search
        sphere.
     */
    function findOverlays(center: TVec3, radius: number): Uuid[];
    /**
     * Checks whether an overlay's (or entity's) assets have been loaded. For example, for an
    <code>{@link Overlays.OverlayPropertiesImage|"image"}</code> overlay, the result indicates whether its image has been
    loaded.
     * @example
     * <caption>Create an image overlay and report whether its image is loaded after 1s.</caption>
    var overlay = Overlays.addOverlay("image", {
        bounds: { x: 100, y: 100, width: 200, height: 200 },
        imageURL: "https://content.vircadia.com/eu-c-1/vircadia-assets/interface/default/default_particle.png"
    });
    Script.setTimeout(function () {
        var isLoaded = Overlays.isLoaded(overlay);
        print("Image loaded: " + isLoaded);
    }, 1000);
     * @param id - The ID of the overlay (or entity) to check.
     * @returns <code>true</code> if the overlay's (or entity's) assets have been loaded, otherwise
        <code>false</code>.
     */
    function isLoaded(id: Uuid): boolean;
    /**
     * Calculates the size of some text in a text overlay (or entity). The overlay (or entity) need not be set visible.
    <p><strong>Note:</strong> The size of text in a 3D overlay (or entity) cannot be calculated immediately after the
    overlay (or entity) is created; a short delay is required while the overlay (or entity) finishes being created.</p>
     * @example
     * <caption>Calculate the size of "hello" in a 3D text entity.</caption>
    var overlay = Overlays.addOverlay("text3d", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -2 })),
        rotation: MyAvatar.orientation,
        lineHeight: 0.2,
        visible: false
    });
    
    Script.setTimeout(function() {
        var textSize = Overlays.textSize(overlay, "hello");
        print("Size of \"hello\": " + JSON.stringify(textSize));
    }, 500);
     * @param id - The ID of the overlay (or entity) to use for calculation.
     * @param text - The string to calculate the size of.
     * @returns The size of the <code>text</code> if the object is a text overlay (or entity), otherwise
        <code>{ height: 0, width : 0 }</code>. If the object is a 2D overlay, the size is in pixels; if the object is a 3D
        overlay (or entity), the size is in meters.
     */
    function textSize(id: Uuid, text: string): Size;
    /**
     * Gets the width of the Interface window or HUD surface.
     * @returns The width, in pixels, of the Interface window if in desktop mode or the HUD surface if in HMD mode.
     */
    function width(): number;
    /**
     * Gets the height of the Interface window or HUD surface.
     * @returns The height, in pixels, of the Interface window if in desktop mode or the HUD surface if in HMD mode.
     */
    function height(): number;
    /**
     * Checks if an overlay (or entity) exists.
     * @param id - The ID of the overlay (or entity) to check.
     * @returns <code>true</code> if an overlay (or entity) with the given ID exists, <code>false</code> if it doesn't.
     */
    function isAddedOverlay(id: Uuid): boolean;
    /**
     * Generates a mouse press event on an overlay (or local entity).
     * @example
     * <caption>Create a 2D rectangle overlay plus a 3D cube overlay and generate mousePressOnOverlay events for the
    2D overlay.</caption>
    var overlay3D = Overlays.addOverlay("cube", {
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.3, y: 0.3, z: 0.3 },
        solid: true
    });
    print("3D overlay: " + overlay);
    
    var overlay2D = Overlays.addOverlay("rectangle", {
        bounds: { x: 100, y: 100, width: 200, height: 100 },
        color: { red: 255, green: 255, blue: 255 }
    });
    print("2D overlay: " + overlay);
    
    // Overlays.mousePressOnOverlay by default applies only to 3D overlays.
    Overlays.mousePressOnOverlay.connect(function(overlayID, event) {
        print("Clicked: " + overlayID);
    });
    
    Controller.mousePressEvent.connect(function (event) {
        // Overlays.getOverlayAtPoint applies only to 2D overlays.
        var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });
        if (overlay) {
            Overlays.sendMousePressOnOverlay(overlay, {
                type: "press",
                id: 0,
                pos2D: event
            });
        }
    });
     * @param id - The ID of the overlay (or local entity) to generate a mouse press event on.
     * @param event - The mouse press event details.
     */
    function sendMousePressOnOverlay(id: Uuid, event: PointerEvent): void;
    /**
     * Generates a mouse release event on an overlay (or local entity).
     * @param id - The ID of the overlay (or local entity) to generate a mouse release event on.
     * @param event - The mouse release event details.
     */
    function sendMouseReleaseOnOverlay(id: Uuid, event: PointerEvent): void;
    /**
     * Generates a mouse move event on an overlay (or local entity).
     * @param id - The ID of the overlay (or local entity) to generate a mouse move event on.
     * @param event - The mouse move event details.
     */
    function sendMouseMoveOnOverlay(id: Uuid, event: PointerEvent): void;
    /**
     * Generates a hover enter event on an overlay (or local entity).
     * @param id - The ID of the overlay (or local entity) to generate a hover enter event on.
     * @param event - The hover enter event details.
     */
    function sendHoverEnterOverlay(id: Uuid, event: PointerEvent): void;
    /**
     * Generates a hover over event on an overlay (or entity).
     * @param id - The ID of the overlay (or local entity) to generate a hover over event on.
     * @param event - The hover over event details.
     */
    function sendHoverOverOverlay(id: Uuid, event: PointerEvent): void;
    /**
     * Generates a hover leave event on an overlay (or local entity).
     * @param id - The ID of the overlay (or local entity) to generate a hover leave event on.
     * @param event - The hover leave event details.
     */
    function sendHoverLeaveOverlay(id: Uuid, event: PointerEvent): void;
    /**
     * Gets the ID of the <code>{@link Overlays.OverlayPropertiesWeb3D|"web3d"}</code> overlay
    ({@link Entities.EntityPropertiesWeb|Web} entity) that has keyboard focus.
     * @returns The ID of the <code>{@link Overlays.OverlayPropertiesWeb3D|"web3d"}</code> overlay
    ({@link Entities.EntityPropertiesWeb|Web} entity) that has focus, if any, otherwise <code>null</code>.
     */
    function getKeyboardFocusOverlay(): Uuid;
    /**
     * Sets the <code>{@link Overlays.OverlayPropertiesWeb3D|"web3d"}</code> overlay
    ({@link Entities.EntityPropertiesWeb|Web} entity) that has keyboard focus.
     * @param id - The ID of the <code>{@link Overlays.OverlayPropertiesWeb3D|"web3d"}</code> overlay
    ({@link Entities.EntityPropertiesWeb|Web} entity) to set keyboard focus to. Use <code>null</code> or
    {@link Uuid(0)|Uuid.NULL} to unset keyboard focus from an overlay (entity).
     */
    function setKeyboardFocusOverlay(id: Uuid): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>AnimationCache</code> API manages animation cache resources.
 * @property numTotal - Total number of total resources. <em>Read-only.</em>
 * @property numCached - Total number of cached resource. <em>Read-only.</em>
 * @property sizeTotal - Size in bytes of all resources. <em>Read-only.</em>
 * @property sizeCached - Size in bytes of all cached resources. <em>Read-only.</em>
 * @property numGlobalQueriesPending - Total number of global queries pending (across all resource cache managers).
    <em>Read-only.</em>
 * @property numGlobalQueriesLoading - Total number of global queries loading (across all resource cache managers).
    <em>Read-only.</em>
 */
declare namespace AnimationCache {
    /**
     * Gets information about an animation resource.
     * @param url - The URL of the animation.
     * @returns An animation object.
     */
    function getAnimation(url: string): AnimationObject;
    /**
     * Gets the URLs of all resources in the cache.
     * @example
     * <caption>Report cached resources.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    
    var cachedResources = AnimationCache.getResourceList();
    print("Cached resources: " + JSON.stringify(cachedResources));
     * @returns The URLs of all resources in the cache.
     */
    function getResourceList(): string[];
    /**
     * @param deltaSize - Delta size.
     */
    function updateTotalSize(deltaSize: number): void;
    /**
     * Prefetches a resource.
     * @example
     * <caption>Prefetch a resource and wait until it has loaded.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    // TextureCache has its own version of this function.
    
    var resourceURL = "https://cdn-1.vircadia.com/eu-c-1/vircadia-public/clement/production/animations/sitting_idle.fbx";
    var resourceObject = AnimationCache.prefetch(resourceURL);
    
    function checkIfResourceLoaded(state) {
        if (state === Resource.State.FINISHED) {
            print("Resource loaded and ready.");
        } else if (state === Resource.State.FAILED) {
            print("Resource not loaded.");
        }
    }
    
    // Resource may have already been loaded.
    print("Resource state: " + resourceObject.state);
    checkIfResourceLoaded(resourceObject.state);
    
    // Resource may still be loading.
    resourceObject.stateChanged.connect(function (state) {
        print("Resource state changed to: " + state);
        checkIfResourceLoaded(state);
    });
     * @param url - The URL of the resource to prefetch.
     * @returns A resource object.
     */
    function prefetch(url: string): ResourceObject;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Information about an animation resource, created by {@link AnimationCache.getAnimation}.
 * @property jointNames - The names of the joints that are animated. <em>Read-only.</em>
 * @property frames - The frames in the animation. <em>Read-only.</em>
 */
declare class AnimationObject {
    /**
     * Gets the names of the joints that are animated.
     * @returns The names of the joints that are animated.
     */
    static getJointNames(): string[];
    /**
     * Gets the frames in the animation.
     * @returns The frames in the animation.
     */
    static getFrames(): AnimationFrameObject[];
    /**
     * The names of the joints that are animated. <em>Read-only.</em>
    */
    jointNames: string[];
    /**
     * The frames in the animation. <em>Read-only.</em>
    */
    frames: AnimationFrameObject[];
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Joint rotations in one frame of an {@link AnimationObject}.
 * @property rotations - Joint rotations. <em>Read-only.</em>
 */
declare class AnimationFrameObject {
    /**
     * Gets the joint rotations in the animation frame.
     * @returns The joint rotations in the animation frame.
     */
    static getRotations(): TQuat[];
    /**
     * Joint rotations. <em>Read-only.</em>
    */
    rotations: TQuat[];
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AudioStats</code> API provides statistics of the client and mixer audio.
 * @property clientStream - Statistics of the client's audio stream.
    <em>Read-only.</em>
 * @property inputReadMsMax - The maximum duration of a block of audio data recently read from the microphone, in
    ms.
    <em>Read-only.</em>
 * @property inputUnplayedMsMax - The maximum duration of microphone audio recently in the input buffer waiting to
    be played, in ms.
    <em>Read-only.</em>
 * @property mixerStream - Statistics of the audio mixer's stream.
    <em>Read-only.</em>
 * @property outputUnplayedMsMax - The maximum duration of output audio recently in the output buffer waiting to
    be played, in ms.
    <em>Read-only.</em>
 * @property pingMs - The current ping time to the audio mixer, in ms.
    <em>Read-only.</em>
 * @property sentTimegapMsAvg - The overall average time between sending data packets to the audio mixer, in ms.
    <em>Read-only.</em>
 * @property sentTimegapMsAvgWindow - The recent average time between sending data packets to the audio mixer, in
    ms.
    <em>Read-only.</em>
 * @property sentTimegapMsMax - The overall maximum time between sending data packets to the audio mixer, in ms.
    <em>Read-only.</em>
 * @property sentTimegapMsMaxWindow - The recent maximum time between sending data packets to the audio mixer, in
    ms.
    <em>Read-only.</em>
 */
declare namespace AudioStats {
    /**
     * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Statistics for an audio stream.
    
    <p>Provided in properties of the {@link AudioStats} API.</p>
     * @property dropCount - The number of silent or old audio frames dropped.
        <em>Read-only.</em>
     * @property framesAvailable - The number of audio frames containing data available.
        <em>Read-only.</em>
     * @property framesAvailableAvg - The time-weighted average of audio frames containing data available.
        <em>Read-only.</em>
     * @property framesDesired - The desired number of audio frames for the jitter buffer.
        <em>Read-only.</em>
     * @property lastStarveDurationCount - The most recent number of consecutive times that audio frames have not been
        available for processing.
        <em>Read-only.</em>
     * @property lossCount - The total number of audio packets lost.
        <em>Read-only.</em>
     * @property lossCountWindow - The number of audio packets lost since the previous statistic.
        <em>Read-only.</em>
     * @property lossRate - The ratio of the total number of audio packets lost to the total number of audio packets
        expected.
        <em>Read-only.</em>
     * @property lossRateWindow - The ratio of the number of audio packets lost to the number of audio packets
        expected since the previous statistic.
        <em>Read-only.</em>
     * @property overflowCount - The number of times that the audio ring buffer has overflowed.
        <em>Read-only.</em>
     * @property starveCount - The total number of times that audio frames have not been available for processing.
        <em>Read-only.</em>
     * @property timegapMsAvg - The overall average time between data packets, in ms.
        <em>Read-only.</em>
     * @property timegapMsAvgWindow - The recent average time between data packets, in ms.
        <em>Read-only.</em>
     * @property timegapMsMax - The overall maximum time between data packets, in ms.
        <em>Read-only.</em>
     * @property timegapMsMaxWindow - The recent maximum time between data packets, in ms.
        <em>Read-only.</em>
     * @property unplayedMsMax - The duration of audio waiting to be played, in ms.
        <em>Read-only.</em>
     */
    class AudioStreamStats {
        /**
         * The number of silent or old audio frames dropped.
         * <em>Read-only.</em>
        */
        dropCount: number;
        /**
         * The number of audio frames containing data available.
         * <em>Read-only.</em>
        */
        framesAvailable: number;
        /**
         * The time-weighted average of audio frames containing data available.
         * <em>Read-only.</em>
        */
        framesAvailableAvg: number;
        /**
         * The desired number of audio frames for the jitter buffer.
         * <em>Read-only.</em>
        */
        framesDesired: number;
        /**
         * The most recent number of consecutive times that audio frames have not been
         * available for processing.
         * <em>Read-only.</em>
        */
        lastStarveDurationCount: number;
        /**
         * The total number of audio packets lost.
         * <em>Read-only.</em>
        */
        lossCount: number;
        /**
         * The number of audio packets lost since the previous statistic.
         * <em>Read-only.</em>
        */
        lossCountWindow: number;
        /**
         * The ratio of the total number of audio packets lost to the total number of audio packets
         * expected.
         * <em>Read-only.</em>
        */
        lossRate: number;
        /**
         * The ratio of the number of audio packets lost to the number of audio packets
         * expected since the previous statistic.
         * <em>Read-only.</em>
        */
        lossRateWindow: number;
        /**
         * The number of times that the audio ring buffer has overflowed.
         * <em>Read-only.</em>
        */
        overflowCount: number;
        /**
         * The total number of times that audio frames have not been available for processing.
         * <em>Read-only.</em>
        */
        starveCount: number;
        /**
         * The overall average time between data packets, in ms.
         * <em>Read-only.</em>
        */
        timegapMsAvg: number;
        /**
         * The recent average time between data packets, in ms.
         * <em>Read-only.</em>
        */
        timegapMsAvgWindow: number;
        /**
         * The overall maximum time between data packets, in ms.
         * <em>Read-only.</em>
        */
        timegapMsMax: number;
        /**
         * The recent maximum time between data packets, in ms.
         * <em>Read-only.</em>
        */
        timegapMsMaxWindow: number;
        /**
         * The duration of audio waiting to be played, in ms.
         * <em>Read-only.</em>
        */
        unplayedMsMax: number;
    }
}

declare namespace AudioEffectOptions {
    /**
     * Reverberation options that can be used to initialize an {@link AudioEffectOptions} object when created.
     */
    type ReverbOptions = {
        /**
         * The corner frequency (Hz) of the low-pass filter at reverb input.
         * @defaultValue 10000
         */
        bandwidth: number;
        /**
         * The delay (milliseconds) between dry signal and the onset of early reflections.
         * @defaultValue 20
         */
        preDelay: number;
        /**
         * The delay (milliseconds) between early reflections and the onset of reverb tail.
         */
        lateDelay: number;
        /**
         * The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.
         * @defaultValue 2
         */
        reverbTime: number;
        /**
         * Adjusts the buildup of echo density in the early reflections, normally 100%.
         * @defaultValue 100
         */
        earlyDiffusion: number;
        /**
         * Adjusts the buildup of echo density in the reverb tail, normally 100%.
         * @defaultValue 100
         */
        lateDiffusion: number;
        /**
         * The apparent room size, from small (0%) to large (100%).
         * @defaultValue 50
         */
        roomSize: number;
        /**
         * Adjusts the echo density in the reverb tail, normally 100%.
         * @defaultValue 100
         */
        density: number;
        /**
         * Adjusts the bass-frequency reverb time, as multiple of reverbTime.
         * @defaultValue 1.5
         */
        bassMult: number;
        /**
         * The crossover frequency (Hz) for the onset of bassMult.
         * @defaultValue 250
         */
        bassFreq: number;
        /**
         * Reduces the high-frequency reverb time, as attenuation (dB).
         * @defaultValue -6
         */
        highGain: number;
        /**
         * The crossover frequency (Hz) for the onset of highGain.
         * @defaultValue 3000
         */
        highFreq: number;
        /**
         * The rate of modulation (Hz) of the LFO-modulated delay lines.
         * @defaultValue 2.3
         */
        modRate: number;
        /**
         * The depth of modulation (percent) of the LFO-modulated delay lines.
         * @defaultValue 50
         */
        modDepth: number;
        /**
         * Adjusts the relative level (dB) of the early reflections.
         */
        earlyGain: number;
        /**
         * Adjusts the relative level (dB) of the reverb tail.
         */
        lateGain: number;
        /**
         * The apparent distance of the source (percent) in the early reflections.
         * @defaultValue 20
         */
        earlyMixLeft: number;
        /**
         * The apparent distance of the source (percent) in the early reflections.
         * @defaultValue 20
         */
        earlyMixRight: number;
        /**
         * The apparent distance of the source (percent) in the reverb tail.
         * @defaultValue 90
         */
        lateMixLeft: number;
        /**
         * The apparent distance of the source (percent) in the reverb tail.
         * @defaultValue 90
         */
        lateMixRight: number;
        /**
         * Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).
         * @defaultValue 50
         */
        wetDryMix: number;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Audio effect options used by the {@link Audio} API.

<p>Create using <code>new AudioEffectOptions(...)</code>.</p>
 * @property bandwidth - The corner frequency (Hz) of the low-pass filter at reverb input.
 * @property preDelay - The delay (milliseconds) between dry signal and the onset of early reflections.
 * @property lateDelay - The delay (milliseconds) between early reflections and the onset of reverb tail.
 * @property reverbTime - The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.
 * @property earlyDiffusion - Adjusts the buildup of echo density in the early reflections, normally 100%.
 * @property lateDiffusion - Adjusts the buildup of echo density in the reverb tail, normally 100%.
 * @property roomSize - The apparent room size, from small (0%) to large (100%).
 * @property density - Adjusts the echo density in the reverb tail, normally 100%.
 * @property bassMult - Adjusts the bass-frequency reverb time, as multiple of reverbTime.
 * @property bassFreq - The crossover frequency (Hz) for the onset of bassMult.
 * @property highGain - Reduces the high-frequency reverb time, as attenuation (dB).
 * @property highFreq - The crossover frequency (Hz) for the onset of highGain.
 * @property modRate - The rate of modulation (Hz) of the LFO-modulated delay lines.
 * @property modDepth - The depth of modulation (percent) of the LFO-modulated delay lines.
 * @property earlyGain - Adjusts the relative level (dB) of the early reflections.
 * @property lateGain - Adjusts the relative level (dB) of the reverb tail.
 * @property earlyMixLeft - The apparent distance of the source (percent) in the early reflections.
 * @property earlyMixRight - The apparent distance of the source (percent) in the early reflections.
 * @property lateMixLeft - The apparent distance of the source (percent) in the reverb tail.
 * @property lateMixRight - The apparent distance of the source (percent) in the reverb tail.
 * @property wetDryMix - Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).
 * @param [reverbOptions = null] - Reverberation options.
 */
declare class AudioEffectOptions {
    constructor(reverbOptions?: AudioEffectOptions.ReverbOptions);
    /**
     * The corner frequency (Hz) of the low-pass filter at reverb input.
    */
    bandwidth: number;
    /**
     * The delay (milliseconds) between dry signal and the onset of early reflections.
    */
    preDelay: number;
    /**
     * The delay (milliseconds) between early reflections and the onset of reverb tail.
    */
    lateDelay: number;
    /**
     * The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.
    */
    reverbTime: number;
    /**
     * Adjusts the buildup of echo density in the early reflections, normally 100%.
    */
    earlyDiffusion: number;
    /**
     * Adjusts the buildup of echo density in the reverb tail, normally 100%.
    */
    lateDiffusion: number;
    /**
     * The apparent room size, from small (0%) to large (100%).
    */
    roomSize: number;
    /**
     * Adjusts the echo density in the reverb tail, normally 100%.
    */
    density: number;
    /**
     * Adjusts the bass-frequency reverb time, as multiple of reverbTime.
    */
    bassMult: number;
    /**
     * The crossover frequency (Hz) for the onset of bassMult.
    */
    bassFreq: number;
    /**
     * Reduces the high-frequency reverb time, as attenuation (dB).
    */
    highGain: number;
    /**
     * The crossover frequency (Hz) for the onset of highGain.
    */
    highFreq: number;
    /**
     * The rate of modulation (Hz) of the LFO-modulated delay lines.
    */
    modRate: number;
    /**
     * The depth of modulation (percent) of the LFO-modulated delay lines.
    */
    modDepth: number;
    /**
     * Adjusts the relative level (dB) of the early reflections.
    */
    earlyGain: number;
    /**
     * Adjusts the relative level (dB) of the reverb tail.
    */
    lateGain: number;
    /**
     * The apparent distance of the source (percent) in the early reflections.
    */
    earlyMixLeft: number;
    /**
     * The apparent distance of the source (percent) in the early reflections.
    */
    earlyMixRight: number;
    /**
     * The apparent distance of the source (percent) in the reverb tail.
    */
    lateMixLeft: number;
    /**
     * The apparent distance of the source (percent) in the reverb tail.
    */
    lateMixRight: number;
    /**
     * Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).
    */
    wetDryMix: number;
}

declare namespace AudioInjector {
    /**
     * Configures where and how an audio injector plays its audio.
     */
    type AudioInjectorOptions = {
        /**
         * The position in the domain to play the sound.
         * @defaultValue Vec3.ZERO
         */
        position: TVec3;
        /**
         * The orientation in the domain to play the sound in.
         * @defaultValue Quat.IDENTITY
         */
        orientation: TQuat;
        /**
         * Playback volume, between <code>0.0</code> and <code>1.0</code>.
         * @defaultValue 1.0
         */
        volume: number;
        /**
         * Alter the pitch of the sound, within +/- 2 octaves. The value is the relative sample rate to
         * resample the sound at, range <code>0.0625</code> &ndash; <code>16.0</code>.<br />
         * A value of <code>0.0625</code> lowers the pitch by 2 octaves.<br />
         * A value of <code>1.0</code> means there is no change in pitch.<br />
         * A value of <code>16.0</code> raises the pitch by 2 octaves.
         * @defaultValue 1.0
         */
        pitch: number;
        /**
         * If <code>true</code>, the sound is played repeatedly until playback is stopped.
         */
        loop: boolean;
        /**
         * Starts playback from a specified time (seconds) within the sound file, &ge;
         * <code>0</code>.
         */
        secondOffset: number;
        /**
         * If <code>true</code>, the sound is played back locally on the client rather than to
         * others via the audio mixer.
         */
        localOnly: boolean;
        /**
         * <p class="important">Deprecated: This property is deprecated and will be
         * removed.</p>
         */
        ignorePenumbra: boolean;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Plays or "injects" the content of an audio file.

<p>Create using {@link Audio} API methods.</p>
 * @property playing - <code>true</code> if the audio is currently playing, otherwise <code>false</code>.
    <em>Read-only.</em>
 * @property loudness - The loudness in the last frame of audio, range <code>0.0</code> &ndash; <code>1.0</code>.
    <em>Read-only.</em>
 * @property options - Configures how the injector plays the audio.
 */
declare class AudioInjector {
    /**
     * Stops current playback, if any, and starts playing from the beginning.
     */
    static restart(): void;
    /**
     * Stops audio playback.
     * @example
     * <caption>Stop playing a sound before it finishes.</caption>
    var sound = SoundCache.getSound(Script.resourcesPath() + "sounds/sample.wav");
    var injector;
    var injectorOptions = {
        position: MyAvatar.position
    };
    
    Script.setTimeout(function () { // Give the sound time to load.
        injector = Audio.playSound(sound, injectorOptions);
    }, 1000);
    
    Script.setTimeout(function () {
        injector.stop();
    }, 2000);
     */
    static stop(): void;
    /**
     * Gets the current configuration of the audio injector.
     * @returns Configuration of how the injector plays the audio.
     */
    static getOptions(): AudioInjector.AudioInjectorOptions;
    /**
     * Configures how the injector plays the audio.
     * @param options - Configuration of how the injector plays the audio.
     */
    static setOptions(options: AudioInjector.AudioInjectorOptions): void;
    /**
     * Gets the loudness of the most recent frame of audio played.
     * @returns The loudness of the most recent frame of audio played, range <code>0.0</code> &ndash; <code>1.0</code>.
     */
    static getLoudness(): number;
    /**
     * Gets whether or not the audio is currently playing.
     * @example
     * <caption>See if a sound is playing.</caption>
    var sound = SoundCache.getSound(Script.resourcesPath() + "sounds/sample.wav");
    var injector;
    var injectorOptions = {
        position: MyAvatar.position
    };
    
    Script.setTimeout(function () { // Give the sound time to load.
        injector = Audio.playSound(sound, injectorOptions);
    }, 1000);
    
    Script.setTimeout(function () {
        print("Sound is playing: " + injector.isPlaying());
    }, 2000);
     * @returns <code>true</code> if the audio is currently playing, otherwise <code>false</code>.
     */
    static isPlaying(): boolean;
    /**
     * <code>true</code> if the audio is currently playing, otherwise <code>false</code>.
     * <em>Read-only.</em>
    */
    playing: boolean;
    /**
     * The loudness in the last frame of audio, range <code>0.0</code> &ndash; <code>1.0</code>.
     * <em>Read-only.</em>
    */
    loudness: number;
    /**
     * Configures how the injector plays the audio.
    */
    options: AudioInjector.AudioInjectorOptions;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>An audio resource, created by {@link SoundCache.getSound}, to be played back using {@link Audio.playSound}.
<p>Supported formats:</p>
<ul>
  <li>WAV: 16-bit uncompressed at any sample rate, with 1 (mono), 2 (stereo), or 4 (ambisonic) channels.</li>
  <li>MP3: Mono or stereo, at any sample rate.</li>
  <li>RAW: 48khz 16-bit mono or stereo. File name must include <code>".stereo"</code> to be interpreted as stereo.</li>
</ul>
 * @property downloaded - <code>true</code> if the sound has been downloaded and is ready to be played, otherwise
    <code>false</code>. <em>Read-only.</em>
 * @property duration - The duration of the sound, in seconds. <em>Read-only.</em>
 */
declare class SoundObject {
    /**
     * <code>true</code> if the sound has been downloaded and is ready to be played, otherwise
     * <code>false</code>. <em>Read-only.</em>
    */
    downloaded: boolean;
    /**
     * The duration of the sound, in seconds. <em>Read-only.</em>
    */
    duration: number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>SoundCache</code> API manages sound cache resources.
 * @property numTotal - Total number of total resources. <em>Read-only.</em>
 * @property numCached - Total number of cached resource. <em>Read-only.</em>
 * @property sizeTotal - Size in bytes of all resources. <em>Read-only.</em>
 * @property sizeCached - Size in bytes of all cached resources. <em>Read-only.</em>
 * @property numGlobalQueriesPending - Total number of global queries pending (across all resource cache managers).
    <em>Read-only.</em>
 * @property numGlobalQueriesLoading - Total number of global queries loading (across all resource cache managers).
    <em>Read-only.</em>
 */
declare namespace SoundCache {
    /**
     * Loads the content of an audio file into a {@link SoundObject}, ready for playback by {@link Audio.playSound}.
     * @param url - The URL of the audio file to load &mdash; Web, ATP, or file. See {@link SoundObject} for supported
        formats.
     * @returns The sound ready for playback.
     */
    function getSound(url: string): SoundObject;
    /**
     * Gets the URLs of all resources in the cache.
     * @example
     * <caption>Report cached resources.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    
    var cachedResources = AnimationCache.getResourceList();
    print("Cached resources: " + JSON.stringify(cachedResources));
     * @returns The URLs of all resources in the cache.
     */
    function getResourceList(): string[];
    /**
     * @param deltaSize - Delta size.
     */
    function updateTotalSize(deltaSize: number): void;
    /**
     * Prefetches a resource.
     * @example
     * <caption>Prefetch a resource and wait until it has loaded.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    // TextureCache has its own version of this function.
    
    var resourceURL = "https://cdn-1.vircadia.com/eu-c-1/vircadia-public/clement/production/animations/sitting_idle.fbx";
    var resourceObject = AnimationCache.prefetch(resourceURL);
    
    function checkIfResourceLoaded(state) {
        if (state === Resource.State.FINISHED) {
            print("Resource loaded and ready.");
        } else if (state === Resource.State.FAILED) {
            print("Resource not loaded.");
        }
    }
    
    // Resource may have already been loaded.
    print("Resource state: " + resourceObject.state);
    checkIfResourceLoaded(resourceObject.state);
    
    // Resource may still be loading.
    resourceObject.stateChanged.connect(function (state) {
        print("Resource state changed to: " + state);
        checkIfResourceLoaded(state);
    });
     * @param url - The URL of the resource to prefetch.
     * @returns A resource object.
     */
    function prefetch(url: string): ResourceObject;
}

/**
 * <p>The avatar mixer data comprises different types of data, with the data rates of each being tracked in kbps.</p>

<table>
  <thead>
    <tr><th>Rate Name</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"globalPosition"</code></td><td>Incoming global position.</td></tr>
    <tr><td><code>"localPosition"</code></td><td>Incoming local position.</td></tr>
    <tr><td><code>"handControllers"</code></td><td>Incoming hand controllers.</td></tr>
    <tr><td><code>"avatarBoundingBox"</code></td><td>Incoming avatar bounding box.</td></tr>
    <tr><td><code>"avatarOrientation"</code></td><td>Incoming avatar orientation.</td></tr>
    <tr><td><code>"avatarScale"</code></td><td>Incoming avatar scale.</td></tr>
    <tr><td><code>"lookAtPosition"</code></td><td>Incoming look-at position.</td></tr>
    <tr><td><code>"audioLoudness"</code></td><td>Incoming audio loudness.</td></tr>
    <tr><td><code>"sensorToWorkMatrix"</code></td><td>Incoming sensor-to-world matrix.</td></tr>
    <tr><td><code>"additionalFlags"</code></td><td>Incoming additional avatar flags.</td></tr>
    <tr><td><code>"parentInfo"</code></td><td>Incoming parent information.</td></tr>
    <tr><td><code>"faceTracker"</code></td><td>Incoming face tracker data.</td></tr>
    <tr><td><code>"jointData"</code></td><td>Incoming joint data.</td></tr>
    <tr><td><code>"jointDefaultPoseFlagsRate"</code></td><td>Incoming joint default pose flags.</td></tr>
    <tr><td><code>"farGrabJointRate"</code></td><td>Incoming far grab joint.</td></tr>
    <tr><td><code>"globalPositionOutbound"</code></td><td>Outgoing global position.</td></tr>
    <tr><td><code>"localPositionOutbound"</code></td><td>Outgoing local position.</td></tr>
    <tr><td><code>"avatarBoundingBoxOutbound"</code></td><td>Outgoing avatar bounding box.</td></tr>
    <tr><td><code>"avatarOrientationOutbound"</code></td><td>Outgoing avatar orientation.</td></tr>
    <tr><td><code>"avatarScaleOutbound"</code></td><td>Outgoing avatar scale.</td></tr>
    <tr><td><code>"lookAtPositionOutbound"</code></td><td>Outgoing look-at position.</td></tr>
    <tr><td><code>"audioLoudnessOutbound"</code></td><td>Outgoing audio loudness.</td></tr>
    <tr><td><code>"sensorToWorkMatrixOutbound"</code></td><td>Outgoing sensor-to-world matrix.</td></tr>
    <tr><td><code>"additionalFlagsOutbound"</code></td><td>Outgoing additional avatar flags.</td></tr>
    <tr><td><code>"parentInfoOutbound"</code></td><td>Outgoing parent information.</td></tr>
    <tr><td><code>"faceTrackerOutbound"</code></td><td>Outgoing face tracker data.</td></tr>
    <tr><td><code>"jointDataOutbound"</code></td><td>Outgoing joint data.</td></tr>
    <tr><td><code>"jointDefaultPoseFlagsOutbound"</code></td><td>Outgoing joint default pose flags.</td></tr>
    <tr><td><code>""</code></td><td>When no rate name is specified, the total incoming data rate is provided.</td></tr>
  </tbody>
</table>
 */
declare type AvatarDataRate = string;

/**
 * <p>The avatar mixer data comprises different types of data updated at different rates, in Hz.</p>

<table>
  <thead>
    <tr><th>Rate Name</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"globalPosition"</code></td><td>Global position.</td></tr>
    <tr><td><code>"localPosition"</code></td><td>Local position.</td></tr>
    <tr><td><code>"handControllers"</code></td><td>Hand controller positions and orientations.</td></tr>
    <tr><td><code>"avatarBoundingBox"</code></td><td>Avatar bounding box.</td></tr>
    <tr><td><code>"avatarOrientation"</code></td><td>Avatar orientation.</td></tr>
    <tr><td><code>"avatarScale"</code></td><td>Avatar scale.</td></tr>
    <tr><td><code>"lookAtPosition"</code></td><td>Look-at position.</td></tr>
    <tr><td><code>"audioLoudness"</code></td><td>Audio loudness.</td></tr>
    <tr><td><code>"sensorToWorkMatrix"</code></td><td>Sensor-to-world matrix.</td></tr>
    <tr><td><code>"additionalFlags"</code></td><td>Additional avatar flags.</td></tr>
    <tr><td><code>"parentInfo"</code></td><td>Parent information.</td></tr>
    <tr><td><code>"faceTracker"</code></td><td>Face tracker data.</td></tr>
    <tr><td><code>"jointData"</code></td><td>Joint data.</td></tr>
    <tr><td><code>"farGrabJointData"</code></td><td>Far grab joint data.</td></tr>
    <tr><td><code>""</code></td><td>When no rate name is specified, the overall update rate is provided.</td></tr>
  </tbody>
</table>
 */
declare type AvatarUpdateRate = string;

/**
 * Information on an attachment worn by the avatar.
 */
declare type AttachmentData = {
    /**
     * The URL of the glTF, FBX, or OBJ model file. glTF models may be in JSON or binary format
     * (".gltf" or ".glb" URLs respectively).
     */
    modelUrl: string;
    /**
     * The name of the joint that the attachment is parented to.
     */
    jointName: string;
    /**
     * The offset from the joint that the attachment is positioned at.
     */
    translation: TVec3;
    /**
     * The rotation applied to the model relative to the joint orientation.
     */
    rotation: TVec3;
    /**
     * The scale applied to the attachment model.
     */
    scale: number;
    /**
     * If <code>true</code> and the model has a skeleton, the bones of the attached model's skeleton are
     * rotated to fit the avatar's current pose. If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and
     * <code>scale</code> parameters are ignored.
     */
    soft: boolean;
};

/**
 * Information about a ray-to-avatar intersection.
 */
declare type RayToAvatarIntersectionResult = {
    /**
     * <code>true</code> if an avatar is intersected, <code>false</code> if it isn't.
     */
    intersects: boolean;
    /**
     * The ID of the avatar that is intersected.
     */
    avatarID: string;
    /**
     * The distance from the ray origin to the intersection.
     */
    distance: number;
    /**
     * The name of the box face that is intersected; <code>"UNKNOWN_FACE"</code> if mesh was picked
     * against.
     */
    face: string;
    /**
     * The ray intersection point in world coordinates.
     */
    intersection: TVec3;
    /**
     * The surface normal at the intersection point.
     */
    surfaceNormal: TVec3;
    /**
     * The index of the joint intersected.
     */
    jointIndex: number;
    /**
     * Extra information on the mesh intersected if mesh was picked against,
     * <code>{}</code> if it wasn't.
     */
    extraInfo: SubmeshIntersection;
};

/**
 * Information about a parabola-to-avatar intersection.
 */
declare type ParabolaToAvatarIntersectionResult = RayToAvatarIntersectionResult;

/**
 * An object with the UUIDs of avatar entities as keys and avatar entity properties objects as values.
 */
declare type AvatarEntityMap = {
    [key: string]: Entities.EntityProperties;
};

/**
 * <p>The pointing state of the hands is specified by the following values:</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th>
  </thead>
  <tbody>
    <tr><td><code>0</code></td><td>No hand is pointing.</td></tr>
    <tr><td><code>1</code></td><td>The left hand is pointing.</td></tr>
    <tr><td><code>2</code></td><td>The right hand is pointing.</td></tr>
    <tr><td><code>4</code></td><td>It is the index finger that is pointing.</td></tr>
  </tbody>
</table>
<p>The values for the hand states are added together to give the <code>HandState</code> value. For example, if the left
hand's finger is pointing, the value is <code>1 + 4 == 5</code>.
 */
declare type HandState = number;

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>AvatarList</code> API provides information about avatars within the current domain.

<p><strong>Warning:</strong> An API named "<code>AvatarList</code>" is also provided for Interface, client entity, and avatar
scripts, however, it is a synonym for the {@link AvatarManager} API.</p>
 */
declare namespace AvatarList {
    /**
     * Gets the IDs of all avatars in the domain.
    <p><strong>Warning:</strong> If the AC script is acting as an avatar (i.e., <code>Agent.isAvatar == true</code>) the
    avatar's ID is NOT included in results.</p>
     * @example
     * <caption>Report the IDS of all avatars within the domain.</caption>
    var avatars = AvatarList.getAvatarIdentifiers();
    print("Avatars in the domain: " + JSON.stringify(avatars));
     * @returns The IDs of all avatars in the domain (excluding AC script's avatar).
     */
    function getAvatarIdentifiers(): Uuid[];
    /**
     * Gets the IDs of all avatars within a specified distance from a point.
    <p><strong>Warning:</strong> If the AC script is acting as an avatar (i.e., <code>Agent.isAvatar == true</code>) the
    avatar's ID is NOT included in results.</p>
     * @example
     * <caption>Report the IDs of all avatars within 10m of the origin.</caption>
    var RANGE = 10;
    var avatars = AvatarList.getAvatarsInRange(Vec3.ZERO, RANGE);
    print("Avatars near the origin: " + JSON.stringify(avatars));
     * @param position - The point about which the search is performed.
     * @param range - The search radius.
     * @returns The IDs of all avatars within the search distance from the position (excluding AC script's avatar).
     */
    function getAvatarsInRange(position: TVec3, range: number): Uuid[];
    /**
     * Gets information about an avatar.
     * @param avatarID - The ID of the avatar.
     * @returns Information about the avatar.
     */
    function getAvatar(avatarID: Uuid): ScriptAvatar;
    /**
     * Checks whether there is an avatar within a specified distance from a point.
     * @param position - The test position.
     * @param range - The test distance.
     * @returns <code>true</code> if there's an avatar within the specified distance of the point, <code>false</code>
        if not.
     */
    function isAvatarInRange(position: string, range: string): boolean;
    /**
     * @param sessionUUID - New session ID.
     * @param oldSessionUUID - Old session ID.
     */
    function sessionUUIDChanged(sessionUUID: Uuid, oldSessionUUID: Uuid): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processAvatarDataPacket(message: any, sendingNode: any): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processAvatarIdentityPacket(message: any, sendingNode: any): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processBulkAvatarTraits(message: any, sendingNode: any): void;
    /**
     * @param message - Message.
     * @param sendingNode - Sending node.
     */
    function processKillAvatar(message: any, sendingNode: any): void;
}

/**
 * <p>An avatar has different types of data simulated at different rates, in Hz.</p>

<table>
  <thead>
    <tr><th>Rate Name</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"avatar" or ""</code></td><td>The rate at which the avatar is updated even if not in view.</td></tr>
    <tr><td><code>"avatarInView"</code></td><td>The rate at which the avatar is updated if in view.</td></tr>
    <tr><td><code>"skeletonModel"</code></td><td>The rate at which the skeleton model is being updated, even if there are no
      joint data available.</td></tr>
    <tr><td><code>"jointData"</code></td><td>The rate at which joint data are being updated.</td></tr>
    <tr><td><code>""</code></td><td>When no rate name is specified, the <code>"avatar"</code> update rate is
      provided.</td></tr>
  </tbody>
</table>
 */
declare type AvatarSimulationRate = string;

/**
 * Information about a joint in an avatar's skeleton hierarchy.
 */
declare type SkeletonJoint = {
    /**
     * Joint name.
     */
    name: string;
    /**
     * Joint index.
     */
    index: number;
    /**
     * Index of this joint's parent (<code>-1</code> if no parent).
     */
    parentIndex: number;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Information about an avatar.

<p>Create using {@link MyAvatar.getTargetAvatar} or {@link AvatarList.getAvatar}.</p>
 * @property position - The avatar's position.
 * @property scale - The target scale of the avatar without any restrictions on permissible values imposed by the
    domain.
 * @property handPosition - A user-defined hand position, in world coordinates. The position moves with the avatar but
   is otherwise not used or changed by Interface.
 * @property bodyPitch - The pitch of the avatar's body, in degrees.
 * @property bodyYaw - The yaw of the avatar's body, in degrees.
 * @property bodyRoll - The roll of the avatar's body, in degrees.
 * @property orientation - The orientation of the avatar's body.
 * @property headOrientation - The orientation of the avatar's head.
 * @property headPitch - The pitch of the avatar's head relative to the body, in degrees.
 * @property headYaw - The yaw of the avatar's head relative to the body, in degrees.
 * @property headRoll - The roll of the avatar's head relative to the body, in degrees.
 * @property velocity - The linear velocity of the avatar.
 * @property angularVelocity - The angular velocity of the avatar.
 * @property sessionUUID - The avatar's session ID.
 * @property displayName - The avatar's display name.
 * @property sessionDisplayName - The avatar's display name, sanitized and versioned, as defined by the avatar mixer.
    It is unique among all avatars present in the domain at the time.
 * @property isReplicated - <span class="important">Deprecated: This property is deprecated and will be
    removed.</span>
 * @property lookAtSnappingEnabled - <code>true</code> if the avatar's eyes snap to look at another avatar's eyes
    when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.
 * @property skeletonModelURL - The avatar's FST file.
 * @property attachmentData - Information on the avatar's attachments.
    <p class="important">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>
 * @property jointNames - The list of joints in the avatar model.
 * @property audioLoudness - The instantaneous loudness of the audio input that the avatar is injecting into the
    domain.
 * @property audioAverageLoudness - The rolling average loudness of the audio input that the avatar is injecting into
    the domain.
 * @property sensorToWorldMatrix - The scale, rotation, and translation transform from the user's real world to the
    avatar's size, orientation, and position in the virtual world.
 * @property controllerLeftHandMatrix - The rotation and translation of the left hand controller relative to the avatar.
 * @property controllerRightHandMatrix - The rotation and translation of the right hand controller relative to the
    avatar.
 * @property skeletonOffset - The rendering offset of the avatar.
 */
declare class ScriptAvatar {
    /**
     * Gets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the
    laser emanates from the tip of that finger, otherwise it emanates from the palm.
     * @returns The pointing state of the hand, or <code>-1</code> if the avatar data aren't available.
     */
    static getHandState(): HandState | number;
    /**
     * Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.
     * @param name - The name of the joint.
     * @returns The rotation of the joint relative to its parent, or {@link TQuat(0)|Quat.IDENTITY} if the avatar data
        aren't available.
     */
    static getJointRotation(name: string): TQuat;
    /**
     * Gets the translation of a joint relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @param name - The name of the joint.
     * @returns The translation of the joint relative to its parent, in model coordinates, or {@link TVec3(0)|Vec3.ZERO}
        if the avatar data aren't available.
     */
    static getJointTranslation(name: number): TVec3;
    /**
     * Gets the rotations of all joints in the avatar. Each joint's rotation is relative to its parent joint.
     * @returns The rotations of all joints relative to each's parent, or <code>[]</code> if the avatar data aren't
        available. The values are in the same order as the array returned by {@link ScriptAvatar.getJointNames}.
     */
    static getJointRotations(): TQuat[];
    /**
     * Gets the translations of all joints in the avatar. Each joint's translation is relative to its parent joint, in
    model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
     * @returns The translations of all joints relative to each's parent, in model coordinates, or <code>[]</code> if
        the avatar data aren't available. The values are in the same order as the array returned by
        {@link ScriptAvatar.getJointNames}.
     */
    static getJointTranslations(): TVec3[];
    /**
     * Checks that the data for a joint are valid.
     * @param index - The index of the joint.
     * @returns <code>true</code> if the joint data are valid, <code>false</code> if not or the avatar data aren't
        available.
     */
    static isJointDataValid(index: number): boolean;
    /**
     * Gets the joint index for a named joint. The joint index value is the position of the joint in the array returned by
    {@linkScriptAvatar.getJointNames}.
     * @param name - The name of the joint.
     * @returns The index of the joint if valid and avatar data are available, otherwise <code>-1</code>.
     */
    static getJointIndex(name: string): number;
    /**
     * Gets the names of all the joints in the avatar.
     * @returns The joint names, or <code>[]</code> if the avatar data aren't available.
     */
    static getJointNames(): string[];
    /**
     * Gets information about the models currently attached to the avatar.
     * @returns Information about all models attached to the avatar, or <code>[]</code> if the avatar data
        aren't available.
     */
    static getAttachmentData(): AttachmentData[];
    /**
     * Gets the rotation of a joint relative to the avatar.
     * @param index - The index of the joint.
     * @returns The rotation of the joint relative to the avatar, or {@link TQuat(0)|Quat.IDENTITY} if the avatar data
        aren't available.
     */
    static getAbsoluteJointRotationInObjectFrame(index: number): TQuat;
    /**
     * Gets the translation of a joint relative to the avatar.
     * @param index - The index of the joint.
     * @returns The translation of the joint relative to the avatar, or {@link TVec3(0)|Vec3.ZERO} if the avatar data
        aren't available.
     */
    static getAbsoluteJointTranslationInObjectFrame(index: number): TVec3;
    /**
     * Gets the default rotation of a joint in the avatar relative to its parent.
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @param index - The joint index.
     * @returns The default rotation of the joint if avatar data are available and the joint index is valid, otherwise
        {@link TQuat(0)|Quat.IDENTITY}.
     */
    static getDefaultJointRotation(index: number): TQuat;
    /**
     * Gets the default translation of a joint in the avatar relative to its parent, in model coordinates.
    <p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>
    <p>For information on the joint hierarchy used, see
    <a href="https://docs.overte.org/create/avatars/avatar-standards.html">Avatar Standards</a>.</p>
     * @param index - The joint index.
     * @returns The default translation of the joint (in model coordinates) if avatar data are available and the joint
        index is valid, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    static getDefaultJointTranslation(index: number): TVec3;
    /**
     * Gets the offset applied to the avatar for rendering.
     * @returns The skeleton offset if avatar data are available, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    static getSkeletonOffset(): TVec3;
    /**
     * Gets the position of a joint in the current avatar.
     * @param name - The name of the joint.
     * @returns The position of the joint in world coordinates, or {@link TVec3(0)|Vec3.ZERO} if avatar data aren't
        available.
     */
    static getJointPosition(name: string): TVec3;
    /**
     * Gets the position of the current avatar's neck in world coordinates.
     * @returns The position of the neck in world coordinates, or {@link TVec3(0)|Vec3.ZERO} if avatar data aren't
        available.
     */
    static getNeckPosition(): TVec3;
    /**
     * Gets the current acceleration of the avatar.
     * @returns The current acceleration of the avatar, or {@link TVec3(0)|Vec3.ZERO} if avatar data aren't available..
     */
    static getAcceleration(): TVec3;
    /**
     * Gets the ID of the entity or avatar that the avatar is parented to.
     * @returns The ID of the entity or avatar that the avatar is parented to. {@link Uuid(0)|Uuid.NULL} if not parented
        or avatar data aren't available.
     */
    static getParentID(): Uuid;
    /**
     * Gets the joint of the entity or avatar that the avatar is parented to.
     * @returns The joint of the entity or avatar that the avatar is parented to. <code>65535</code> or
        <code>-1</code> if parented to the entity or avatar's position and orientation rather than a joint, or avatar data
        aren't available.
     */
    static getParentJointIndex(): number;
    /**
     * Gets information on all the joints in the avatar's skeleton.
     * @returns Information about each joint in the avatar's skeleton.
     */
    static getSkeleton(): SkeletonJoint[];
    /**
     * @param [rateName = ""] - Rate name.
     * @returns Simulation rate in Hz, or <code>0.0</code> if avatar data aren't available.
     */
    static getSimulationRate(rateName?: AvatarSimulationRate): number;
    /**
     * Gets the position of the right palm in world coordinates.
     * @returns The position of the right palm in world coordinates, or {@link TVec3(0)|Vec3.ZERO} if avatar data aren't
        available.
     */
    static getLeftPalmPosition(): TVec3;
    /**
     * Gets the rotation of the right palm in world coordinates.
     * @returns The rotation of the right palm in world coordinates, or {@link TQuat(0)|Quat.IDENTITY} if the avatar data
        aren't available.
     */
    static getLeftPalmRotation(): TQuat;
    /**
     * The avatar's position.
    */
    position: TVec3;
    /**
     * The target scale of the avatar without any restrictions on permissible values imposed by the
     * domain.
    */
    scale: number;
    /**
     * A user-defined hand position, in world coordinates. The position moves with the avatar but
     * is otherwise not used or changed by Interface.
    */
    handPosition: TVec3;
    /**
     * The pitch of the avatar's body, in degrees.
    */
    bodyPitch: number;
    /**
     * The yaw of the avatar's body, in degrees.
    */
    bodyYaw: number;
    /**
     * The roll of the avatar's body, in degrees.
    */
    bodyRoll: number;
    /**
     * The orientation of the avatar's body.
    */
    orientation: TQuat;
    /**
     * The orientation of the avatar's head.
    */
    headOrientation: TQuat;
    /**
     * The pitch of the avatar's head relative to the body, in degrees.
    */
    headPitch: number;
    /**
     * The yaw of the avatar's head relative to the body, in degrees.
    */
    headYaw: number;
    /**
     * The roll of the avatar's head relative to the body, in degrees.
    */
    headRoll: number;
    /**
     * The linear velocity of the avatar.
    */
    velocity: TVec3;
    /**
     * The angular velocity of the avatar.
    */
    angularVelocity: TVec3;
    /**
     * The avatar's session ID.
    */
    sessionUUID: Uuid;
    /**
     * The avatar's display name.
    */
    displayName: string;
    /**
     * The avatar's display name, sanitized and versioned, as defined by the avatar mixer.
     * It is unique among all avatars present in the domain at the time.
    */
    sessionDisplayName: string;
    /**
     * <span class="important">Deprecated: This property is deprecated and will be
     * removed.</span>
    */
    isReplicated: boolean;
    /**
     * <code>true</code> if the avatar's eyes snap to look at another avatar's eyes
     * when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.
    */
    lookAtSnappingEnabled: boolean;
    /**
     * The avatar's FST file.
    */
    skeletonModelURL: string;
    /**
     * Information on the avatar's attachments.
     * <p class="important">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>
    */
    attachmentData: AttachmentData[];
    /**
     * The list of joints in the avatar model.
    */
    jointNames: string[];
    /**
     * The instantaneous loudness of the audio input that the avatar is injecting into the
     * domain.
    */
    audioLoudness: number;
    /**
     * The rolling average loudness of the audio input that the avatar is injecting into
     * the domain.
    */
    audioAverageLoudness: number;
    /**
     * The scale, rotation, and translation transform from the user's real world to the
     * avatar's size, orientation, and position in the virtual world.
    */
    sensorToWorldMatrix: TMat4;
    /**
     * The rotation and translation of the left hand controller relative to the avatar.
    */
    controllerLeftHandMatrix: TMat4;
    /**
     * The rotation and translation of the right hand controller relative to the
     * avatar.
    */
    controllerRightHandMatrix: TMat4;
    /**
     * The rendering offset of the avatar.
    */
    skeletonOffset: TVec3;
}

/**
 * The pose of a joint or other item relative to the world or a parent.
 */
declare type Pose = {
    /**
     * Translation.
     */
    translation: TVec3;
    /**
     * Rotation.
     */
    rotation: TQuat;
    /**
     * Velocity in m/s.
     */
    velocity: TVec3;
    /**
     * Angular velocity in rad/s.
     */
    angularVelocity: TVec3;
    /**
     * <code>true</code> if the pose is valid, otherwise <code>false</code>.
     */
    valid: boolean;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p><p>A {@link Controller} mapping object that can contain a set of routes that map:</p>
<ul>
    <li>{@link Controller.Standard} outputs to {@link Controller.Actions} actions or script functions.</li>
    <li>{@link Controller.Hardware} outputs to {@link Controller.Standard} outputs, {@link Controller.Actions} actions, or
    script functions.</li>
</ul>

<p>Create by one of the following methods:</p>
<ul>
    <li>Use {@link Controller.newMapping} to create the mapping object, add routes using {@link MappingObject#from|from} or
    {@link MappingObject#makeAxis|makeAxis}, and map the routes to actions or functions using {@link RouteObject}
    methods.</li>
    <li>Use {@link Controller.parseMapping} or {@link Controller.loadMapping} to load a {@link Controller.MappingJSON}.</li>
</ul>

<p>Enable the mapping using {@link MappingObject#enable|enable} or {@link Controller.enableMapping} for it to take
effect.</p>

<p>Mappings and their routes are applied according to the following rules:</p>
<ul>
    <li>One read per output: after a controller output has been read, it can't be read again. Exception: You can use
    {@link RouteObject#peek} to read a value without marking that output as having been read.</li>
    <li>Existing mapping routes take precedence over new mapping routes: within a mapping, if a route is added for a control
    output that already has a route the new route is ignored.</li>
    <li>New mappings override previous mappings: each output is processed using the route in the most recently enabled
    mapping that contains that output.</li>
</ul>
 */
declare class MappingObject {
    /**
     * Creates a new {@link RouteObject} from a controller output, ready to be mapped to a standard control, action, or
    function.
    <p>This is a QML-specific version of {@link MappingObject#from|from}: use this version in QML files.</p>
     * @param source - The controller output or function that is the source
        of the route data. If a function, it must return a number or a {@link Pose} value as the route data.
     * @returns A route ready for mapping to an action or function using {@link RouteObject} methods.
     */
    fromQml(source: Controller.Standard | Controller.Hardware | ((...params: any[]) => any)): RouteObject;
    /**
     * Creates a new {@link RouteObject} from two numeric {@link Controller.Hardware} outputs, one applied in the negative
    direction and the other in the positive direction, ready to be mapped to a standard control, action, or function.
    <p>This is a QML-specific version of {@link MappingObject#makeAxis|makeAxis}: use this version in QML files.</p>
     * @param source1 - The first, negative-direction controller output.
     * @param source2 - The second, positive-direction controller output.
     * @returns A route ready for mapping to an action or function using {@link RouteObject} methods. The data
        value passed to the route is the combined value of <code>source2 - source1</code>.
     */
    makeAxisQml(source1: Controller.Hardware, source2: Controller.Hardware): RouteObject;
    /**
     * Creates a new {@link RouteObject} from a controller output, ready to be mapped to a standard control, action, or
    function.
     * @param source - The controller output or function that is the source
        of the route data. If a function, it must return a number or a {@link Pose} value as the route data.
     * @returns A route ready for mapping to an action or function using {@link RouteObject} methods.
     */
    from(source: Controller.Standard | Controller.Hardware | ((...params: any[]) => any)): RouteObject;
    /**
     * Creates a new {@link RouteObject} from two numeric {@link Controller.Hardware} outputs, one applied in the negative
    direction and the other in the positive direction, ready to be mapped to a standard control, action, or function.
     * @example
     * <caption>Make the Oculus Touch triggers move your avatar up and down.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping
        .makeAxis(Controller.Hardware.OculusTouch.LT, Controller.Hardware.OculusTouch.RT)
        .to(Controller.Actions.Up);
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param source1 - The first, negative-direction controller output.
     * @param source2 - The second, positive-direction controller output.
     * @returns A route ready for mapping to an action or function using {@link RouteObject} methods. The data
        value passed to the route is the combined value of <code>source2 - source1</code>.
     */
    makeAxis(source1: Controller.Hardware, source2: Controller.Hardware): RouteObject;
    /**
     * Enables or disables the mapping. When enabled, the routes in the mapping take effect.
    <p>Synonymous with {@link Controller.enableMapping}.</p>
     * @param enable - If <code>true</code> then the mapping is enabled, otherwise it is disabled.
     * @returns The mapping object, so that further routes can be added.
     */
    enable(enable?: boolean): MappingObject;
    /**
     * Disables the mapping. When disabled, the routes in the mapping have no effect.
    <p>Synonymous with {@link Controller.disableMapping}.</p>
     * @returns The mapping object, so that further routes can be added.
     */
    disable(): MappingObject;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p><p>A route in a {@link MappingObject} used by the {@link Controller} API.</p>

<p>Create a route using {@link MappingObject} methods and apply this object's methods to process it, terminating with
{@link RouteObject#to} to apply it to a <code>Standard</code> control, action, or script function. Note: Loops are not
permitted.</p>

<p>Some methods apply to routes with number data, some apply routes with {@link Pose} data, and some apply to both route
types.<p>
 */
declare class RouteObject {
    /**
     * Terminates the route with a standard control, an action, or a script function. The output value from the route is
    sent to the specified destination.
    <p>This is a QML-specific version of {@link MappingObject#to|to}: use this version in QML files.</p>
     * @param destination - The standard control, action, or JavaScript
    function that the route output is mapped to. For a function, the parameter can be either the name of the function or
    an in-line function definition.
     */
    toQml(destination: Controller.Standard | Controller.Actions | ((...params: any[]) => any)): void;
    /**
     * Processes the route only if a condition is satisfied. The condition is evaluated before the route input is read, and
    the input is read only if the condition is <code>true</code>. Thus, if the condition is not met then subsequent
    routes using the same input are processed.
    <p>This is a QML-specific version of {@link MappingObject#when|when}: use this version in QML files.</p>
     * @param expression - <p>A <code>condition</code> may be a:</p>
        <ul>
            <li>A boolean or numeric {@link Controller.Hardware} property, which is evaluated as a boolean.</li>
            <li><code>!</code> followed by a {@link Controller.Hardware} property, indicating the logical NOT should be
            used.</li>
            <li>A script function returning a boolean value. This can be either the name of the function or an in-line
            definition.</li>
        </ul>
    <p>If an array of conditions is provided, their values are ANDed together.</p>
     * @returns The <code>RouteObject</code> with the condition added.
     */
    whenQml(expression: boolean | boolean[] | number | number[]): RouteObject;
    /**
     * Terminates the route with a standard control, an action, or a script function. The output value from the route is
    sent to the specified destination.
     * @example
     * <caption>Make the right trigger move your avatar up.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    
    mapping.from(Controller.Standard.RT).to(Controller.Actions.TranslateY);
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @example
     * <caption>Make the right trigger call a function.</caption>
    function onRightTrigger(value) {
        print("Trigger value: " + value);
    }
    
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    
    mapping.from(Controller.Standard.RT).to(onRightTrigger);
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param destination - The standard control, action, or JavaScript
    function that the route output is mapped to. For a function, the parameter can be either the name of the function or
    an in-line function definition.
     */
    to(destination: Controller.Standard | Controller.Actions | ((...params: any[]) => any)): void;
    /**
     * Enables or disables writing debug information for a route to the program log.
     * @example
     * <caption>Write debug information to the program log for a right trigger mapping.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    
    mapping.from(Controller.Standard.RT).debug().to(function (value) {
        print("Value: " + value);
    });
    
    // Information similar to the following is written each frame:
    [DEBUG] [hifi.controllers] Beginning mapping frame
    [DEBUG] [hifi.controllers] Processing device routes
    [DEBUG] [hifi.controllers] Processing standard routes
    [DEBUG] [hifi.controllers] Applying route  ""
    [DEBUG] [hifi.controllers] Value was  5.96046e-07
    [DEBUG] [hifi.controllers] Filtered value was  5.96046e-07
    
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param [enable = true] - If <code>true</code> then writing debug information is enabled for the route,
        otherwise it is disabled.
     * @returns The <code>RouteObject</code> with debug output enabled or disabled.
     */
    debug(enable?: boolean): RouteObject;
    /**
     * Processes the route without marking the controller output as having been read, so that other routes from the same
    controller output can also process.
     * @param [enable = true] - If <code>true</code> then the route is processed without marking the route's
        controller source as having been read.
     * @returns The <code>RouteObject</code> with the peek feature enabled.
     */
    peek(enable?: boolean): RouteObject;
    /**
     * Processes the route only if a condition is satisfied. The condition is evaluated before the route input is read, and
    the input is read only if the condition is <code>true</code>. Thus, if the condition is not met then subsequent
    routes using the same input are processed.
     * @example
     * <caption>Process the right trigger differently in HMD and desktop modes.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    
    // Processed only if in HMD mode.
    mapping.from(Controller.Standard.RT)
        .when(Controller.Hardware.Application.InHMD)
        .to(function () { print("Trigger pressed in HMD mode."); });
    
    // Processed only if previous route not processed.
    mapping.from(Controller.Standard.RT)
        .to(function () { print("Trigger pressed in desktop mode."); });
    
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param expression - <p>A <code>condition</code> may be a:</p>
        <ul>
            <li>A numeric {@link Controller.Hardware} property, which is evaluated as a boolean.</li>
            <li><code>!</code> followed by a {@link Controller.Hardware} property to use the logical NOT of the property
            value.</li>
            <li>A script function returning a boolean value. This can be either the name of the function or an in-line
            definition.</li>
        </ul>
    <p>If an array of conditions is provided, their values are ANDed together.</p>
    <p><strong>Warning:</strong> The use of <code>!</code> is not currently supported in JavaScript <code>.when()</code>
    calls.</p>
     * @returns The <code>RouteObject</code> with the condition added.
     */
    when(expression: boolean | boolean[] | number | number[]): RouteObject;
    /**
     * Filters numeric route values to lie between two values; values outside this range are not passed on through the
    route.
     * @example
     * <caption>Clamp right trigger values to between 0.3 and 0.7.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.RT).clamp(0.3, 0.7).to(function (value) {
        print("Value: " + value);
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param min - The minimum value to pass through.
     * @param max - The maximum value to pass through.
     * @returns The route object with the clamp filter added.
     */
    clamp(min: number, max: number): RouteObject;
    /**
     * Filters numeric route values such that they are rounded to <code>0</code> or <code>1</code> without output values
    flickering when the input value hovers around <code>0.5</code>. For example, this enables you to use an analog input
    as if it were a toggle.
     * @example
     * <caption>Round the right joystick forward/back values to 0 or 1 with hysteresis.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.RY).peek().to(function (value) {
        print("Raw value: " + value);  // 0.0 - 1.0.
    });
    mapping.from(Controller.Standard.RY).hysteresis(0.3, 0.7).to(function (value) {
        print("Hysteresis value: " + value);  // 0 or 1.
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param min - When the input value drops below this value the output value changes to <code>0</code>.
     * @param max - When the input value rises above this value the output value changes to <code>1</code>.
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    hysteresis(min: number, max: number): RouteObject;
    /**
     * Filters numeric route values to send at a specified interval.
     * @example
     * <caption>Send right trigger values every half second.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.RT).pulse(0.5).to(function (value) {
        print("Value: " + value);
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param interval - The interval between sending values, in seconds.
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    pulse(interval: number): RouteObject;
    /**
     * Filters numeric and {@link Pose} route values to be scaled by a constant amount.
     * @example
     * <caption>Scale the value of the right joystick forward/back values by 10.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.LY).to(function (value) {
        print("L value: " + value);  // -1.0 to 1.0 values.
    });
    mapping.from(Controller.Standard.RY).scale(10.0).to(function (value) {
        print("R value: " + value);  // -10.0 to -10.0 values.
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param multiplier - The scale to multiply the value by.
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    scale(multiplier: number): RouteObject;
    /**
     * Filters numeric and {@link Pose} route values to have the opposite sign, e.g., <code>0.5</code> is changed to
    <code>-0.5</code>.
     * @example
     * <caption>Invert the value of the right joystick forward/back values.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.LY).to(function (value) {
        print("L value: " + value);  // -1.0 to 1.0 values, forward to back.
    });
    mapping.from(Controller.Standard.RY).invert().to(function (value) {
        print("R value: " + value);  // 1.0 to -1.0 values, forward to back.
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    invert(): RouteObject;
    /**
     * Filters numeric route values such that they're sent only when the input value is outside a dead-zone. When the input
    passes the dead-zone value, output is sent starting at <code>0.0</code> and catching up with the input value. As the
    input returns toward the dead-zone value, output values reduce to <code>0.0</code> at the dead-zone value.
     * @example
     * <caption>Apply a dead-zone to the right joystick forward/back values.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.RY).deadZone(0.2).to(function (value) {
        print("Value: " + value);  // 0.0 - 1.0 values once outside the dead-zone.
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @param min - The minimum input value at which to start sending output. For negative input values, the
       negative of this value is used.
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    deadZone(min: number): RouteObject;
    /**
     * Filters numeric route values such that they are rounded to <code>-1</code>, <code>0</code>, or <code>1</code>.
    For example, this enables you to use an analog input as if it were a toggle or, in the case of a bidirectional axis,
    a tri-state switch.
     * @example
     * <caption>Round the right joystick forward/back values to <code>-1</code>, <code>0</code>, or
        <code>1</code>.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.RY).constrainToInteger().to(function (value) {
        print("Value: " + value);  // -1, 0, or 1
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    constrainToInteger(): RouteObject;
    /**
     * Filters numeric route values such that they are rounded to <code>0</code> or <code>1</code>. For example, this
    enables you to use an analog input as if it were a toggle.
     * @example
     * <caption>Round the right joystick forward/back values to <code>0</code> or <code>1</code>.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    mapping.from(Controller.Standard.RY).constrainToPositiveInteger().to(function (value) {
        print("Value: " + value);  // 0, or 1
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    constrainToPositiveInteger(): RouteObject;
    /**
     * Filters {@link Pose} route values to have a pre-translation applied.
     * @param translate - The pre-translation to add to the pose.
     * @returns The <code>RouteObject</code> with the pre-translation applied.
     */
    translate(translate: TVec3): RouteObject;
    /**
     * Filters {@link Pose} route values to have a pre-transform applied.
     * @param transform - The pre-transform to apply.
     * @returns The <code>RouteObject</code> with the pre-transform applied.
     */
    transform(transform: TMat4): RouteObject;
    /**
     * Filters {@link Pose} route values to have a post-transform applied.
     * @param transform - The post-transform to apply.
     * @returns The <code>RouteObject</code> with the post-transform applied.
     */
    postTransform(transform: TMat4): RouteObject;
    /**
     * Filters {@link Pose} route values to have a pre-rotation applied.
     * @param rotation - The pre-rotation to add to the pose.
     * @returns The <code>RouteObject</code> with the pre-rotation applied.
     */
    rotate(rotation: TQuat): RouteObject;
    /**
     * Filters {@link Pose} route values to be smoothed by a low velocity filter. The filter's rotation and translation
    values are calculated as: <code>(1 - f) * currentValue + f * previousValue</code> where
    <code>f = currentVelocity / filterConstant</code>. At low velocities, the filter value is largely the previous
    value; at high velocities the value is wholly the current controller value.
     * @param rotationConstant - The rotational velocity, in rad/s, at which the filter value is wholly the latest
        controller value.
     * @param translationConstant - The linear velocity, in m/s, at which the filter value is wholly the latest
        controller value.
     * @returns The <code>RouteObject</code> smoothed by low velocity filtering.
     */
    lowVelocity(rotationConstant: number, translationConstant: number): RouteObject;
    /**
     * Filters {@link Pose} route values to be smoothed by an exponential decay filter. The filter's rotation and
    translation values are calculated as: <code>filterConstant * currentValue + (1 - filterConstant) *
    previousValue</code>. Values near 1 are less smooth with lower latency; values near 0 are more smooth with higher
    latency.
     * @param rotationConstant - Rotation filter constant, <code>0.0&ndash;1.0</code>.
     * @param translationConstant - Translation filter constant, <code>0.0&ndash;1.0</code>.
     * @returns The <code>RouteObject</code> smoothed by an exponential filter.
     */
    exponentialSmoothing(rotationConstant: number, translationConstant: number): RouteObject;
    /**
     * Filters numeric route values such that a value of <code>0.0</code> is changed to <code>1.0</code>, and other values
    are changed to <code>0.0</code>.
     * @example
     * <caption>Logical NOT of LSTouch value.</caption>
    var MAPPING_NAME = "org.overte.controllers.example.newMapping";
    var mapping = Controller.newMapping(MAPPING_NAME);
    
    mapping.from(Controller.Standard.RSTouch).peek().to(function (value) {
        print("RSTouch: " + value);
    });
    mapping.from(Controller.Standard.RSTouch).logicalNot().to(function (value) {
        print("localNot of RSTouch: " + value);
    });
    Controller.enableMapping(MAPPING_NAME);
    
    Script.scriptEnding.connect(function () {
        Controller.disableMapping(MAPPING_NAME);
    });
     *
     * @returns The <code>RouteObject</code> with the filter applied.
     */
    logicalNot(): RouteObject;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Reticle</code> API provides access to the mouse cursor. The cursor may be an arrow or a reticle circle, depending
on Interface settings. The mouse cursor is visible in HMD mode if controllers aren't being used.
 * @property allowMouseCapture - <code>true</code> if the mouse cursor will be captured when in HMD mode and the
    Interface window content (excluding menus) has focus, <code>false</code> if the mouse cursor will not be captured.
 * @property depth - The depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.
 * @property maximumPosition - The maximum reticle coordinates on the display device in desktop mode or the HUD surface
    in HMD mode. (The minimum reticle coordinates on the desktop display device or HUD surface are <code>0</code>,
    <code>0</code>.) <em>Read-only.</em>
 * @property mouseCaptured - <code>true</code> if the mouse cursor is captured, displaying only in Interface and
    not on the rest of the desktop. The mouse cursor may be captured when in HMD mode and the Interface window content
    (excluding menu items) has focus, if capturing is enabled (<code>allowMouseCapture</code> is <code>true</code>).
    <em>Read-only.</em>
 * @property pointingAtSystemOverlay - <code>true</code> if the mouse cursor is pointing at UI in the Interface
    window in desktop mode or on the HUD surface in HMD mode, <code>false</code> if it isn't. <em>Read-only.</em>
 * @property position - The position of the cursor. This is the position relative to the Interface window in desktop
    mode, and the HUD surface in HMD mode.
    <p><strong>Note:</strong> The position values may be negative.</p>
 * @property scale - The scale of the reticle circle in desktop mode, and the arrow and reticle circle in HMD mode.
    (Does not affect the size of the arrow in desktop mode.)
 * @property visible - <code>true</code> if the reticle circle is visible in desktop mode, and the arrow or
    reticle circle are visible in HMD mode; <code>false</code> otherwise. (Does not affect the visibility of the mouse
    pointer in desktop mode.)
 */
declare namespace Reticle {
    /**
     * Checks whether the mouse cursor is captured, displaying only in Interface and not on the rest of the desktop. The mouse
    cursor is captured when in HMD mode and the Interface window content (excluding menu items) has focus, if capturing is
    enabled (<code>allowMouseCapture</code> property value is <code>true</code>).
     * @returns <code>true</code> if the mouse cursor is captured, displaying only in Interface and not on the
        desktop.
     */
    function isMouseCaptured(): boolean;
    /**
     * Gets whether the mouse cursor will be captured when in HMD mode and the Interface window content (excluding menu items)
    has focus. When captured, the mouse cursor displays only in Interface, not on the rest of the desktop.
     * @returns <code>true</code> if the mouse cursor will be captured when in HMD mode and the Interface window
        content has focus, <code>false</code> if the mouse cursor will not be captured.
     */
    function getAllowMouseCapture(): boolean;
    /**
     * Sets whether the mouse cursor will be captured when in HMD mode and the Interface window content (excluding menu items)
    has focus. When captured, the mouse cursor displays only in Interface, not on the rest of desktop.
     * @param allowMouseCaptured - <code>true</code> if the mouse cursor will be captured when in HMD mode and the
        Interface window content has focus, <code>false</code> if the mouse cursor will not be captured.
     */
    function setAllowMouseCapture(allowMouseCaptured: boolean): void;
    /**
     * Gets whether the mouse cursor is pointing at UI in the Interface window in desktop mode or on the HUD surface in HMD
    mode.
     * @returns <code>true</code> if the mouse cursor is pointing at UI in the Interface window in desktop mode or on
        the HUD surface in HMD mode, <code>false</code> if it isn't.
     */
    function isPointingAtSystemOverlay(): boolean;
    /**
     * Gets whether the reticle circle is visible in desktop mode, or the arrow or reticle circle are visible in HMD mode.
     * @returns <code>true</code> if the reticle circle is visible in desktop mode, and the arrow or
        reticle circle are visible in HMD mode; <code>false</code> otherwise. (The mouse pointer is always visible in
        desktop mode.)
     */
    function getVisible(): boolean;
    /**
     * Sets whether the reticle circle is visible in desktop mode, or the arrow or reticle circle are visible in HMD mode.
     * @param visible - <code>true</code> if the reticle circle is visible in desktop mode, and the arrow or reticle
        circle are visible in HMD mode; <code>false</code> otherwise. (Does not affect the visibility of the mouse pointer
        in desktop mode.)
     */
    function setVisible(visible: boolean): void;
    /**
     * Gets the depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.
     * @returns The depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.
     */
    function getDepth(): number;
    /**
     * Sets the depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.
     * @param depth - The depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.
     */
    function setDepth(depth: number): void;
    /**
     * Gets the scale of the reticle circle in desktop mode, and the arrow and reticle circle in HMD mode. (Does not affect the
    size of the arrow in desktop mode.) The default scale is <code>1.0</code>.
     * @returns The scale of the reticle.
     */
    function getScale(): number;
    /**
     * Sets the scale of the reticle circle in desktop mode, and the arrow and reticle circle in HMD mode. (Does not affect the
    size of the arrow in desktop mode.) The default scale is <code>1.0</code>.
     * @param scale - The scale of the reticle.
     */
    function setScale(scale: number): void;
    /**
     * Gets the position of the cursor. This is the position relative to the Interface window in desktop mode, and the HUD
    surface in HMD mode.
    <p><strong>Note:</strong> The position values may be negative.</p>
     * @returns The position of the cursor.
     */
    function getPosition(): TVec2;
    /**
     * Sets the position of the cursor. This is the position relative to the Interface window in desktop mode, and the HUD
    surface in HMD mode.
    <p><strong>Note:</strong> The position values may be negative.</p>
     * @param position - The position of the cursor.
     */
    function setPosition(position: TVec2): void;
    /**
     * Gets the maximum reticle coordinates on the display device in desktop mode or the HUD surface in HMD mode. (The minimum
    reticle coordinates on the desktop display device or HUD surface are <code>0</code>, <code>0</code>.)
     * @returns The maximum reticle coordinates on the display device in desktop mode or the HUD surface in HMD mode.
     */
    function getMaximumPosition(): TVec2;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Entities</code> API provides facilities to create and interact with entities. Entities are 2D or 3D objects
displayed in-world. Depending on their {@link Entities.EntityHostType|EntityHostType}, they may persist in the domain as
"domain" entities, travel to different domains with a user as "avatar" entities, or be visible only to an individual user as
"local" entities (a.k.a. "overlays").

<p>Note: For Interface, avatar, and client entity scripts, the entities available to scripts are those that Interface has
displayed and so knows about. For assignment client scripts, the entities available are those that are "seen" by the
{@link EntityViewer}. For entity server scripts, all entities are available.</p>

<h3>Entity Types & Properties</h3>

<p>For a list of the entity types that you can use, see {@link Entities.EntityType|Entity Types}.</p>

<p>For the properties of the different entity types, see {@link Entities.EntityProperties|Entity Properties}. Some properties are universal to all entity types, and some are specific to particular entity types.</p>

<h3>Entity Methods</h3>

<p>Some of the API's signals correspond to entity methods that are called, if present, in the entity being interacted with.
The client or server entity script must expose them as a property. However, unlike {@link Entities.callEntityMethod}, server
entity scripts do not need to list them in an <code>remotelyCallable</code> property. The entity methods are called with
parameters per their corresponding signal.</p>
<table>
  <thead>
    <tr><th>Method Name</th><th>Corresponding Signal</th></tr>
  </thead>
  <tbody>
    <tr><td><code>clickDownOnEntity</code></td><td>{@link Entities.clickDownOnEntity}</td></tr>
    <tr><td><code>clickReleaseOnEntity</code></td><td>{@link Entities.clickReleaseOnEntity}</td></tr>
    <tr><td><code>collisionWithEntity</code></td><td>{@link Entities.collisionWithEntity}</td></tr>
    <tr><td><code>enterEntity</code></td><td>{@link Entities.enterEntity}</td></tr>
    <tr><td><code>holdingClickOnEntity</code></td><td>{@link Entities.holdingClickOnEntity}</td></tr>
    <tr><td><code>hoverEnterEntity</code></td><td>{@link Entities.hoverEnterEntity}</td></tr>
    <tr><td><code>hoverLeaveEntity</code></td><td>{@link Entities.hoverLeaveEntity}</td></tr>
    <tr><td><code>hoverOverEntity</code></td><td>{@link Entities.hoverOverEntity}</td></tr>
    <tr><td><code>leaveEntity</code></td><td>{@link Entities.leaveEntity}</td></tr>
    <tr><td><code>mouseDoublePressOnEntity</code></td><td>{@link Entities.mouseDoublePressOnEntity}</td></tr>
    <tr><td><code>mouseMoveOnEntity</code></td><td>{@link Entities.mouseMoveOnEntity}</td></tr>
    <tr><td><code>mouseMoveEvent</code></td><td><span class="important">Deprecated: Use <code>mouseMoveOnEntity</code>
      instead.</span></td></tr>
    <tr><td><code>mousePressOnEntity</code></td><td>{@link Entities.mousePressOnEntity}</td></tr>
    <tr><td><code>mouseReleaseOnEntity</code></td><td>{@link Entities.mouseReleaseOnEntity}</td></tr>
  </tbody>
</table>
<p>See {@link Entities.clickDownOnEntity} for an example.</p>
 * @property keyboardFocusEntity - The {@link Entities.EntityPropertiesWeb|Web} entity that has keyboard focus. If no
    Web entity has keyboard focus, returns <code>null</code>; set to <code>null</code> or {@link Uuid(0)|Uuid.NULL} to clear
    keyboard focus.
 */
declare namespace Entities {
    /**
     * The <code>"far-grab"</code> {@link Entities.ActionType|ActionType} moves and rotates an entity to a target position and
    orientation, optionally relative to another entity. Collisions between the entity and the user's avatar are disabled during
    the far-grab.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsFarGrab = {
        /**
         * If an entity ID, the <code>targetPosition</code> and <code>targetRotation</code> are
         * relative to the entity's position and rotation.
         */
        otherID: Uuid;
        /**
         * If a joint index in the <code>otherID</code> entity, the <code>targetPosition</code>
         * and <code>targetRotation</code> are relative to the entity joint's position and rotation.
         */
        otherJointIndex: Uuid;
        /**
         * The target position.
         * @defaultValue 0,0,0
         */
        targetPosition: TVec3;
        /**
         * The target rotation.
         * @defaultValue 0,0,0,1
         */
        targetRotation: TQuat;
        /**
         * Controls how long it takes for the entity's position to catch up with the
         * target position. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action
         * is applied using an exponential decay.
         * @defaultValue 3.4e+38
         */
        linearTimeScale: number;
        /**
         * Controls how long it takes for the entity's orientation to catch up with the
         * target orientation. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the
         * action is applied using an exponential decay.
         * @defaultValue 3.4e+38
         */
        angularTimeScale: number;
    };
    /**
     * The <code>"hold"</code> {@link Entities.ActionType|ActionType} positions and rotates an entity relative to an avatar's hand.
    Collisions between the entity and the user's avatar are disabled during the hold.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsHold = {
        /**
         * The ID of the avatar holding the entity.
         * @defaultValue MyAvatar.sessionUUID
         */
        holderID: Uuid;
        /**
         * The hand holding the entity: <code>"left"</code> or <code>"right"</code>.
         * @defaultValue right
         */
        hand: string;
        /**
         * The target position relative to the avatar's hand.
         * @defaultValue 0,0,0
         */
        relativePosition: TVec3;
        /**
         * The target rotation relative to the avatar's hand.
         * @defaultValue 0,0,0,1
         */
        relativeRotation: TVec3;
        /**
         * Controls how long it takes for the entity's position and rotation to catch up with
         * the target. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action is
         * applied using an exponential decay.
         * @defaultValue 3.4e+38
         */
        timeScale: number;
        /**
         * <code>true</code> if the entity is made kinematic during the action; the entity won't
         * lag behind the hand but constraint actions such as <code>"hinge"</code> won't act properly. <code>false</code> if the
         * entity is not made kinematic during the action
         */
        kinematic: boolean;
        /**
         * <code>true</code> if, when <code>kinematic</code> is <code>true</code>, the
         * entity's velocity will be set during the action, e.g., so that other scripts may use the value. <code>false</code> if
         * the entity's velocity will not be set during the action.
         */
        kinematicSetVelocity: boolean;
        /**
         * <code>true</code> if the entity follows the HMD controller, <code>false</code> if it
         * follows the avatar's hand.
         */
        ignoreIK: boolean;
    };
    /**
     * Ambient light is defined by the following properties:
     */
    type AmbientLight = {
        /**
         * The intensity of the light.
         * @defaultValue 0.5
         */
        ambientIntensity: number;
        /**
         * A cube map image that defines the color of the light coming from each direction. If
         * <code>""</code> then the entity's {@link Entities.Skybox|Skybox} <code>url</code> property value is used, unless that also is <code>""</code> in which
         * case the entity's <code>ambientLightMode</code> property is set to <code>"inherit"</code>.
         * @defaultValue ""
         */
        ambientURL: string;
    };
    /**
     * An animation is configured by the following properties:
     */
    type AnimationProperties = {
        /**
         * The URL of the glTF or FBX file that has the animation. glTF files may be in JSON or binary
         * format (".gltf" or ".glb" URLs respectively).
         * <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>
         * @defaultValue ""
         */
        url: string;
        /**
         * <code>true</code> to enable translations contained in the animation to be
         * played, <code>false</code> to disable translations.
         * @defaultValue true
         */
        allowTranslation: boolean;
        /**
         * The speed in frames/s that the animation is played at.
         * @defaultValue 30
         */
        fps: number;
        /**
         * The first frame to play in the animation.
         */
        firstFrame: number;
        /**
         * The last frame to play in the animation.
         * @defaultValue 100000
         */
        lastFrame: number;
        /**
         * The current frame being played in the animation.
         */
        currentFrame: number;
        /**
         * <code>true</code> if the animation should play, <code>false</code> if it shouldn't.
         */
        running: boolean;
        /**
         * <code>true</code> if the animation is continuously repeated in a loop, <code>false</code> if
         * it isn't.
         * @defaultValue true
         */
        loop: boolean;
        /**
         * <code>true</code> if the rotations and translations of the last frame played are
         * maintained when the animation stops playing, <code>false</code> if they aren't.
         */
        hold: boolean;
    };
    /**
     * Bloom is defined by the following properties:
     */
    type Bloom = {
        /**
         * The intensity of the bloom effect.
         * @defaultValue 0.25
         */
        bloomIntensity: number;
        /**
         * The threshold for the bloom effect.
         * @defaultValue 0.7
         */
        bloomThreshold: number;
        /**
         * The size of the bloom effect.
         * @defaultValue 0.9
         */
        bloomSize: number;
    };
    /**
     * <p>An entity action may be one of the following types:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Type</th><th>Description</th><th>Arguments</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"far-grab"</code></td><td>Avatar action</td>
          <td>Moves and rotates an entity to a target position and orientation, optionally relative to another entity. Collisions
          between the entity and the user's avatar are disabled during the far-grab.</td>
          <td>{@link Entities.ActionArgumentsFarGrab}</td></tr>
        <tr><td><code>"hold"</code></td><td>Avatar action</td>
          <td>Positions and rotates an entity relative to an avatar's hand. Collisions between the entity and the user's avatar
          are disabled during the hold.</td>
          <td>{@link Entities.ActionArgumentsHold}</td></tr>
        <tr><td><code>"offset"</code></td><td>Object action</td>
          <td>Moves an entity so that it is a defined distance away from a target point.</td>
          <td>{@link Entities.ActionArgumentsOffset}</td></tr>
        <tr><td><code>"tractor"</code></td><td>Object action</td>
          <td>Moves and rotates an entity to a target position and orientation, optionally relative to another entity.</td>
          <td>{@link Entities.ActionArgumentsTractor}</td></tr>
        <tr><td><code>"travel-oriented"</code></td><td>Object action</td>
          <td>Orients an entity to align with its direction of travel.</td>
          <td>{@link Entities.ActionArgumentsTravelOriented}</td></tr>
        <tr><td><code>"hinge"</code></td><td>Object constraint</td>
          <td>Lets an entity pivot about an axis or connects two entities with a hinge joint.</td>
          <td>{@link Entities.ActionArgumentsHinge}</td></tr>
        <tr><td><code>"slider"</code></td><td>Object constraint</td>
          <td>Lets an entity slide and rotate along an axis, or connects two entities that slide and rotate along a shared
          axis.</td>
          <td>{@link Entities.ActionArgumentsSlider|ActionArgumentsSlider}</td></tr>
        <tr><td><code>"cone-twist"</code></td><td>Object constraint</td>
          <td>Connects two entities with a joint that can move through a cone and can twist.</td>
          <td>{@link Entities.ActionArgumentsConeTwist}</td></tr>
        <tr><td><code>"ball-socket"</code></td><td>Object constraint</td>
          <td>Connects two entities with a ball and socket joint.</td>
          <td>{@link Entities.ActionArgumentsBallSocket}</td></tr>
        <tr><td><code>"spring"</code></td><td>&nbsp;</td><td>Synonym for <code>"tractor"</code>.
          <p class="important">Deprecated.</p></td><td>&nbsp;</td></tr>
      </tbody>
    </table>
     */
    type ActionType = string;
    /**
     * Different entity types have different properties: some common to all entities (listed in the table) and some specific to
    each {@link Entities.EntityType|EntityType} (linked to below).
     */
    type EntityProperties = {
        /**
         * The ID of the entity. <em>Read-only.</em>
         */
        id: Uuid;
        /**
         * A name for the entity. Need not be unique.
         * @defaultValue ""
         */
        name: string;
        /**
         * The entity's type. You cannot change the type of an entity after it's created.
         * However, its value may switch among <code>"Box"</code>, <code>"Shape"</code>, and <code>"Sphere"</code> depending on
         * changes to the <code>shape</code> property set for entities of these types. <em>Read-only.</em>
         */
        type: Entities.EntityType;
        /**
         * How the entity is hosted and sent to others for display.
         * The value can only be set at entity creation by one of the {@link Entities.addEntity} methods. <em>Read-only.</em>
         * @defaultValue "domain"
         */
        entityHostType: Entities.EntityHostType;
        /**
         * <code>true</code> if the entity is an {@link Entities.EntityHostType|avatar entity},
         * <code>false</code> if it isn't. The value is per the <code>entityHostType</code> property value, set at entity creation
         * by one of the {@link Entities.addEntity} methods. <em>Read-only.</em>
         */
        avatarEntity: boolean;
        /**
         * A synonym for <code>avatarEntity</code>. <em>Read-only.</em>
         */
        clientOnly: boolean;
        /**
         * <code>true</code> if the entity is a {@link Entities.EntityHostType|local entity},
         * <code>false</code> if it isn't. The value is per the <code>entityHostType</code> property value, set at entity creation
         * by one of the {@link Entities.addEntity} methods. <em>Read-only.</em>
         */
        localEntity: boolean;
        /**
         * The session ID of the owning avatar if <code>avatarEntity</code> is
         * <code>true</code>, otherwise {@link Uuid(0)|Uuid.NULL}. <em>Read-only.</em>
         * @defaultValue Uuid.NULL
         */
        owningAvatarID: Uuid;
        /**
         * When the entity was created, expressed as the number of microseconds since
         * 1970-01-01T00:00:00 UTC. <em>Read-only.</em>
         */
        created: number;
        /**
         * The age of the entity in seconds since it was created. <em>Read-only.</em>
         */
        age: number;
        /**
         * The age of the entity since it was created, formatted as <code>h hours m minutes s
         * seconds</code>.
         */
        ageAsText: string;
        /**
         * How long an entity lives for, in seconds, before being automatically deleted. A value of
         * <code>-1</code> means that the entity lives for ever.
         * @defaultValue -1
         */
        lifetime: number;
        /**
         * When the entity was last edited, expressed as the number of microseconds since
         * 1970-01-01T00:00:00 UTC. <em>Read-only.</em>
         */
        lastEdited: number;
        /**
         * The session ID of the avatar or agent that most recently created or edited the entity.
         * <em>Read-only.</em>
         */
        lastEditedBy: Uuid;
        /**
         * <code>true</code> if properties other than <code>locked</code> cannot be changed and the
         * entity cannot be deleted, <code>false</code> if all properties can be changed and the entity can be deleted.
         */
        locked: boolean;
        /**
         * <code>true</code> if the entity is rendered, <code>false</code> if it isn't.
         * @defaultValue true
         */
        visible: boolean;
        /**
         * <code>true</code> if the entity can cast a shadow, <code>false</code> if it can't.
         * Currently applicable only to {@link Entities.EntityPropertiesModel|Model} and
         * {@link Entities.EntityPropertiesShape|Shape} entities. Shadows are cast if inside a
         * {@link Entities.EntityPropertiesZone|Zone} entity with <code>castShadows</code> enabled in its <code>keyLight</code>
         * property.
         * @defaultValue true
         */
        canCastShadow: boolean;
        /**
         * <code>true</code> if the entity is rendered in the secondary camera,
         * <code>false</code> if it isn't.
         * @defaultValue true
         */
        isVisibleInSecondaryCamera: boolean;
        /**
         * The layer that the entity renders in.
         * @defaultValue "world"
         */
        renderLayer: Entities.RenderLayer;
        /**
         * How the entity's geometry is rendered.
         * @defaultValue "solid"
         */
        primitiveMode: Entities.PrimitiveMode;
        /**
         * <code>true</code> if {@link Picks} and {@link RayPick} ignore the entity,
         * <code>false</code> if they don't.
         */
        ignorePickIntersection: boolean;
        /**
         * The position of the entity in world coordinates.
         * @defaultValue 0,0,0
         */
        position: TVec3;
        /**
         * The orientation of the entity in world coordinates.
         * @defaultValue 0,0,0,1
         */
        rotation: TQuat;
        /**
         * The point in the entity that is set to the entity's position and is rotated
         * about, range {@link TVec3(0)|Vec3.ZERO} &ndash; {@link TVec3(0)|Vec3.ONE}. A value of {@link TVec3(0)|Vec3.ZERO} is the
         * entity's minimum x, y, z corner; a value of {@link TVec3(0)|Vec3.ONE} is the entity's maximum x, y, z corner.
         * @defaultValue 0.5,0.5,0.5
         */
        registrationPoint: TVec3;
        /**
         * The center of the entity's unscaled mesh model if it has one, otherwise
         * {@link TVec3(0)|Vec3.ZERO}. <em>Read-only.</em>
         * @defaultValue 0,0,0
         */
        naturalPosition: TVec3;
        /**
         * The dimensions of the entity's unscaled mesh model or image if it has one, otherwise
         * {@link TVec3(0)|Vec3.ONE}. <em>Read-only.</em>
         */
        naturalDimensions: TVec3;
        /**
         * The linear velocity of the entity in m/s with respect to world coordinates.
         * @defaultValue 0,0,0
         */
        velocity: TVec3;
        /**
         * How much the linear velocity of an entity slows down over time, range
         * <code>0.0</code> &ndash; <code>1.0</code>. A higher damping value slows down the entity more quickly. The default value
         * is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to <code>1/e = 0.368</code>
         * of its initial value.
         * @defaultValue 0.39347
         */
        damping: number;
        /**
         * The angular velocity of the entity in rad/s with respect to its axes, about its
         * registration point.
         * @defaultValue 0,0,0
         */
        angularVelocity: TVec3;
        /**
         * How much the angular velocity of an entity slows down over time, range
         * <code>0.0</code> &ndash; <code>1.0</code>. A higher damping value slows down the entity more quickly. The default value
         * is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to <code>1/e = 0.368</code>
         * of its initial value.
         * @defaultValue 0.39347
         */
        angularDamping: number;
        /**
         * The acceleration due to gravity in m/s<sup>2</sup> that the entity should move with, in
         * world coordinates. Use a value of <code>{ x: 0, y: -9.8, z: 0 }</code> to simulate Earth's gravity. Gravity is applied
         * to an entity's motion only if its <code>dynamic</code> property is <code>true</code>.
         * <p>If changing an entity's <code>gravity</code> from {@link TVec3(0)|Vec3.ZERO}, you need to give it a small
         * <code>velocity</code> in order to kick off physics simulation.</p>
         * @defaultValue 0,0,0
         */
        gravity: TVec3;
        /**
         * The current, measured acceleration of the entity, in m/s<sup>2</sup>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        acceleration: TVec3;
        /**
         * The "bounciness" of an entity when it collides, range <code>0.0</code> &ndash;
         * <code>0.99</code>. The higher the value, the more bouncy.
         * @defaultValue 0.5
         */
        restitution: number;
        /**
         * How much an entity slows down when it's moving against another, range <code>0.0</code>
         * &ndash; <code>10.0</code>. The higher the value, the more quickly it slows down. Examples: <code>0.1</code> for ice,
         * <code>0.9</code> for sandpaper.
         * @defaultValue 0.5
         */
        friction: number;
        /**
         * The density of the entity in kg/m<sup>3</sup>, range <code>100</code> &ndash;
         * <code>10000</code>. Examples: <code>100</code> for balsa wood, <code>10000</code> for silver. The density is used in
         * conjunction with the entity's bounding box volume to work out its mass in the application of physics.
         * @defaultValue 1000
         */
        density: number;
        /**
         * <code>true</code> if the entity shouldn't collide, <code>false</code> if it
         * collides with items per its <code>collisionMask</code> property.
         */
        collisionless: boolean;
        /**
         * Synonym for <code>collisionless</code>.
         */
        ignoreForCollisions: boolean;
        /**
         * What types of items the entity should collide with.
         * @defaultValue 31
         */
        collisionMask: CollisionMask;
        /**
         * Synonym for <code>collisionMask</code>,
         * in text format.
         * @defaultValue "static,dynamic,kinematic,myAvatar,otherAvatar,"
         */
        collidesWith: string;
        /**
         * The sound that's played when the entity experiences a collision. Valid file
         * formats are per {@link SoundObject}.
         * @defaultValue ""
         */
        collisionSoundURL: string;
        /**
         * <code>true</code> if the entity's movement is affected by collisions, <code>false</code>
         * if it isn't.
         */
        dynamic: boolean;
        /**
         * A synonym for <code>dynamic</code>.
         */
        collisionsWillMove: boolean;
        /**
         * A "hifi://" directory services address that a user is teleported to when they click on the entity.
         * @defaultValue ""
         */
        href: string;
        /**
         * A description of the <code>href</code> property value.
         * @defaultValue ""
         */
        description: string;
        /**
         * Used to store extra data about the entity in JSON format.
         * <p><strong>Warning:</strong> Other apps may also use this property, so make sure you handle data stored by other apps:
         * edit only your bit and leave the rest of the data intact. You can use <code>JSON.parse()</code> to parse the string into
         * a JavaScript object which you can manipulate the properties of, and use <code>JSON.stringify()</code> to convert the
         * object into a string to put back in the property.</p>
         * @defaultValue ""
         */
        userData: string;
        /**
         * Like <code>userData</code>, but only accessible by server entity scripts, assignment
         * client scripts, and users who have "Can Get and Set Private User Data" permissions in the domain.
         * @defaultValue ""
         */
        privateUserData: string;
        /**
         * The URL of the client entity script, if any, that is attached to the entity.
         * @defaultValue ""
         */
        script: string;
        /**
         * Used to indicate when the client entity script was loaded. Should be
         * an integer number of milliseconds since midnight GMT on January 1, 1970 (e.g., as supplied by <code>Date.now()</code>.
         * If you update the property's value, the <code>script</code> is re-downloaded and reloaded. This is how the "reload"
         * button beside the "script URL" field in properties tab of the Create app works.
         */
        scriptTimestamp: number;
        /**
         * The URL of the server entity script, if any, that is attached to the entity.
         * @defaultValue ""
         */
        serverScripts: string;
        /**
         * The ID of the entity or avatar that the entity is parented to. A value of
         * {@link Uuid(0)|Uuid.NULL} is used if the entity is not parented.
         * @defaultValue Uuid.NULL
         */
        parentID: Uuid;
        /**
         * The joint of the entity or avatar that the entity is parented to. Use
         * <code>65535</code> or <code>-1</code> to parent to the entity or avatar's position and orientation rather than a joint.
         * @defaultValue 65535
         */
        parentJointIndex: number;
        /**
         * The position of the entity relative to its parent if the entity is parented,
         * otherwise the same value as <code>position</code>. If the entity is parented to an avatar and is an avatar entity
         * so that it scales with the avatar, this value remains the original local position value while the avatar scale changes.
         * @defaultValue 0,0,0
         */
        localPosition: TVec3;
        /**
         * The rotation of the entity relative to its parent if the entity is parented,
         * otherwise the same value as <code>rotation</code>.
         * @defaultValue 0,0,0,1
         */
        localRotation: TQuat;
        /**
         * The velocity of the entity relative to its parent if the entity is parented,
         * otherwise the same value as <code>velocity</code>.
         * @defaultValue 0,0,0
         */
        localVelocity: TVec3;
        /**
         * The angular velocity of the entity relative to its parent if the entity is
         * parented, otherwise the same value as <code>angularVelocity</code>.
         * @defaultValue 0,0,0
         */
        localAngularVelocity: TVec3;
        /**
         * The dimensions of the entity. If the entity is parented to an avatar and is an
         * avatar entity so that it scales with the avatar, this value remains the original dimensions value while the
         * avatar scale changes.
         */
        localDimensions: TVec3;
        /**
         * The axis-aligned bounding box that tightly encloses the entity.
         * <em>Read-only.</em>
         */
        boundingBox: Entities.BoundingBox;
        /**
         * The axis-aligned cube that determines where the entity lives in the entity server's octree.
         * The cube may be considerably larger than the entity in some situations, e.g., when the entity is grabbed by an avatar:
         * the position of the entity is determined through avatar mixer updates and so the AA cube is expanded in order to reduce
         * unnecessary entity server updates. Scripts should not change this property's value.
         */
        queryAACube: AACube;
        /**
         * Base-64 encoded compressed dump of the actions associated with the entity. This property
         * is typically not used in scripts directly; rather, functions that manipulate an entity's actions update it, e.g.,
         * {@link Entities.addAction}. The size of this property increases with the number of actions. Because this property value
         * has to fit within a Overte datagram packet, there is a limit to the number of actions that an entity can have;
         * edits which would result in overflow are rejected. <em>Read-only.</em>
         * @defaultValue ""
         */
        actionData: string;
        /**
         * Information on the cost of rendering the entity. Currently information is only
         * provided for <code>Model</code> entities. <em>Read-only.</em>
         */
        renderInfo: Entities.RenderInfo;
        /**
         * <code>true</code> if the domain or avatar entity can be cloned via
         * {@link Entities.cloneEntity}, <code>false</code> if it can't be.
         */
        cloneable: boolean;
        /**
         * The entity lifetime for clones created from this entity.
         * @defaultValue 300
         */
        cloneLifetime: number;
        /**
         * The total number of clones of this entity that can exist in the domain at any given time.
         */
        cloneLimit: number;
        /**
         * <code>true</code> if clones created from this entity will have their
         * <code>dynamic</code> property set to <code>true</code>, <code>false</code> if they won't.
         */
        cloneDynamic: boolean;
        /**
         * <code>true</code> if clones created from this entity will be created as
         * avatar entities, <code>false</code> if they won't be.
         */
        cloneAvatarEntity: boolean;
        /**
         * The ID of the entity that this entity was cloned from.
         */
        cloneOriginID: Uuid;
        /**
         * A list of entity IDs representing with which zones this entity should render.
         * If it is empty, this entity will render normally.  Otherwise, this entity will only render if your avatar is within
         * one of the zones in this list.
         * @defaultValue []
         */
        renderWithZones: Uuid[];
        /**
         * Whether the entity is billboarded to face the camera.  Use the rotation
         * property to control which axis is facing you.
         * @defaultValue "none"
         */
        billboardMode: BillboardMode;
        /**
         * The entity's grab-related properties.
         */
        grab: Entities.Grab;
    };
    /**
     * The <code>"Box"</code> {@link Entities.EntityType|EntityType} is the same as the <code>"Shape"</code>
    {@link Entities.EntityType|EntityType} except that its <code>shape</code> value is always set to <code>"Cube"</code>
    when the entity is created. If its <code>shape</code> property value is subsequently changed then the entity's
    <code>type</code> will be reported as <code>"Sphere"</code> if the <code>shape</code> is set to <code>"Sphere"</code>,
    otherwise it will be reported as <code>"Shape"</code>.
     */
    type EntityPropertiesBox = any;
    /**
     * The <code>"Light"</code> {@link Entities.EntityType|EntityType} adds local lighting effects. It has properties in addition
    to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a spotlight pointing at the ground.</caption>
    Entities.addEntity({
        type: "Light",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -4 })),
        rotation: Quat.fromPitchYawRollDegrees(-75, 0, 0),
        dimensions: { x: 5, y: 5, z: 5 },
        intensity: 100,
        falloffRadius: 0.3,
        isSpotlight: true,
        exponent: 20,
        cutoff: 30,
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesLight = {
        /**
         * The dimensions of the entity. Surfaces outside these dimensions are not lit
         * by the light.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * The color of the light emitted.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The brightness of the light.
         * @defaultValue 1
         */
        intensity: number;
        /**
         * The distance from the light's center at which intensity is reduced by 25%.
         * @defaultValue 0.1
         */
        falloffRadius: number;
        /**
         * <code>true</code> if the light is directional, emitting along the entity's
         * local negative z-axis; <code>false</code> if the light is a point light which emanates in all directions.
         */
        isSpotlight: boolean;
        /**
         * Affects the softness of the spotlight beam: the higher the value the softer the beam.
         */
        exponent: number;
        /**
         * Affects the size of the spotlight beam: the higher the value the larger the beam.
         * @defaultValue 1.57
         */
        cutoff: number;
    };
    /**
     * The <code>"Line"</code> {@link Entities.EntityType|EntityType} draws thin, straight lines between a sequence of two or more
    points. It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
    <p class=important>Deprecated: Use {@link Entities.EntityPropertiesPolyLine|PolyLine} entities instead.</p>
     * @example
     * <caption>Draw lines in a "V".</caption>
    var entity = Entities.addEntity({
        type: "Line",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 2, y: 2, z: 1 },
        linePoints: [
            { x: -1, y: 1, z: 0 },
            { x: 0, y: -1, z: 0 },
            { x: 1, y: 1, z: 0 },
        ],
        color: { red: 255, green: 0, blue: 0 },
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesLine = {
        /**
         * The dimensions of the entity. Must be sufficient to contain all the
         * <code>linePoints</code>.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * The sequence of points to draw lines between. The values are relative to the entity's
         * position. A maximum of 70 points can be specified. The property's value is set only if all the <code>linePoints</code>
         * lie within the entity's <code>dimensions</code>.
         * @defaultValue []
         */
        linePoints: TVec3[];
        /**
         * The color of the line.
         * @defaultValue 255,255,255
         */
        color: Color;
    };
    /**
     * The <code>"Material"</code> {@link Entities.EntityType|EntityType} modifies existing materials on entities and avatars. It
    has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
    <p>To apply a material to an entity, set the material entity's <code>parentID</code> property to the entity ID.
    To apply a material to an avatar, set the material entity's <code>parentID</code> property to the avatar's session UUID.
    To apply a material to your avatar such that it persists across domains and log-ins, create the material as an avatar entity
    by setting the <code>entityHostType</code> parameter in {@link Entities.addEntity} to <code>"avatar"</code> and set the
    entity's <code>parentID</code> property to <code>MyAvatar.SELF_ID</code>.
    Material entities render as non-scalable spheres if they don't have their parent set.</p>
     * @example
     * <caption>Color a sphere using a Material entity.</caption>
    var entityID = Entities.addEntity({
        type: "Sphere",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 1, y: 1, z: 1 },
        color: { red: 128, green: 128, blue: 128 },
        lifetime: 300  // Delete after 5 minutes.
    });
    
    var materialID = Entities.addEntity({
        type: "Material",
        parentID: entityID,
        materialURL: "materialData",
        priority: 1,
        materialData: JSON.stringify({
            materialVersion: 1,
            materials: {
                // Value overrides entity's "color" property.
                albedo: [1.0, 1.0, 0]  // Yellow
            }
        })
    });
     */
    type EntityPropertiesMaterial = {
        /**
         * Used when <code>materialMappingMode == "projected"</code>.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * URL to a {@link Entities.MaterialResource|MaterialResource}. Alternatively, set the
         * property value to <code>"materialData"</code> to use the <code>materialData</code> property for the
         * {@link Entities.MaterialResource|MaterialResource} values. If you append <code>"#name"</code> to the URL, the material
         * with that name will be applied to the entity. You can also use the ID of another Material entity as the URL, in which
         * case this material will act as a copy of that material, with its own unique material transform, priority, etc.
         * @defaultValue ""
         */
        materialURL: string;
        /**
         * Used to store {@link Entities.MaterialResource|MaterialResource} data as a JSON string.
         * You can use <code>JSON.parse()</code> to parse the string into a JavaScript object which you can manipulate the
         * properties of, and use <code>JSON.stringify()</code> to convert the object into a string to put in the property.
         * @defaultValue ""
         */
        materialData: string;
        /**
         * The priority for applying the material to its parent. Only the highest priority material is
         * applied, with materials of the same priority randomly assigned. Materials that come with the model have a priority of
         * <code>0</code>.
         */
        priority: number;
        /**
         * Selects the mesh part or parts within the parent to which to apply the material.
         * If in the format <code>"mat::string"</code>, all mesh parts with material name <code>"string"</code> are replaced.
         * If <code>"all"</code>, then all mesh parts are replaced.
         * Otherwise the property value is parsed as an unsigned integer, specifying the mesh part index to modify.
         * <p>If the string represents an array (starts with <code>"["</code> and ends with <code>"]"</code>), the string is split
         * at each <code>","</code> and each element parsed as either a number or a string if it starts with <code>"mat::"</code>.
         * For example, <code>"[0,1,mat::string,mat::string2]"</code> will replace mesh parts 0 and 1, and any mesh parts with
         * material <code>"string"</code> or <code>"string2"</code>. Do not put spaces around the commas. Invalid values are parsed
         * to <code>0</code>.</p>
         * @defaultValue "0"
         */
        parentMaterialName: string;
        /**
         * How the material is mapped to the entity. Either <code>"uv"</code> or
         * <code>"projected"</code>. In <code>"uv"</code> mode, the material is evaluated within the UV space of the mesh it is
         * applied to. In <code>"projected"</code> mode, the 3D transform (position, rotation, and dimensions) of the Material
         * entity is used to evaluate the texture coordinates for the material.
         * @defaultValue "uv"
         */
        materialMappingMode: string;
        /**
         * Offset position in UV-space of the top left of the material, range
         * <code>{ x: 0, y: 0 }</code> &ndash; <code>{ x: 1, y: 1 }</code>.
         * @defaultValue 0,0
         */
        materialMappingPos: TVec2;
        /**
         * How much to scale the material within the parent's UV-space.
         * @defaultValue 1,1
         */
        materialMappingScale: TVec2;
        /**
         * How much to rotate the material within the parent's UV-space, in degrees.
         */
        materialMappingRot: number;
        /**
         * <code>true</code> if the material repeats, <code>false</code> if it doesn't. If
         * <code>false</code>, fragments outside of texCoord 0 &ndash; 1 will be discarded. Works in both <code>"uv"</code> and
         * <code>"projected"</code> modes.
         * @defaultValue true
         */
        materialRepeat: boolean;
    };
    /**
     * The <code>"Model"</code> {@link Entities.EntityType|EntityType} displays a glTF, FBX, or OBJ model. When adding an entity,
    if no <code>dimensions</code> value is specified then the model is automatically sized to its
    <code>{@link Entities.EntityProperties|naturalDimensions}</code>. It has properties in addition to the common
    {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Rez a cowboy hat.</caption>
    var entity = Entities.addEntity({
        type: "Model",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -2 })),
        rotation: MyAvatar.orientation,
        modelURL: "https://apidocs.vircadia.dev/models/cowboy-hat.fbx",
        dimensions: { x: 0.8569, y: 0.3960, z: 1.0744 },
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesModel = {
        /**
         * The dimensions of the entity. When adding an entity, if no <code>dimensions</code>
         * value is specified then the model is automatically sized to its
         * <code>{@link Entities.EntityProperties|naturalDimensions}</code>.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * The URL of the glTF, FBX, or OBJ model. glTF models may be in JSON or binary format
         * (".gltf" or ".glb" URLs respectively). Baked models' URLs have ".baked" before the file type. Model files may also be
         * compressed in GZ format, in which case the URL ends in ".gz".
         * @defaultValue ""
         */
        modelURL: string;
        /**
         * The scale factor applied to the model's dimensions.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        modelScale: TVec3;
        /**
         * A JSON string of a map of blendshape names to values.  Only stores set values.
         * When editing this property, only coefficients that you are editing will change; it will not explicitly reset other
         * coefficients.
         */
        blendshapeCoefficients: string;
        /**
         * If <code>false</code>, the model will be centered based on its content,
         * ignoring any offset in the model itself. If <code>true</code>, the model will respect its original offset.  Currently,
         * only pivots relative to <code>{x: 0, y: 0, z: 0}</code> are supported.
         */
        useOriginalPivot: boolean;
        /**
         * A JSON string of texture name, URL pairs used when rendering the model in place of the
         * model's original textures. Use a texture name from the <code>originalTextures</code> property to override that texture.
         * Only the texture names and URLs to be overridden need be specified; original textures are used where there are no
         * overrides. You can use <code>JSON.stringify()</code> to convert a JavaScript object of name, URL pairs into a JSON
         * string.
         * @defaultValue ""
         */
        textures: string;
        /**
         * A JSON string of texture name, URL pairs used in the model. The property value is
         * filled in after the entity has finished rezzing (i.e., textures have loaded). You can use <code>JSON.parse()</code> to
         * parse the JSON string into a JavaScript object of name, URL pairs. <em>Read-only.</em>
         * @defaultValue "{}"
         */
        originalTextures: string;
        /**
         * <em>Currently not used.</em>
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The shape of the collision hull used if collisions are enabled.
         * @defaultValue "none"
         */
        shapeType: ShapeType;
        /**
         * The model file to use for the compound shape if <code>shapeType</code> is
         * <code>"compound"</code>.
         * @defaultValue ""
         */
        compoundShapeURL: string;
        /**
         * An animation to play on the model.
         */
        animation: Entities.AnimationProperties;
        /**
         * Joint rotations applied to the model; <code>[]</code> if none are applied or the
         * model hasn't loaded. The array indexes are per {@link Entities.getJointIndex|getJointIndex}. Rotations are relative to
         * each joint's parent.
         * <p>Joint rotations can be set by {@link Entities.setLocalJointRotation|setLocalJointRotation} and similar functions, or
         * by setting the value of this property. If you set a joint rotation using this property, you also need to set the
         * corresponding <code>jointRotationsSet</code> value to <code>true</code>.</p>
         * @defaultValue []
         */
        jointRotations: TQuat[];
        /**
         * <code>true</code> values for joints that have had rotations applied,
         * <code>false</code> otherwise; <code>[]</code> if none are applied or the model hasn't loaded. The array indexes are per
         * {@link Entities.getJointIndex|getJointIndex}.
         * @defaultValue []
         */
        jointRotationsSet: boolean[];
        /**
         * Joint translations applied to the model; <code>[]</code> if none are applied or
         * the model hasn't loaded. The array indexes are per {@link Entities.getJointIndex|getJointIndex}. Translations are
         * relative to each joint's parent.
         * <p>Joint translations can be set by {@link Entities.setLocalJointTranslation|setLocalJointTranslation} and similar
         * functions, or by setting the value of this property. If you set a joint translation using this property you also need to
         * set the corresponding <code>jointTranslationsSet</code> value to <code>true</code>.</p>
         * @defaultValue []
         */
        jointTranslations: TVec3[];
        /**
         * <code>true</code> values for joints that have had translations applied,
         * <code>false</code> otherwise; <code>[]</code> if none are applied or the model hasn't loaded. The array indexes are per
         * {@link Entities.getJointIndex|getJointIndex}.
         * @defaultValue []
         */
        jointTranslationsSet: boolean[];
        /**
         * <code>true</code> if when the entity is parented to an avatar, the avatar's
         * joint rotations are applied to the entity's joints; <code>false</code> if a parent avatar's joint rotations are not
         * applied to the entity's joints.
         */
        relayParentJoints: boolean;
        /**
         * <code>true</code> if the mesh parts of the model are LOD culled as a group,
         * <code>false</code> if separate mesh parts are LOD culled individually.
         */
        groupCulled: boolean;
    };
    /**
     * The <code>"ParticleEffect"</code> {@link Entities.EntityType|EntityType} displays a particle system that can be used to
    simulate things such as fire, smoke, snow, magic spells, etc. The particles emanate from an ellipsoid or part thereof.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a ball of green smoke.</caption>
    particles = Entities.addEntity({
        type: "ParticleEffect",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -4 })),
        lifespan: 5,
        emitRate: 10,
        emitSpeed: 0.02,
        speedSpread: 0.01,
        emitAcceleration: { x: 0, y: 0.02, z: 0 },
        polarFinish: Math.PI,
        textures: "https://content.vircadia.com/eu-c-1/vircadia-assets/interface/default/default_particle.png",
        particleRadius: 0.1,
        color: { red: 0, green: 255, blue: 0 },
        alphaFinish: 0,
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesParticleEffect = {
        /**
         * <code>true</code> if particles are being emitted, <code>false</code> if they aren't.
         * @defaultValue true
         */
        isEmitting: boolean;
        /**
         * The maximum number of particles to render at one time. Older particles are deleted if
         * necessary when new ones are created.
         * @defaultValue 1000
         */
        maxParticles: number;
        /**
         * How long, in seconds, each particle lives.
         * @defaultValue 3s
         */
        lifespan: number;
        /**
         * The number of particles per second to emit.
         * @defaultValue 15
         */
        emitRate: number;
        /**
         * The speed, in m/s, that each particle is emitted at.
         * @defaultValue 5
         */
        emitSpeed: number;
        /**
         * The spread in speeds at which particles are emitted at. For example, if
         * <code>emitSpeed == 5</code> and <code>speedSpread == 1</code>, particles will be emitted with speeds in the range
         * <code>4</code> &ndash; <code>6</code>m/s.
         * @defaultValue 1
         */
        speedSpread: number;
        /**
         * The acceleration that is applied to each particle during its lifetime. The
         * default is Earth's gravity value.
         * @defaultValue 0,-9.8,0
         */
        emitAcceleration: TVec3;
        /**
         * The spread in accelerations that each particle is given. For example, if
         * <code>emitAccelerations == {x: 0, y: -9.8, z: 0}</code> and <code>accelerationSpread ==
         * {x: 0, y: 1, z: 0}</code>, each particle will have an acceleration in the range <code>{x: 0, y: -10.8, z: 0}</code>
         * &ndash; <code>{x: 0, y: -8.8, z: 0}</code>.
         * @defaultValue 0,0,0
         */
        accelerationSpread: TVec3;
        /**
         * The dimensions of the particle effect, i.e., a bounding box containing all the particles
         * during their lifetimes, assuming that <code>emitterShouldTrail == false</code>. <em>Read-only.</em>
         */
        dimensions: TVec3;
        /**
         * <code>true</code> if particles are "left behind" as the emitter moves,
         * <code>false</code> if they stay within the entity's dimensions.
         */
        emitterShouldTrail: boolean;
        /**
         * The orientation of particle emission relative to the entity's axes. By
         * default, particles emit along the entity's local z-axis, and <code>azimuthStart</code> and <code>azimuthFinish</code>
         * are relative to the entity's local x-axis. The default value is a rotation of -90 degrees about the local x-axis, i.e.,
         * the particles emit vertically.
         * @defaultValue -0.707,0,0,0.707
         */
        emitOrientation: TQuat;
        /**
         * The shape from which particles are emitted.
         * @defaultValue "ellipsoid"
         */
        shapeType: ShapeType;
        /**
         * The model file to use for the compound shape if <code>shapeType ==
         * "compound"</code>.
         * @defaultValue ""
         */
        compoundShapeURL: string;
        /**
         * The dimensions of the shape from which particles are emitted.
         * @defaultValue 0,0,0
         */
        emitDimensions: TVec3;
        /**
         * The starting radius within the shape at which particles start being emitted;
         * range <code>0.0</code> &ndash; <code>1.0</code> for the center to the surface, respectively.
         * Particles are emitted from the portion of the shape that lies between <code>emitRadiusStart</code> and the
         * shape's surface.
         * @defaultValue 1
         */
        emitRadiusStart: number;
        /**
         * The angle in radians from the entity's local z-axis at which particles start being emitted
         * within the shape; range <code>0</code> &ndash; <code>Math.PI</code>. Particles are emitted from the portion of the
         * shape that lies between <code>polarStart</code> and <code>polarFinish</code>. Only used if <code>shapeType</code> is
         * <code>"ellipsoid"</code> or <code>"sphere"</code>.
         */
        polarStart: number;
        /**
         * The angle in radians from the entity's local z-axis at which particles stop being emitted
         * within the shape; range <code>0</code> &ndash; <code>Math.PI</code>. Particles are emitted from the portion of the
         * shape that lies between <code>polarStart</code> and <code>polarFinish</code>. Only used if <code>shapeType</code> is
         * <code>"ellipsoid"</code> or <code>"sphere"</code>.
         */
        polarFinish: number;
        /**
         * The angle in radians from the entity's local x-axis about the entity's local
         * z-axis at which particles start being emitted; range <code>-Math.PI</code> &ndash; <code>Math.PI</code>. Particles are
         * emitted from the portion of the shape that lies between <code>azimuthStart</code> and <code>azimuthFinish</code>.
         * Only used if <code>shapeType</code> is <code>"ellipsoid"</code>, <code>"sphere"</code>, or <code>"circle"</code>.
         * @defaultValue -Math.PI
         */
        azimuthStart: number;
        /**
         * The angle in radians from the entity's local x-axis about the entity's local
         * z-axis at which particles stop being emitted; range <code>-Math.PI</code> &ndash; <code>Math.PI</code>. Particles are
         * emitted from the portion of the shape that lies between <code>azimuthStart</code> and <code>azimuthFinish</code>.
         * Only used if <code>shapeType</code> is <code>"ellipsoid"</code>, <code>"sphere"</code>, or <code>"circle"</code>.
         * @defaultValue Math.PI
         */
        azimuthFinish: number;
        /**
         * The URL of a JPG or PNG image file to display for each particle. If you want transparency,
         * use PNG format.
         * @defaultValue ""
         */
        textures: string;
        /**
         * The radius of each particle at the middle of its life.
         * @defaultValue 0.025
         */
        particleRadius: number;
        /**
         * The radius of each particle at the start of its life. If <code>null</code>, the
         * <code>particleRadius</code> value is used.
         */
        radiusStart: number;
        /**
         * The radius of each particle at the end of its life. If <code>null</code>, the
         * <code>particleRadius</code> value is used.
         */
        radiusFinish: number;
        /**
         * The spread in radius that each particle is given. For example, if
         * <code>particleRadius == 0.5</code> and <code>radiusSpread == 0.25</code>, each particle will have a radius in the range
         * <code>0.25</code> &ndash; <code>0.75</code>.
         */
        radiusSpread: number;
        /**
         * The color of each particle at the middle of its life.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The color of each particle at the start of its life. If any of the
         * component values are undefined, the <code>color</code> value is used.
         * @defaultValue null,null,null
         */
        colorStart: ColorFloat;
        /**
         * The color of each particle at the end of its life. If any of the
         * component values are undefined, the <code>color</code> value is used.
         * @defaultValue null,null,null
         */
        colorFinish: ColorFloat;
        /**
         * The spread in color that each particle is given. For example, if
         * <code>color == {red: 100, green: 100, blue: 100}</code> and <code>colorSpread ==
         * {red: 10, green: 25, blue: 50}</code>, each particle will have a color in the range
         * <code>{red: 90, green: 75, blue: 50}</code> &ndash; <code>{red: 110, green: 125, blue: 150}</code>.
         * @defaultValue 0,0,0
         */
        colorSpread: Color;
        /**
         * The opacity of each particle at the middle of its life.
         * @defaultValue 1
         */
        alpha: number;
        /**
         * The opacity of each particle at the start of its life. If <code>null</code>, the
         * <code>alpha</code> value is used.
         */
        alphaStart: number;
        /**
         * The opacity of each particle at the end of its life. If <code>null</code>, the
         * <code>alpha</code> value is used.
         */
        alphaFinish: number;
        /**
         * The spread in alpha that each particle is given. For example, if
         * <code>alpha == 0.5</code> and <code>alphaSpread == 0.25</code>, each particle will have an alpha in the range
         * <code>0.25</code> &ndash; <code>0.75</code>.
         */
        alphaSpread: number;
        /**
         * Color and alpha pulse.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        pulse: Entities.Pulse;
        /**
         * The rotation of each particle at the middle of its life, range <code>-2 * Math.PI</code>
         * &ndash; <code>2 * Math.PI</code> radians.
         */
        particleSpin: number;
        /**
         * The rotation of each particle at the start of its life, range <code>-2 * Math.PI</code>
         * &ndash; <code>2 * Math.PI</code> radians. If <code>null</code>, the <code>particleSpin</code> value is used.
         */
        spinStart: number;
        /**
         * The rotation of each particle at the end of its life, range <code>-2 * Math.PI</code>
         * &ndash; <code>2 * Math.PI</code> radians. If <code>null</code>, the <code>particleSpin</code> value is used.
         */
        spinFinish: number;
        /**
         * The spread in spin that each particle is given, range <code>0</code> &ndash;
         * <code>2 * Math.PI</code> radians. For example, if <code>particleSpin == Math.PI</code> and
         * <code>spinSpread == Math.PI / 2</code>, each particle will have a rotation in the range <code>Math.PI / 2</code> &ndash;
         * <code>3 * Math.PI / 2</code>.
         */
        spinSpread: number;
        /**
         * <code>true</code> if the particles' rotations are relative to the entity's
         * instantaneous rotation, <code>false</code> if they're relative to world coordinates. If <code>true</code> with
         * <code>particleSpin == 0</code>, the particles keep oriented per the entity's orientation.
         */
        rotateWithEntity: boolean;
    };
    /**
     * The <code>"PolyLine"</code> {@link Entities.EntityType|EntityType} draws textured, straight lines between a sequence of
    points. It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Draw a textured "V".</caption>
    var entity = Entities.addEntity({
        type: "PolyLine",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),
        rotation: MyAvatar.orientation,
        linePoints: [
            { x: -1, y: 0.5, z: 0 },
            { x: 0, y: 0, z: 0 },
            { x: 1, y: 0.5, z: 0 }
        ],
        normals: [
            { x: 0, y: 0, z: 1 },
            { x: 0, y: 0, z: 1 },
            { x: 0, y: 0, z: 1 }
        ],
        strokeWidths: [ 0.1, 0.1, 0.1 ],
        color: { red: 255, green: 0, blue: 0 },  // Use just the red channel from the image.
        textures: "https://hifi-content/DomainContent/Toybox/flowArts/trails.png",
        isUVModeStretch: true,
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesPolyLine = {
        /**
         * The dimensions of the entity, i.e., the size of the bounding box that contains the
         * lines drawn. <em>Read-only.</em>
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * The sequence of points to draw lines between. The values are relative to the entity's
         * position. A maximum of 70 points can be specified.
         * @defaultValue []
         */
        linePoints: TVec3[];
        /**
         * The normal vectors for the line's surface at the <code>linePoints</code>. The values are
         * relative to the entity's orientation. Must be specified in order for the entity to render.
         * @defaultValue []
         */
        normals: TVec3[];
        /**
         * The widths, in m, of the line at the <code>linePoints</code>. Must be specified in
         * order for the entity to render.
         * @defaultValue []
         */
        strokeWidths: number[];
        /**
         * The base colors of each point, with values in the range <code>0.0,0.0,0.0</code>
         * &ndash; <code>1.0,1.0,1.0</code>. These colors are multiplied with the color of the texture. If there are more line
         * points than stroke colors, the <code>color</code> property value is used for the remaining points.
         * <p><strong>Warning:</strong> The ordinate values are in the range <code>0.0</code> &ndash; <code>1.0</code>.</p>
         * @defaultValue []
         */
        strokeColors: TVec3[];
        /**
         * Used as the color for each point if <code>strokeColors</code> doesn't have a value for
         * the point.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The URL of a JPG or PNG texture to use for the lines. If you want transparency, use PNG
         * format.
         * @defaultValue ""
         */
        textures: string;
        /**
         * <code>true</code> if the texture is stretched to fill the whole line,
         * <code>false</code> if the texture repeats along the line.
         * @defaultValue true
         */
        isUVModeStretch: boolean;
        /**
         * <code>true</code> if the opacity of the strokes drops off away from the line center,
         * <code>false</code> if it doesn't.
         */
        glow: boolean;
        /**
         * <code>true</code> if each line segment rotates to face the camera, <code>false</code>
         * if they don't.
         */
        faceCamera: boolean;
    };
    /**
     * The <code>"PolyVox"</code> {@link Entities.EntityType|EntityType} displays a set of textured voxels.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
    If you have two or more neighboring PolyVox entities of the same size abutting each other, you can display them as joined by
    configuring their <code>voxelSurfaceStyle</code> and various neighbor ID properties.
    <p>PolyVox entities uses a library from <a href="http://www.volumesoffun.com/">Volumes of Fun</a>. Their
    <a href="http://www.volumesoffun.com/polyvox-documentation/">library documentation</a> may be useful to read.</p>
     * @example
     * <caption>Create a textured PolyVox sphere.</caption>
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));
    var texture = "http://public.highfidelity.com/cozza13/tuscany/Concrete2.jpg";
    var polyVox = Entities.addEntity({
        type: "PolyVox",
        position: position,
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 16, y: 16, z: 16 },
        voxelSurfaceStyle: 2,
        xTextureURL: texture,
        yTextureURL: texture,
        zTextureURL: texture,
        lifetime: 300  // Delete after 5 minutes.
    });
    Entities.setVoxelSphere(polyVox, position, 0.8, 255);
     */
    type EntityPropertiesPolyVox = {
        /**
         * The dimensions of the entity.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * Integer number of voxels along each axis of the entity, in the range
         * <code>1,1,1</code> to <code>128,128,128</code>. The dimensions of each voxel is
         * <code>dimensions / voxelVolumesize</code>.
         * @defaultValue 32,32,32
         */
        voxelVolumeSize: TVec3;
        /**
         * Base-64 encoded compressed dump of
         * the PolyVox data. This property is typically not used in scripts directly; rather, functions that manipulate a PolyVox
         * entity update it.
         * <p>The size of this property increases with the size and complexity of the PolyVox entity, with the size depending on how
         * the particular entity's voxels compress. Because this property value has to fit within a Overte datagram packet,
         * there is a limit to the size and complexity of a PolyVox entity; edits which would result in an overflow are rejected.</p>
         * @defaultValue "ABAAEAAQAAAAHgAAEAB42u3BAQ0AAADCoPdPbQ8HFAAAAPBuEAAAAQ=="
         */
        voxelData: string;
        /**
         * The style of rendering the voxels' surface and how
         * neighboring PolyVox entities are joined.
         * @defaultValue 2
         */
        voxelSurfaceStyle: Entities.PolyVoxSurfaceStyle;
        /**
         * The URL of the texture to map to surfaces perpendicular to the entity's local x-axis.
         * JPG or PNG format. If no texture is specified the surfaces display white.
         * @defaultValue ""
         */
        xTextureURL: string;
        /**
         * The URL of the texture to map to surfaces perpendicular to the entity's local y-axis.
         * JPG or PNG format. If no texture is specified the surfaces display white.
         * @defaultValue ""
         */
        yTextureURL: string;
        /**
         * The URL of the texture to map to surfaces perpendicular to the entity's local z-axis.
         * JPG or PNG format. If no texture is specified the surfaces display white.
         * @defaultValue ""
         */
        zTextureURL: string;
        /**
         * The ID of the neighboring PolyVox entity in the entity's -ve local x-axis
         * direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.
         * @defaultValue Uuid.NULL
         */
        xNNeighborID: Uuid;
        /**
         * The ID of the neighboring PolyVox entity in the entity's -ve local y-axis
         * direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.
         * @defaultValue Uuid.NULL
         */
        yNNeighborID: Uuid;
        /**
         * The ID of the neighboring PolyVox entity in the entity's -ve local z-axis
         * direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.
         * @defaultValue Uuid.NULL
         */
        zNNeighborID: Uuid;
        /**
         * The ID of the neighboring PolyVox entity in the entity's +ve local x-axis
         * direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.
         * @defaultValue Uuid.NULL
         */
        xPNeighborID: Uuid;
        /**
         * The ID of the neighboring PolyVox entity in the entity's +ve local y-axis
         * direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.
         * @defaultValue Uuid.NULL
         */
        yPNeighborID: Uuid;
        /**
         * The ID of the neighboring PolyVox entity in the entity's +ve local z-axis
         * direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.
         * @defaultValue Uuid.NULL
         */
        zPNeighborID: Uuid;
    };
    /**
     * The <code>"Shape"</code> {@link Entities.EntityType|EntityType} displays an entity of a specified <code>shape</code>.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a cylinder.</caption>
    var shape = Entities.addEntity({
        type: "Shape",
        shape: "Cylinder",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 0.4, y: 0.6, z: 0.4 },
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesShape = {
        /**
         * The shape of the entity.
         * @defaultValue "Sphere"
         */
        shape: Entities.Shape;
        /**
         * The dimensions of the entity.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * The color of the entity.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The opacity of the entity, range <code>0.0</code> &ndash; <code>1.0</code>.
         * @defaultValue 1
         */
        alpha: number;
        /**
         * Color and alpha pulse.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        pulse: Entities.Pulse;
    };
    /**
     * The <code>"Sphere"</code> {@link Entities.EntityType|EntityType} is the same as the <code>"Shape"</code>
    {@link Entities.EntityType|EntityType} except that its <code>shape</code> value is always set to <code>"Sphere"</code>
    when the entity is created. If its <code>shape</code> property value is subsequently changed then the entity's
    <code>type</code> will be reported as <code>"Box"</code> if the <code>shape</code> is set to <code>"Cube"</code>,
    otherwise it will be reported as <code>"Shape"</code>.
     */
    type EntityPropertiesSphere = any;
    /**
     * The <code>"Text"</code> {@link Entities.EntityType|EntityType} displays a 2D rectangle of text in the domain.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a text entity.</caption>
    var text = Entities.addEntity({
        type: "Text",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 0.6, y: 0.3, z: 0.01 },
        lineHeight: 0.12,
        text: "Hello\nthere!",
        billboardMode: "yaw",
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesText = {
        /**
         * The dimensions of the entity.
         * @defaultValue 0.1,0.1,0.01
         */
        dimensions: TVec3;
        /**
         * The text to display on the face of the entity. Text wraps if necessary to fit. New lines can be
         * created using <code>\n</code>. Overflowing lines are not displayed.
         * @defaultValue ""
         */
        text: string;
        /**
         * The height of each line of text (thus determining the font size).
         * @defaultValue 0.1
         */
        lineHeight: number;
        /**
         * The color of the text.
         * @defaultValue 255,255,255
         */
        textColor: Color;
        /**
         * The opacity of the text.
         * @defaultValue 1.0
         */
        textAlpha: number;
        /**
         * The color of the background rectangle.
         * @defaultValue 0,0,0
         */
        backgroundColor: Color;
        /**
         * The opacity of the background.
         * @defaultValue 1.0
         */
        backgroundAlpha: number;
        /**
         * Color and alpha pulse.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        pulse: Entities.Pulse;
        /**
         * The left margin, in meters.
         * @defaultValue 0.0
         */
        leftMargin: number;
        /**
         * The right margin, in meters.
         * @defaultValue 0.0
         */
        rightMargin: number;
        /**
         * The top margin, in meters.
         * @defaultValue 0.0
         */
        topMargin: number;
        /**
         * The bottom margin, in meters.
         * @defaultValue 0.0
         */
        bottomMargin: number;
        /**
         * <code>true</code> if the entity is unaffected by lighting, <code>false</code> if it is lit
         * by the key light and local lights.
         */
        unlit: boolean;
        /**
         * The font to render the text with. It can be one of the following: <code>"Courier"</code>,
         * <code>"Inconsolata"</code>, <code>"Roboto"</code>, <code>"Timeless"</code>, or a path to a .sdff file.
         * @defaultValue ""
         */
        font: string;
        /**
         * The effect that is applied to the text.
         * @defaultValue "none"
         */
        textEffect: Entities.TextEffect;
        /**
         * The color of the effect.
         * @defaultValue 255,255,255
         */
        textEffectColor: Color;
        /**
         * The magnitude of the text effect, range <code>0.0</code> &ndash; <code>0.5</code>.
         * @defaultValue 0.2
         */
        textEffectThickness: number;
        /**
         * How the text is aligned against its background.
         * @defaultValue "left"
         */
        alignment: Entities.TextAlignment;
        /**
         * <code>true</code> if <code>billboardMode</code> is <code>"yaw"</code>, <code>false</code>
         * if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to <code>"none"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        faceCamera: boolean;
        /**
         * <code>true</code> if <code>billboardMode</code> is <code>"full"</code>,
         * <code>false</code> if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to
         * <code>"none"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        isFacingAvatar: boolean;
    };
    /**
     * The <code>"Web"</code> {@link Entities.EntityType|EntityType} displays a browsable web page. Each user views their own copy
    of the web page: if one user navigates to another page on the entity, other users do not see the change; if a video is being
    played, users don't see it in sync. Internally, a Web entity is rendered as a non-repeating, upside down texture, so additional
    transformations may be necessary if you reference a Web entity texture by UUID. It has properties in addition to the common
    {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a Web entity displaying at 1920 x 1080 resolution.</caption>
    var METERS_TO_INCHES = 39.3701;
    var entity = Entities.addEntity({
        type: "Web",
        sourceUrl: "https://overte.org/",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -4 })),
        rotation: MyAvatar.orientation,
        dimensions: {
            x: 3,
            y: 3 * 1080 / 1920,
            z: 0.01
        },
        dpi: 1920 / (3 * METERS_TO_INCHES),
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesWeb = {
        /**
         * The dimensions of the entity.
         * @defaultValue 0.1,0.1,0.01
         */
        dimensions: TVec3;
        /**
         * The URL of the web page to display. This value does not change as you or others navigate
         * on the Web entity.
         * @defaultValue ""
         */
        sourceUrl: string;
        /**
         * The color of the web surface. This color tints the web page displayed: the pixel
         * colors on the web page are multiplied by the property color. For example, a value of
         * <code>{ red: 255, green: 0, blue: 0 }</code> lets only the red channel of pixels' colors through.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The opacity of the web surface.
         * @defaultValue 1
         */
        alpha: number;
        /**
         * Color and alpha pulse.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        pulse: Entities.Pulse;
        /**
         * <code>true</code> if <code>billboardMode</code> is <code>"yaw"</code>, <code>false</code>
         * if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to <code>"none"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        faceCamera: boolean;
        /**
         * <code>true</code> if <code>billboardMode</code> is <code>"full"</code>,
         * <code>false</code> if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to
         * <code>"none"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        isFacingAvatar: boolean;
        /**
         * The resolution to display the page at, in dots per inch. If you convert this to dots per meter
         * (multiply by 1 / 0.0254 = 39.3701) then multiply <code>dimensions.x</code> and <code>dimensions.y</code> by that value
         * you get the resolution in pixels.
         * @defaultValue 30
         */
        dpi: number;
        /**
         * The URL of a JavaScript file to inject into the web page.
         * @defaultValue ""
         */
        scriptURL: string;
        /**
         * The maximum update rate for the web content, in frames/second.
         * @defaultValue 10
         */
        maxFPS: number;
        /**
         * The user input mode to use.
         * @defaultValue "touch"
         */
        inputMode: WebInputMode;
        /**
         * <code>true</code> if the entity is highlighted when it has keyboard
         * focus, <code>false</code> if it isn't.
         * @defaultValue true
         */
        showKeyboardFocusHighlight: boolean;
        /**
         * <code>true</code> if the web entity should have a background,
         * <code>false</code> if the web entity's background should be transparent. The webpage must have CSS properties for transparency set
         * on the <code>background-color</code> for this property to have an effect.
         * @defaultValue true
         */
        useBackground: boolean;
        /**
         * The user agent for the web entity to use when visiting web pages.
         * Default value: <code>Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko)
         * Chrome/69.0.3497.113 Mobile Safari/537.36</code>
         */
        userAgent: string;
    };
    /**
     * The <code>"Zone"</code> {@link Entities.EntityType|EntityType} is a volume of lighting effects and avatar permissions.
    Avatar interaction events such as {@link Entities.enterEntity} are also often used with a Zone entity. It has properties in
    addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a zone that casts a red key light along the x-axis.</caption>
    var zone = Entities.addEntity({
        type: "Zone",
        position: MyAvatar.position,
        dimensions: { x: 100, y: 100, z: 100 },
        keyLightMode: "enabled",
        keyLight: {
            "color": { "red": 255, "green": 0, "blue": 0 },
            "direction": { "x": 1, "y": 0, "z": 0 }
        },
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesZone = {
        /**
         * The dimensions of the volume in which the zone's lighting effects and avatar
         * permissions have effect.
         * @defaultValue 0.1,0.1,0.1
         */
        dimensions: TVec3;
        /**
         * The shape of the volume in which the zone's lighting effects and avatar
         * permissions have effect. Reverts to the default value if set to <code>"none"</code>, or set to <code>"compound"</code>
         * and <code>compoundShapeURL</code> is <code>""</code>.
         * @defaultValue "box"
         */
        shapeType: ShapeType;
        /**
         * The model file to use for the compound shape if <code>shapeType</code> is
         * <code>"compound"</code>.
         * @defaultValue ""
         */
        compoundShapeURL: string;
        /**
         * Configures the key light in the zone.
         * @defaultValue "inherit"
         */
        keyLightMode: Entities.ComponentMode;
        /**
         * The key light properties of the zone.
         */
        keyLight: Entities.KeyLight;
        /**
         * Configures the ambient light in the zone.
         * @defaultValue "inherit"
         */
        ambientLightMode: Entities.ComponentMode;
        /**
         * The ambient light properties of the zone.
         */
        ambientLight: Entities.AmbientLight;
        /**
         * Configures the skybox displayed in the zone.
         * @defaultValue "inherit"
         */
        skyboxMode: Entities.ComponentMode;
        /**
         * The skybox properties of the zone.
         */
        skybox: Entities.Skybox;
        /**
         * Configures the haze in the zone.
         * @defaultValue "inherit"
         */
        hazeMode: Entities.ComponentMode;
        /**
         * The haze properties of the zone.
         */
        haze: Entities.Haze;
        /**
         * Configures the bloom in the zone.
         * @defaultValue "inherit"
         */
        bloomMode: Entities.ComponentMode;
        /**
         * The bloom properties of the zone.
         */
        bloom: Entities.Bloom;
        /**
         * <code>true</code> if visitors can fly in the zone; <code>false</code> if they
         * cannot. Only works for domain entities.
         * @defaultValue true
         */
        flyingAllowed: boolean;
        /**
         * <code>true</code> if visitors with avatar collisions turned off will not
         * collide with content in the zone; <code>false</code> if visitors will always collide with content in the zone. Only
         * works for domain entities.
         * @defaultValue true
         */
        ghostingAllowed: boolean;
        /**
         * The URL of a JavaScript file that filters changes to properties of entities within the
         * zone. It is periodically executed for each entity in the zone. It can, for example, be used to not allow changes to
         * certain properties:
         * <pre>
         * function filter(properties) {
         * // Check and edit properties object values,
         * // e.g., properties.modelURL, as required.
         * return properties;
         * }
         * </pre>
         * @defaultValue ""
         */
        filterURL: string;
        /**
         * Configures the priority of updates from avatars in the
         * zone to other clients.
         * @defaultValue "inherit"
         */
        avatarPriority: Entities.AvatarPriorityMode;
        /**
         * Configures a zone for screen-sharing.
         * @defaultValue "inherit"
         */
        screenshare: Entities.ScreenshareMode;
    };
    /**
     * The <code>"Image"</code> {@link Entities.EntityType|EntityType} displays an image on a 2D rectangle in the domain.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create an image entity.</caption>
    var image = Entities.addEntity({
        type: "Image",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 0.6, y: 0.3, z: 0.01 },
        imageURL: "https://images.pexels.com/photos/1020315/pexels-photo-1020315.jpeg",
        billboardMode: "yaw",
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesImage = {
        /**
         * The dimensions of the entity.
         * @defaultValue 0.1,0.1,0.01
         */
        dimensions: TVec3;
        /**
         * The URL of the image to use.
         * @defaultValue ""
         */
        imageURL: string;
        /**
         * <code>true</code> if the image should be emissive (unlit), <code>false</code> if it
         * shouldn't.
         */
        emissive: boolean;
        /**
         * <code>true</code> if the image should maintain its aspect ratio,
         * <code>false</code> if it shouldn't.
         * @defaultValue true
         */
        keepAspectRatio: boolean;
        /**
         * The portion of the image to display. If width or height are <code>0</code>, it defaults
         * to the full image in that dimension.
         * @defaultValue 0,0,0,0
         */
        subImage: Rect;
        /**
         * The color of the image.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The opacity of the image.
         * @defaultValue 1
         */
        alpha: number;
        /**
         * Color and alpha pulse.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        pulse: Entities.Pulse;
        /**
         * <code>true</code> if <code>billboardMode</code> is <code>"yaw"</code>, <code>false</code>
         * if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to <code>"none"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        faceCamera: boolean;
        /**
         * <code>true</code> if <code>billboardMode</code> is <code>"full"</code>,
         * <code>false</code> if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to
         * <code>"none"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        isFacingAvatar: boolean;
    };
    /**
     * The <code>"Grid"</code> {@link Entities.EntityType|EntityType} displays a grid on a 2D plane.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     * @example
     * <caption>Create a grid entity.</caption>
    var grid = Entities.addEntity({
        type: "Grid",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 100.0, y: 100.0, z: 0.01 },
        followCamera: false,
        majorGridEvery: 4,
        minorGridEvery: 0.5,
        lifetime: 300  // Delete after 5 minutes.
    });
     */
    type EntityPropertiesGrid = {
        /**
         * 0.1,0.1,0.01 - The dimensions of the entity.
         */
        dimensions: TVec3;
        /**
         * The color of the grid.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The opacity of the grid.
         * @defaultValue 1
         */
        alpha: number;
        /**
         * Color and alpha pulse.
         * <p class="important">Deprecated: This property is deprecated and will be removed.</p>
         */
        pulse: Entities.Pulse;
        /**
         * <code>true</code> if the grid is always visible even as the camera moves to another
         * position, <code>false</code> if it doesn't follow the camrmea.
         * @defaultValue true
         */
        followCamera: boolean;
        /**
         * Integer number of <code>minorGridEvery</code> intervals at which to draw a thick grid
         * line. Minimum value = <code>1</code>.
         * @defaultValue 5
         */
        majorGridEvery: number;
        /**
         * Real number of meters at which to draw thin grid lines. Minimum value =
         * <code>0.001</code>.
         * @defaultValue 1
         */
        minorGridEvery: number;
    };
    /**
     * The <code>"Gizmo"</code> {@link Entities.EntityType|EntityType} displays an entity that could be used as UI.
    It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.
     */
    type EntityPropertiesGizmo = {
        /**
         * The dimensions of the entity.
         * @defaultValue 0.1,0.001,0.1
         */
        dimensions: TVec3;
        /**
         * The gizmo type of the entity.
         * @defaultValue "ring"
         */
        gizmoType: Entities.GizmoType;
        /**
         * The ring gizmo properties.
         */
        ring: Entities.RingGizmo;
    };
    /**
     * The axis-aligned bounding box of an entity.
     */
    type BoundingBox = {
        /**
         * The bottom right near (minimum axes values) corner of the AA box.
         */
        brn: TVec3;
        /**
         * The top far left (maximum axes values) corner of the AA box.
         */
        tfl: TVec3;
        /**
         * The center of the AA box.
         */
        center: TVec3;
        /**
         * The dimensions of the AA box.
         */
        dimensions: TVec3;
    };
    /**
     * Information on how an entity is rendered. Properties are only filled in for <code>Model</code> entities; other
    entity types have an empty object, <code>{}</code>.
     */
    type RenderInfo = {
        /**
         * The number of vertices in the entity.
         */
        verticesCount: number;
        /**
         * The number of textures in the entity.
         */
        texturesCount: number;
        /**
         * The total size of the textures in the entity, in bytes.
         */
        texturesSize: number;
        /**
         * <code>true</code> if any of the textures has transparency, <code>false</code>
         * if none of them do.
         */
        hasTransparent: boolean;
        /**
         * The number of draw calls required to render the entity.
         */
        drawCalls: number;
    };
    /**
     * Information about an entity property.
     */
    type EntityPropertyInfo = {
        /**
         * The internal number of the property.
         */
        propertyEnum: number;
        /**
         * The minimum numerical value the property may have, if available, otherwise <code>""</code>.
         */
        minimum: string;
        /**
         * The maximum numerical value the property may have, if available, otherwise <code>""</code>.
         */
        maximum: string;
    };
    /**
     * The result of a {@link Entities.findRayIntersection|findRayIntersection} search using a {@link PickRay}.
     */
    type RayToEntityIntersectionResult = {
        /**
         * <code>true</code> if the {@link PickRay} intersected an entity, <code>false</code> if it
         * didn't.
         */
        intersects: boolean;
        /**
         * Is always <code>true</code>.
         */
        accurate: boolean;
        /**
         * The ID if the entity intersected, if any, otherwise <code>null</code>.
         */
        entityID: Uuid;
        /**
         * The distance from the {@link PickRay} origin to the intersection point.
         */
        distance: number;
        /**
         * The intersection point.
         */
        intersection: TVec3;
        /**
         * The surface normal of the entity at the intersection point.
         */
        surfaceNormal: TVec3;
        /**
         * The face of the entity's axis-aligned box that the ray intersects.
         */
        face: BoxFace;
        /**
         * Extra information depending on the entity intersected. Currently, only <code>Model</code>
         * entities provide extra information, and the information provided depends on the <code>precisionPicking</code> parameter
         * value that the search function was called with.
         */
        extraInfo: any;
    };
    /**
     * Gets the properties of multiple entities.
     * @example
     * <caption>Retrieve the names of the nearby entities</caption>
    var SEARCH_RADIUS = 50; // meters
    var entityIDs = Entities.findEntities(MyAvatar.position, SEARCH_RADIUS);
    var propertySets = Entities.getMultipleEntityProperties(entityIDs, "name");
    print("Nearby entity names: " + JSON.stringify(propertySets));
     * @param entityIDs - The IDs of the entities to get the properties of.
     * @param [desiredProperties = []] - The name or names of the properties to get. For properties that are
        objects (e.g., the <code>"keyLight"</code> property), use the property and subproperty names in dot notation (e.g.,
        <code>"keyLight.color"</code>).
     * @returns The specified properties of each entity for each entity that can be found. If
        none of the entities can be found, then an empty array is returned. If no properties are specified, then all
        properties are returned.
     */
    function getMultipleEntityProperties(entityIDs: Uuid[], desiredProperties?: string[] | string): Entities.EntityProperties[];
    /**
     * Checks whether or not the script can change the <code>locked</code> property of entities. Locked entities have their
    <code>locked</code> property set to <code>true</code> and cannot be edited or deleted.
     * @example
     * <caption>Lock an entity if you can.</caption>
    if (Entities.canAdjustLocks()) {
        Entities.editEntity(entityID, { locked: true });
    } else {
        Window.alert("You do not have the permissions to set an entity locked!");
    }
     * @returns <code>true</code> if the domain server will allow the script to change the <code>locked</code>
        property of entities, otherwise <code>false</code>.
     */
    function canAdjustLocks(): boolean;
    /**
     * Checks whether or not the script can rez (create) new entities in the domain.
     * @returns <code>true</code> if the domain server will allow the script to rez (create) new entities, otherwise
        <code>false</code>.
     */
    function canRez(): boolean;
    /**
     * Checks whether or not the script can rez (create) new temporary entities in the domain. Temporary entities are entities
    with a finite <code>lifetime</code> property value set.
     * @returns <code>true</code> if the domain server will allow the script to rez (create) new temporary entities,
        otherwise <code>false</code>.
     */
    function canRezTmp(): boolean;
    /**
     * Checks whether or not the script can make changes to the asset server's assets.
     * @returns <code>true</code> if the domain server will allow the script to make changes to the asset server's
        assets, otherwise <code>false</code>.
     */
    function canWriteAssets(): boolean;
    /**
     * Checks whether or not the script can replace the domain's content set.
     * @returns <code>true</code> if the domain server will allow the script to replace the domain's content set,
        otherwise <code>false</code>.
     */
    function canReplaceContent(): boolean;
    /**
     * Checks whether or not the script can get and set the <code>privateUserData</code> property of entities.
     * @returns <code>true</code> if the domain server will allow the script to get and set the
        <code>privateUserData</code> property of entities, otherwise <code>false</code>.
     */
    function canGetAndSetPrivateUserData(): boolean;
    /**
     * Checks whether or not the script can rez avatar entities.
     * @returns <code>true</code> if the domain server will allow the script to rez avatar entities,
        otherwise <code>false</code>.
     */
    function canRezAvatarEntities(): boolean;
    /**
     * <p>How an entity is hosted and sent to others for display.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"domain"</code></td><td>Domain entities are stored on the domain, are visible to everyone, and are
          sent to everyone by the entity server.</td></tr>
        <tr><td><code>"avatar"</code></td><td>Avatar entities are stored on an Interface client, are visible to everyone,
          and are sent to everyone by the avatar mixer. They follow the client to each domain visited, displaying at the
          same domain coordinates unless parented to the client's avatar.</td></tr>
        <tr><td><code>"local"</code></td><td>Local entities are ephemeral &mdash; they aren't stored anywhere &mdash; and
          are visible only to the client. They follow the client to each domain visited, displaying at the same domain
          coordinates unless parented to the client's avatar. Additionally, local entities are always
          collisionless.</td></tr>
      </tbody>
    </table>
     */
    type EntityHostType = string;
    /**
     * Adds a new avatar entity (<code>{@link Entities.EntityProperties|entityHostType}</code> property is
    <code>"avatar"</code>) or domain entity (<code>{@link Entities.EntityProperties|entityHostType}</code> property is
    <code>"domain"</code>).
     * @param properties - The properties of the entity to create.
     * @param [avatarEntity = false] - <code>true</code> to create an avatar entity, <code>false</code> to create a
        domain entity.
     * @returns The ID of the entity if successfully created, otherwise {@link Uuid(0)|Uuid.NULL}.
     */
    function addEntity(properties: Entities.EntityProperties, avatarEntity?: boolean): Uuid;
    /**
     * Creates a clone of an entity. The clone has the same properties as the original except that: it has a modified
    <code>name</code> property, clone-related properties are set per the original entity's clone-related
    {@link Entities.EntityProperties|properties} (e.g., <code>cloneLifetime</code>), and its clone-related properties are
    set to their defaults.
    <p>Domain entities must have their <code>cloneable</code> property value be <code>true</code> in order to be cloned. A
    domain entity can be cloned by a client that doesn't have rez permissions in the domain.</p>
    <p>Avatar entities must have their <code>cloneable</code> and <code>cloneAvatarEntity</code> property values be
    <code>true</code> in order to be cloned.</p>
     * @param entityID - The ID of the entity to clone.
     * @returns The ID of the new entity if successfully cloned, otherwise {@link Uuid(0)|Uuid.NULL}.
     */
    function cloneEntity(entityID: Uuid): Uuid;
    /**
     * Gets an entity's property values.
     * @example
     * <caption>Report the color of a new box entity.</caption>
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        lifetime: 300  // Delete after 5 minutes.
    });
    var properties = Entities.getEntityProperties(entityID, ["color"]);
    print("Entity color: " + JSON.stringify(properties.color));
     * @param entityID - The ID of the entity to get the properties of.
     * @param [desiredProperties = []] - The name or names of the properties to get. For properties that are
        objects (e.g., the <code>"keyLight"</code> property), use the property and subproperty names in dot notation (e.g.,
        <code>"keyLight.color"</code>).
     * @returns The specified properties of the entity if the entity can be found, otherwise an
        empty object. If no properties are specified, then all properties are returned.
     */
    function getEntityProperties<T extends {[k: string]: any}>(entityID: Uuid, desiredProperties?: Array<keyof T>): T;
    /**
     * Edits an entity, changing one or more of its property values.
     * @example
     * <caption>Change the color of an entity.</caption>
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        lifetime: 300  // Delete after 5 minutes.
    });
    var properties = Entities.getEntityProperties(entityID, ["color"]);
    print("Entity color: " + JSON.stringify(properties.color));
    
    Script.setTimeout(function () { // Wait for the entity to be created before editing.
        Entities.editEntity(entityID, {
            color: { red: 255, green: 0, blue: 0 }
        });
        properties = Entities.getEntityProperties(entityID, ["color"]);
        print("Entity color: " + JSON.stringify(properties.color));
    }, 50);
     * @param entityID - The ID of the entity to edit.
     * @param properties - The new property values.
     * @returns The ID of the entity if the edit was successful, otherwise <code>null</code> or {@link Uuid|Uuid.NULL}.
     */
    function editEntity(entityID: Uuid, properties: Entities.EntityProperties): Uuid;
    /**
     * Deletes an entity.
     * @example
     * <caption>Delete an entity a few seconds after creating it.</caption>
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.5, y: 0.5, z: 0.5 }
    });
    
    Script.setTimeout(function () {
        Entities.deleteEntity(entityID);
    }, 3000);
     * @param entityID - The ID of the entity to delete.
     */
    function deleteEntity(entityID: Uuid): void;
    /**
     * Gets an entity's type.
     * @param id - The ID of the entity to get the type of.
     * @returns The type of the entity.
     */
    function getEntityType(id: Uuid): Entities.EntityType;
    /**
     * Gets an entity's script object. In particular, this is useful for accessing a {@link Entities.EntityPropertiesWeb|Web}
    entity's HTML <code>EventBridge</code> script object to exchange messages with the web page script.
    <p>To send a message from an Interface script to a Web entity over its event bridge:</p>
    <pre class="prettyprint"><code>var entityObject = Entities.getEntityObject(entityID);
    entityObject.emitScriptEvent(message);</code></pre>
    <p>To receive a message from a Web entity over its event bridge in an Interface script:</p>
    <pre class="prettyprint"><code>var entityObject = Entities.getentityObject(entityID);
    entityObject.webEventReceived.connect(function(message) {
        ...
    };</code></pre>
    <p>Alternatively, you can use {@link Entities.emitScriptEvent} and {@link Entities.webEventReceived} to exchange
    messages with a Web entity over its event bridge.</p>
     * @example
     * <caption>Exchange messages with a Web entity.</caption>
    // HTML file, name: "webEntity.html".
    <!DOCTYPE html>
    <html>
    <head>
        <title>HELLO</title>
    </head>
    <body>
        <h1>HELLO</h1>
        <script>
            function onScriptEventReceived(message) {
                // Message received from the script.
                console.log("Message received: " + message);
            }
       
            EventBridge.scriptEventReceived.connect(onScriptEventReceived);
       
            setTimeout(function () {
                // Send a message to the script.
                EventBridge.emitWebEvent("hello");
            }, 5000);
        </script>
    </body>
    </html>
    
    // Interface script file.
    var webEntity = Entities.addEntity({
        type: "Web",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -3 })),
        rotation: MyAvatar.orientation,
        sourceUrl: Script.resolvePath("webEntity.html"),
        alpha: 1.0,
        lifetime: 300  // 5 min
    });
    
    var webEntityObject;
    
    function onWebEventReceived(message) {
        // Message received.
        print("Message received: " + message);
    
        // Send a message back.
        webEntityObject.emitScriptEvent(message + " back");
    }
    
    Script.setTimeout(function () {
        webEntityObject = Entities.getEntityObject(webEntity);
        webEntityObject.webEventReceived.connect(onWebEventReceived);
    }, 500);
    
    Script.scriptEnding.connect(function () {
        Entities.deleteEntity(webEntity);
    });
     * @param id - The ID of the entity to get the script object for.
     * @returns The script object for the entity if found.
     */
    function getEntityObject(id: Uuid): any;
    /**
     * Checks whether an entity's assets have been loaded. For example, for an <code>Model</code> entity the result indicates
    whether its textures have been loaded.
     * @param id - The ID of the entity to check.
     * @returns <code>true</code> if the entity's assets have been loaded, otherwise <code>false</code>.
     */
    function isLoaded(id: Uuid): boolean;
    /**
     * Checks if there is an entity with a specified ID.
     * @param id - The ID to check.
     * @returns <code>true</code> if an entity with the specified ID exists, <code>false</code> if it doesn't.
     */
    function isAddedEntity(id: Uuid): boolean;
    /**
     * Calculates the size of some text in a {@link Entities.EntityProperties-Text|Text} entity. The entity need not be set
    visible.
    <p><strong>Note:</strong> The size of text in a Text entity cannot be calculated immediately after the
    entity is created; a short delay is required while the entity finishes being created.</p>
     * @param id - The ID of the Text entity to use for calculation.
     * @param text - The string to calculate the size of.
     * @returns The size of the <code>text</code> in meters if the object is a text entity, otherwise
        <code>{ height: 0, width : 0 }</code>.
     */
    function textSize(id: Uuid, text: string): Size;
    /**
     * Calls a method in a client entity script from an Interface, avatar, or client entity script, or calls a method in a
    server entity script from a server entity script. The entity script method must be exposed as a property in the target
    entity script. Additionally, if calling a server entity script, the server entity script must include the method's name
    in an exposed property called <code>remotelyCallable</code> that is an array of method names that can be called.
     * @example
     * <caption>Call a method in a client entity script from an Interface script.</caption>
    // Client entity script.
    var entityScript = (function () {
        this.entityMethod = function (id, params) {
            print("Method at entity : " + id + " ; " + params[0] + ", " + params[1]);
        };
    });
    
    // Entity that hosts the client entity script.
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        script: "(" + entityScript + ")",  // Could host the script on a Web server instead.
        lifetime: 300  // Delete after 5 minutes.
    });
    
    // Interface script call to the client entity script.
    Script.setTimeout(function () {
        Entities.callEntityMethod(entityID, "entityMethod", ["hello", 12]);
    }, 1000); // Wait for the entity to be created.
     * @param entityID - The ID of the entity to call the method in.
     * @param method - The name of the method to call. The method is called with the entity ID as the first parameter
        and the <code>parameters</code> value as the second parameter.
     * @param [parameters = []] - The additional parameters to call the specified method with.
     */
    function callEntityMethod(entityID: Uuid, method: string, parameters?: string[]): void;
    /**
     * Calls a method in a server entity script from an Interface, avatar, or client entity script. The server entity script
    method must be exposed as a property in the target server entity script. Additionally, the server entity script must
    include the method's name in an exposed property called <code>remotelyCallable</code> that is an array of method names
    that can be called.
     * @example
     * <caption>Call a method in a server entity script from an Interface script.</caption>
    // Server entity script.
    var entityScript = (function () {
        this.entityMethod = function (id, params) {
            print("Method at entity : " + id + " ; " + params[0] + ", " + params[1]); // In server log.
        };
        this.remotelyCallable = [
            "entityMethod"
        ];
    });
    
    // Entity that hosts the server entity script.
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        serverScripts: "(" + entityScript + ")",  // Could host the script on a Web server instead.
        lifetime: 300  // Delete after 5 minutes.
    });
    
    // Interface script call to the server entity script.
    Script.setTimeout(function () {
        Entities.callEntityServerMethod(entityID, "entityMethod", ["hello", 12]);
    }, 1000); // Wait for the entity to be created.
     * @param entityID - The ID of the entity to call the method in.
     * @param method - The name of the method to call. The method is called with the entity ID as the first parameter
        and the <code>parameters</code> value as the second parameter.
     * @param [parameters = []] - The additional parameters to call the specified method with.
     */
    function callEntityServerMethod(entityID: Uuid, method: string, parameters?: string[]): void;
    /**
     * Calls a method in a specific user's client entity script from a server entity script. The entity script method must be
    exposed as a property in the target client entity script. Additionally, the client entity script must
    include the method's name in an exposed property called <code>remotelyCallable</code> that is an array of method names
    that can be called.
     * @example
     * <caption>Call a method in a client entity script from a server entity script.</caption>
    // Client entity script.
    var clientEntityScript = (function () {
        this.entityMethod = function (id, params) {
            print("Method at client entity : " + id + " ; " + params[0] + ", " + params[1]);
        };
        this.remotelyCallable = [
            "entityMethod"
        ];
    });
    
    // Server entity script.
    var serverEntityScript = (function () {
        var clientSessionID,
            clientEntityID;
    
        function callClientMethod() {
            // Server entity script call to client entity script.
            Entities.callEntityClientMethod(clientSessionID, clientEntityID, "entityMethod", ["hello", 12]);
        }
    
        // Obtain client entity details then call client entity method.
        this.entityMethod = function (id, params) {
            clientSessionID = params[0];
            clientEntityID = params[1];
            callClientMethod();
        };
        this.remotelyCallable = [
            "entityMethod"
        ];
    });
    
    // Entity that hosts the client entity script.
    var clientEntityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -1, y: 0, z: -5 })),
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        script: "(" + clientEntityScript + ")",  // Could host the script on a Web server instead.
        lifetime: 300  // Delete after 5 minutes.
    });
    
    // Entity that hosts the server entity script.
    var serverEntityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 1, y: 0, z: -5 })),
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        serverScripts: "(" + serverEntityScript + ")",  // Could host the script on a Web server instead.
        lifetime: 300  // Delete after 5 minutes.
    });
    
    // Interface script call to the server entity script.
    Script.setTimeout(function () {
        Entities.callEntityServerMethod(serverEntityID, "entityMethod", [MyAvatar.sessionUUID, clientEntityID]);
    }, 1000); // Wait for the entities to be created.
     * @param clientSessionID - The session ID of the user to call the method in.
     * @param entityID - The ID of the entity to call the method in.
     * @param method - The name of the method to call. The method is called with the entity ID as the first parameter
        and the <code>parameters</code> value as the second parameter.
     * @param [parameters = []] - The additional parameters to call the specified method with.
     */
    function callEntityClientMethod(clientSessionID: Uuid, entityID: Uuid, method: string, parameters?: string[]): void;
    /**
     * Finds the domain or avatar entity with a position closest to a specified point and within a specified radius.
     * @example
     * <caption>Find the closest entity within 10m of your avatar.</caption>
    var entityID = Entities.findClosestEntity(MyAvatar.position, 10);
    print("Closest entity: " + entityID);
     * @param center - The point about which to search.
     * @param radius - The radius within which to search.
     * @returns The ID of the entity that is closest to the <code>center</code> and within the <code>radius</code>, if
        there is one, otherwise <code>null</code>.
     */
    function findClosestEntity(center: TVec3, radius: number): Uuid;
    /**
     * Finds all domain and avatar entities that intersect a sphere.
    <p><strong>Note:</strong> Server entity scripts only find entities that have a server entity script
    running in them or a parent entity. You can apply a dummy script to entities that you want found in a search.</p>
     * @example
     * <caption>Report how many entities are within 10m of your avatar.</caption>
    var entityIDs = Entities.findEntities(MyAvatar.position, 10);
    print("Number of entities within 10m: " + entityIDs.length);
     * @param center - The point about which to search.
     * @param radius - The radius within which to search.
     * @returns An array of entity IDs that intersect the search sphere. The array is empty if no entities could be
        found.
     */
    function findEntities(center: TVec3, radius: number): Uuid[];
    /**
     * Finds all domain and avatar entities whose axis-aligned boxes intersect a search axis-aligned box.
    <p><strong>Note:</strong> Server entity scripts only find entities that have a server entity script
    running in them or a parent entity. You can apply a dummy script to entities that you want found in a search.</p>
     * @param corner - The corner of the search AA box with minimum co-ordinate values.
     * @param dimensions - The dimensions of the search AA box.
     * @returns An array of entity IDs whose AA boxes intersect the search AA box. The array is empty if no entities
        could be found.
     */
    function findEntitiesInBox(corner: TVec3, dimensions: TVec3): Uuid[];
    /**
     * Finds all domain and avatar entities whose axis-aligned boxes intersect a search frustum.
    <p><strong>Note:</strong> Server entity scripts only find entities that have a server entity script
    running in them or a parent entity. You can apply a dummy script to entities that you want found in a search.</p>
     * @example
     * <caption>Report the number of entities in view.</caption>
    var entityIDs = Entities.findEntitiesInFrustum(Camera.frustum);
    print("Number of entities in view: " + entityIDs.length);
     * @param frustum - The frustum to search in. The <code>position</code>, <code>orientation</code>,
        <code>projection</code>, and <code>centerRadius</code> properties must be specified. The <code>fieldOfView</code>
        and <code>aspectRatio</code> properties are not used; these values are specified by the <code>projection</code>.
     * @returns An array of entity IDs whose axis-aligned boxes intersect the search frustum. The array is empty if no
        entities could be found.
     */
    function findEntitiesInFrustum(frustum: ViewFrustum): Uuid[];
    /**
     * Finds all domain and avatar entities of a particular type that intersect a sphere.
    <p><strong>Note:</strong> Server entity scripts only find entities that have a server entity script
    running in them or a parent entity. You can apply a dummy script to entities that you want found in a search.</p>
     * @example
     * <caption>Report the number of Model entities within 10m of your avatar.</caption>
    var entityIDs = Entities.findEntitiesByType("Model", MyAvatar.position, 10);
    print("Number of Model entities within 10m: " + entityIDs.length);
     * @param entityType - The type of entity to search for.
     * @param center - The point about which to search.
     * @param radius - The radius within which to search.
     * @returns An array of entity IDs of the specified type that intersect the search sphere. The array is empty if
        no entities could be found.
     */
    function findEntitiesByType(entityType: Entities.EntityType, center: TVec3, radius: number): Uuid[];
    /**
     * Finds all domain and avatar entities with a particular name that intersect a sphere.
    <p><strong>Note:</strong> Server entity scripts only find entities that have a server entity script
    running in them or a parent entity. You can apply a dummy script to entities that you want found in a search.</p>
     * @example
     * <caption>Report the number of entities with the name, "Light-Target".</caption>
    var entityIDs = Entities.findEntitiesByName("Light-Target", MyAvatar.position, 10, false);
    print("Number of entities with the name Light-Target: " + entityIDs.length);
     * @param entityName - The name of the entity to search for.
     * @param center - The point about which to search.
     * @param radius - The radius within which to search.
     * @param [caseSensitive = false] - <code>true</code> if the search is case-sensitive, <code>false</code> if it is
        case-insensitive.
     * @returns An array of entity IDs that have the specified name and intersect the search sphere. The array is
        empty if no entities could be found.
     */
    function findEntitiesByName(entityName: string, center: TVec3, radius: number, caseSensitive?: boolean): Uuid[];
    /**
     * Finds the first avatar or domain entity intersected by a {@link PickRay}. <code>Light</code> and <code>Zone</code>
    entities are not intersected unless they've been configured as pickable using
    {@link Entities.setLightsArePickable|setLightsArePickable} and {@link Entities.setZonesArePickable|setZonesArePickable},
    respectively.
     * @example
     * <caption>Find the entity directly in front of your avatar.</caption>
    var pickRay = {
        origin: MyAvatar.position,
        direction: Quat.getFront(MyAvatar.orientation)
    };
    
    var intersection = Entities.findRayIntersection(pickRay, true);
    if (intersection.intersects) {
        print("Entity in front of avatar: " + intersection.entityID);
    } else {
        print("No entity in front of avatar.");
    }
     * @param pickRay - The pick ray to use for finding entities.
     * @param [precisionPicking = false] - <code>true</code> to pick against precise meshes, <code>false</code> to pick
        against coarse meshes. If <code>true</code> and the intersected entity is a <code>Model</code> entity, the result's
        <code>extraInfo</code> property includes more information than it otherwise would.
     * @param [entitiesToInclude = []] - If not empty, then the search is restricted to these entities.
     * @param [entitiesToDiscard = []] - Entities to ignore during the search.
     * @param [visibleOnly = false] - <code>true</code> if only entities that are
        <code>{@link Entities.EntityProperties|visible}</code> are searched for, <code>false</code> if their visibility
        doesn't matter.
     * @param [collideableOnly = false] - <code>true</code> if only entities that are not
        <code>{@link Entities.EntityProperties|collisionless}</code> are searched, <code>false</code> if their
        collideability doesn't matter.
     * @returns The result of the search for the first intersected entity.
     */
    function findRayIntersection(pickRay: PickRay, precisionPicking?: boolean, entitiesToInclude?: Uuid[], entitiesToDiscard?: Uuid[], visibleOnly?: boolean, collideableOnly?: boolean): Entities.RayToEntityIntersectionResult;
    /**
     * Reloads an entity's server entity script such that the latest version re-downloaded.
     * @param entityID - The ID of the entity to reload the server entity script of.
     * @returns <code>true</code> if the reload request was successfully sent to the server, otherwise
        <code>false</code>.
     */
    function reloadServerScripts(entityID: Uuid): boolean;
    /**
     * Gets the status of a server entity script attached to an entity.
     * @param entityID - The ID of the entity to get the server entity script status of.
     * @param callback - The function to call upon completion.
     * @returns <code>true</code> always.
     */
    function getServerScriptStatus(entityID: Uuid, callback: Entities.getServerScriptStatusCallback): boolean;
    /**
     * Called when a {@link Entities.getServerScriptStatus} call is complete.
     * @param success - <code>true</code> if the server entity script status could be obtained, otherwise
        <code>false</code>.
     * @param isRunning - <code>true</code> if there is a server entity script running, otherwise <code>false</code>.
     * @param status - <code>"running"</code> if there is a server entity script running, otherwise an error string.
     * @param errorInfo - <code>""</code> if there is a server entity script running, otherwise it may contain extra
        information on the error.
     */
    type getServerScriptStatusCallback = (success: boolean, isRunning: boolean, status: string, errorInfo: string) => void;
    /**
     * Gets metadata for certain entity properties such as <code>script</code> and <code>serverScripts</code>.
     * @param entityID - The ID of the entity to get the metadata for.
     * @param property - The property name to get the metadata for.
     * @param scope - The "<code>this</code>" context that the callback will be executed within.
     * @param callback - The function to call upon completion.
     * @returns <code>true</code> if the request for metadata was successfully sent to the server, otherwise
        <code>false</code>.
     */
    function queryPropertyMetadata(entityID: Uuid, property: string, scope: any, callback: Entities.queryPropertyMetadataCallback): boolean;
    /**
     * Called when a {@link Entities.queryPropertyMetadata} call is complete.
     * @param error - <code>undefined</code> if there was no error, otherwise an error message.
     * @param result - The metadata for the requested entity property if there was no error, otherwise
        <code>undefined</code>.
     */
    type queryPropertyMetadataCallback = (error: string, result: any) => void;
    /**
     * Sets whether or not ray picks intersect the bounding box of {@link Entities.EntityPropertiesLight|Light} entities. By
    default, Light entities are not intersected. The setting lasts for the Interface session. Ray picks are performed using
    {@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.
     * @param value - <code>true</code> to make ray picks intersect the bounding box of
        {@link Entities.EntityPropertiesLight|Light} entities, otherwise <code>false</code>.
     */
    function setLightsArePickable(value: boolean): void;
    /**
     * Gets whether or not ray picks intersect the bounding box of {@link Entities.EntityPropertiesLight|Light} entities. Ray
    picks are performed using {@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.
     * @returns <code>true</code> if ray picks intersect the bounding box of
        {@link Entities.EntityPropertiesLight|Light} entities, otherwise <code>false</code>.
     */
    function getLightsArePickable(): boolean;
    /**
     * Sets whether or not ray picks intersect the bounding box of {@link Entities.EntityPropertiesZone|Zone} entities. By
    default, Zone entities are not intersected. The setting lasts for the Interface session. Ray picks are performed using
    {@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.
     * @param value - <code>true</code> to make ray picks intersect the bounding box of
        {@link Entities.EntityPropertiesZone|Zone} entities, otherwise <code>false</code>.
     */
    function setZonesArePickable(value: boolean): void;
    /**
     * Gets whether or not ray picks intersect the bounding box of {@link Entities.EntityPropertiesZone|Zone} entities. Ray
    picks are performed using {@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.
     * @returns <code>true</code> if ray picks intersect the bounding box of
         {@link Entities.EntityPropertiesZone|Zone} entities, otherwise <code>false</code>.
     */
    function getZonesArePickable(): boolean;
    /**
     * Sets whether or not {@link Entities.EntityPropertiesZone|Zone} entities' boundaries should be drawn. <em>Currently not
    used.</em>
     * @param value - <code>true</code> if {@link Entities.EntityPropertiesZone|Zone} entities' boundaries should be
        drawn, otherwise <code>false</code>.
     */
    function setDrawZoneBoundaries(value: boolean): void;
    /**
     * Gets whether or not {@link Entities.EntityPropertiesZone|Zone} entities' boundaries should be drawn. <em>Currently
    not used.</em>
     * @returns <code>true</code> if {@link Entities.EntityPropertiesZone|Zone} entities' boundaries should be
       drawn, otherwise <code>false</code>.
     */
    function getDrawZoneBoundaries(): boolean;
    /**
     * Sets the values of all voxels in a spherical portion of a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @example
     * <caption>Create a PolyVox sphere.</caption>
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));
    var polyVox = Entities.addEntity({
        type: "PolyVox",
        position: position,
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 32, y: 32, z: 32 },
        lifetime: 300  // Delete after 5 minutes.
    });
    Entities.setVoxelSphere(polyVox, position, 0.9, 255);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param center - The center of the sphere of voxels to set, in world coordinates.
     * @param radius - The radius of the sphere of voxels to set, in world coordinates.
     * @param value - If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.
     */
    function setVoxelSphere(entityID: Uuid, center: TVec3, radius: number, value: number): void;
    /**
     * Sets the values of all voxels in a capsule-shaped portion of a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @example
     * <caption>Create a PolyVox capsule shape.</caption>
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));
    var polyVox = Entities.addEntity({
        type: "PolyVox",
        position: position,
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 32, y: 32, z: 32 },
        lifetime: 300  // Delete after 5 minutes.
    });
    var startPosition = Vec3.sum({ x: -0.5, y: 0, z: 0 }, position);
    var endPosition = Vec3.sum({ x: 0.5, y: 0, z: 0 }, position);
    Entities.setVoxelCapsule(polyVox, startPosition, endPosition, 0.5, 255);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param start - The center of the sphere of voxels to set, in world coordinates.
     * @param end - The center of the sphere of voxels to set, in world coordinates.
     * @param radius - The radius of the capsule cylinder and spherical ends, in world coordinates.
     * @param value - If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.
     */
    function setVoxelCapsule(entityID: Uuid, start: TVec3, end: TVec3, radius: number, value: number): void;
    /**
     * Sets the value of a particular voxel in a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @example
     * <caption>Create a cube PolyVox entity and clear the minimum axes' corner voxel.</caption>
    var entity = Entities.addEntity({
        type: "PolyVox",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 16, y: 16, z: 16 },
        lifetime: 300  // Delete after 5 minutes.
    });
    Entities.setAllVoxels(entity, 1);
    Entities.setVoxel(entity, { x: 0, y: 0, z: 0 }, 0);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param position - The position relative to the minimum axes values corner of the entity. The
        <code>position</code> coordinates are rounded to the nearest integer to get the voxel coordinate. The minimum axes
        corner voxel is <code>{ x: 0, y: 0, z: 0 }</code>.
     * @param value - If <code>value % 256 == 0</code> then voxel is cleared, otherwise the voxel is set.
     */
    function setVoxel(entityID: Uuid, position: TVec3, value: number): void;
    /**
     * Sets the values of all voxels in a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @example
     * <caption>Create a PolyVox cube.</caption>
    var entity = Entities.addEntity({
        type: "PolyVox",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 16, y: 16, z: 16 },
        lifetime: 300  // Delete after 5 minutes.
    });
    Entities.setAllVoxels(entity, 1);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param value - If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.
     */
    function setAllVoxels(entityID: Uuid, value: number): void;
    /**
     * Sets the values of all voxels in a cubic portion of a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @example
     * <caption>Create a PolyVox cube and clear the voxels in one corner.</caption>
    var polyVox = Entities.addEntity({
        type: "PolyVox",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 16, y: 16, z: 16 },
        lifetime: 300  // Delete after 5 minutes.
    });
    Entities.setAllVoxels(polyVox, 1);
    var cuboidPosition = { x: 12, y: 12, z: 12 };
    var cuboidSize = { x: 4, y: 4, z: 4 };
    Entities.setVoxelsInCuboid(polyVox, cuboidPosition, cuboidSize, 0);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param lowPosition - The position of the minimum axes value corner of the cube of voxels to set, in voxel
        coordinates.
     * @param cuboidSize - The size of the cube of voxels to set, in voxel coordinates.
     * @param value - If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.
     */
    function setVoxelsInCuboid(entityID: Uuid, lowPosition: TVec3, cuboidSize: TVec3, value: number): void;
    /**
     * Converts voxel coordinates in a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity to world coordinates. Voxel
    coordinates are relative to the minimum axes values corner of the entity with a scale of <code>Vec3.ONE</code> being the
    dimensions of each voxel.
     * @example
     * <caption>Create a PolyVox cube with the 0,0,0 voxel replaced by a sphere.</caption>
    // Cube PolyVox with 0,0,0 voxel missing.
    var polyVox = Entities.addEntity({
        type: "PolyVox",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 16, y: 16, z: 16 },
        lifetime: 300  // Delete after 5 minutes.
    });
    Entities.setAllVoxels(polyVox, 1);
    Entities.setVoxel(polyVox, { x: 0, y: 0, z: 0 }, 0);
    
    // Red sphere in 0,0,0 corner position.
    var cornerPosition = Entities.voxelCoordsToWorldCoords(polyVox, { x: 0, y: 0, z: 0 });
    var voxelDimensions = Vec3.multiply(2 / 16, Vec3.ONE);
    var sphere = Entities.addEntity({
        type: "Sphere",
        position: Vec3.sum(cornerPosition, Vec3.multiply(0.5, voxelDimensions)),
        dimensions: voxelDimensions,
        color: { red: 255, green: 0, blue: 0 },
        lifetime: 300  // Delete after 5 minutes.
    });
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param voxelCoords - The voxel coordinates. May be fractional and outside the entity's bounding box.
     * @returns The world coordinates of the <code>voxelCoords</code> if the <code>entityID</code> is a
        {@link Entities.EntityPropertiesPolyVox|PolyVox} entity, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function voxelCoordsToWorldCoords(entityID: Uuid, voxelCoords: TVec3): TVec3;
    /**
     * Converts world coordinates to voxel coordinates in a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity. Voxel
    coordinates are relative to the minimum axes values corner of the entity, with a scale of <code>Vec3.ONE</code> being
    the dimensions of each voxel.
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param worldCoords - The world coordinates. The value may be outside the entity's bounding box.
     * @returns The voxel coordinates of the <code>worldCoords</code> if the <code>entityID</code> is a
        {@link Entities.EntityPropertiesPolyVox|PolyVox} entity, otherwise {@link TVec3(0)|Vec3.ZERO}. The value may be
        fractional and outside the entity's bounding box.
     */
    function worldCoordsToVoxelCoords(entityID: Uuid, worldCoords: TVec3): TVec3;
    /**
     * Converts voxel coordinates in a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity to local coordinates. Local
    coordinates are relative to the minimum axes value corner of the entity, with the scale being the same as world
    coordinates. Voxel coordinates are relative to the minimum axes values corner of the entity, with a scale of
    <code>Vec3.ONE</code> being the dimensions of each voxel.
     * @example
     * <caption>Get the world dimensions of a voxel in a PolyVox entity.</caption>
    var polyVox = Entities.addEntity({
        type: "PolyVox",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),
        dimensions: { x: 2, y: 2, z: 2 },
        voxelVolumeSize: { x: 16, y: 16, z: 16 },
        lifetime: 300  // Delete after 5 minutes.
    });
    var voxelDimensions = Entities.voxelCoordsToLocalCoords(polyVox, Vec3.ONE);
    print("Voxel dimensions: " + JSON.stringify(voxelDimensions));
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param voxelCoords - The voxel coordinates. The value may be fractional and outside the entity's bounding box.
     * @returns The local coordinates of the <code>voxelCoords</code> if the <code>entityID</code> is a
        {@link Entities.EntityPropertiesPolyVox|PolyVox} entity, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function voxelCoordsToLocalCoords(entityID: Uuid, voxelCoords: TVec3): TVec3;
    /**
     * Converts local coordinates to voxel coordinates in a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity. Local
    coordinates are relative to the minimum axes value corner of the entity, with the scale being the same as world
    coordinates. Voxel coordinates are relative to the minimum axes values corner of the entity, with a scale of
    <code>Vec3.ONE</code> being the dimensions of each voxel.
     * @param entityID - The ID of the {@link Entities.EntityPropertiesPolyVox|PolyVox} entity.
     * @param localCoords - The local coordinates. The value may be outside the entity's bounding box.
     * @returns The voxel coordinates of the <code>worldCoords</code> if the <code>entityID</code> is a
        {@link Entities.EntityPropertiesPolyVox|PolyVox} entity, otherwise {@link TVec3(0)|Vec3.ZERO}. The value may be
        fractional and outside the entity's bounding box.
     */
    function localCoordsToVoxelCoords(entityID: Uuid, localCoords: TVec3): TVec3;
    /**
     * Sets all the points in a {@link Entities.EntityPropertiesLine|Line} entity.
     * @example
     * <caption>Change the shape of a Line entity.</caption>
    // Draw a horizontal line between two points.
    var entity = Entities.addEntity({
        type: "Line",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 2, y: 2, z: 1 },
        linePoints: [
            { x: -1, y: 0, z: 0 },
            { x:1, y: -0, z: 0 }
        ],
        color: { red: 255, green: 0, blue: 0 },
        lifetime: 300  // Delete after 5 minutes.
    });
    
    // Change the line to be a "V".
    Script.setTimeout(function () {
        Entities.setAllPoints(entity, [
            { x: -1, y: 1, z: 0 },
            { x: 0, y: -1, z: 0 },
            { x: 1, y: 1, z: 0 },
        ]);
    }, 2000);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesLine|Line} entity.
     * @param points - The points that the entity should draw lines between.
     * @returns <code>true</code> if the entity was updated, otherwise <code>false</code>. The property may fail to
        be updated if the entity does not exist, the entity is not a {@link Entities.EntityPropertiesLine|Line} entity,
        one of the points is outside the entity's dimensions, or the number of points is greater than the maximum allowed.
     */
    function setAllPoints(entityID: Uuid, points: TVec3[]): boolean;
    /**
     * Appends a point to a {@link Entities.EntityPropertiesLine|Line} entity.
     * @example
     * <caption>Append a point to a Line entity.</caption>
    // Draw a line between two points.
    var entity = Entities.addEntity({
        type: "Line",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),
        rotation: MyAvatar.orientation,
        dimensions: { x: 2, y: 2, z: 1 },
        linePoints: [
            { x: -1, y: 1, z: 0 },
            { x: 0, y: -1, z: 0 }
        ],
        color: { red: 255, green: 0, blue: 0 },
        lifetime: 300  // Delete after 5 minutes.
    });
    
    // Add a third point to create a "V".
    Script.setTimeout(function () {
        Entities.appendPoint(entity, { x: 1, y: 1, z: 0 });
    }, 50); // Wait for the entity to be created.
     * @param entityID - The ID of the {@link Entities.EntityPropertiesLine|Line} entity.
     * @param point - The point to add to the line. The coordinates are relative to the entity's position.
     * @returns <code>true</code> if the point was added to the line, otherwise <code>false</code>. The point may
        fail to be added if the entity does not exist, the entity is not a {@link Entities.EntityPropertiesLine|Line}
        entity, the point is outside the entity's dimensions, or the maximum number of points has been reached.
     */
    function appendPoint(entityID: Uuid, point: TVec3): boolean;
    /**
     * Dumps debug information about all entities in Interface's local in-memory tree of entities it knows about to the program
    log.
     */
    function dumpTree(): void;
    /**
     * Adds an action to an entity. An action is registered with the physics engine and is applied every physics simulation
    step. Any entity may have more than one action associated with it, but only as many as will fit in an entity's
    <code>{@link Entities.EntityProperties|actionData}</code> property.
     * @example
     * <caption>Constrain a cube to move along a vertical line.</caption>
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        dynamic: true,
        collisionless: false,
        userData: "{ \"grabbableKey\": { \"grabbable\": true, \"kinematic\": false } }",
        lifetime: 300  // Delete after 5 minutes.
    });
    
    var actionID = Entities.addAction("slider", entityID, {
        axis: { x: 0, y: 1, z: 0 },
        linearLow: 0,
        linearHigh: 0.6
    });
     * @param actionType - The type of action.
     * @param entityID - The ID of the entity to add the action to.
     * @param arguments - Configures the action.
     * @returns The ID of the action if successfully added, otherwise <code>null</code>.
     */
    function addAction(actionType: Entities.ActionType, entityID: Uuid, arguments: Entities.ActionArguments): Uuid;
    /**
     * Updates an entity action.
     * @param entityID - The ID of the entity with the action to update.
     * @param actionID - The ID of the action to update.
     * @param arguments - The arguments to update.
     * @returns <code>true</code> if the update was successful, otherwise <code>false</code>.
     */
    function updateAction(entityID: Uuid, actionID: Uuid, arguments: Entities.ActionArguments): boolean;
    /**
     * Deletes an action from an entity.
     * @param entityID - The ID of entity to delete the action from.
     * @param actionID - The ID of the action to delete.
     * @returns <code>true</code> if the delete was successful, otherwise <code>false</code>.
     */
    function deleteAction(entityID: Uuid, actionID: Uuid): boolean;
    /**
     * Gets the IDs of the actions that are associated with an entity.
     * @param entityID - The entity to get the action IDs for.
     * @returns The action IDs if any are found, otherwise an empty array.
     */
    function getActionIDs(entityID: Uuid): Uuid[];
    /**
     * Gets the arguments of an action.
     * @param entityID - The ID of the entity with the action.
     * @param actionID - The ID of the action to get the arguments of.
     * @returns The arguments of the action if found, otherwise an empty object.
     */
    function getActionArguments(entityID: Uuid, actionID: Uuid): Entities.ActionArguments;
    /**
     * Gets the translation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity relative to the entity's
    position and orientation.
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @returns The translation of the joint relative to the entity's position and orientation if the entity is a
        {@link Entities.EntityPropertiesModel|Model} entity, the entity is loaded, and the joint index is valid; otherwise
        <code>{@link TVec3(0)|Vec3.ZERO}</code>.
     */
    function getAbsoluteJointTranslationInObjectFrame(entityID: Uuid, jointIndex: number): TVec3;
    /**
     * Gets the index of the parent joint of a joint in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @param entityID - The ID of the entity.
     * @param index - The integer index of the joint.
     * @returns The index of the parent joint if found, otherwise <code>-1</code>.
     */
    function getJointParent(entityID: Uuid, index: number): number;
    /**
     * Gets the rotation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity relative to the entity's
    position and orientation.
     * @example
     * <caption>Compare the local and absolute rotations of an avatar model's left hand joint.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
        var index = Entities.getJointIndex(entityID, "LeftHand");
        var localRotation = Entities.getLocalJointRotation(entityID, index);
        var absoluteRotation = Entities.getAbsoluteJointRotationInObjectFrame(entityID, index);
        print("Left hand local rotation: " + JSON.stringify(Quat.safeEulerAngles(localRotation)));
        print("Left hand absolute rotation: " + JSON.stringify(Quat.safeEulerAngles(absoluteRotation)));
    }, 2000);
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @returns The rotation of the joint relative to the entity's orientation if the entity is a
        {@link Entities.EntityPropertiesModel|Model} entity, the entity is loaded, and the joint index is valid; otherwise
        <code>{@link TQuat(0)|Quat.IDENTITY}</code>.
     */
    function getAbsoluteJointRotationInObjectFrame(entityID: Uuid, jointIndex: number): TQuat;
    /**
     * Sets the translation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity relative to the entity's
    position and orientation.
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @param translation - The translation to set the joint to relative to the entity's position and orientation.
     * @returns <code>true</code>if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the joint index is valid, and the translation is different to the joint's current translation; otherwise
        <code>false</code>.
     */
    function setAbsoluteJointTranslationInObjectFrame(entityID: Uuid, jointIndex: number, translation: TVec3): boolean;
    /**
     * Sets the rotation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity relative to the entity's position
    and orientation.
     * @example
     * <caption>Raise an avatar model's left palm.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
        var index = Entities.getJointIndex(entityID, "LeftHand");
        var absoluteRotation = Entities.getAbsoluteJointRotationInObjectFrame(entityID, index);
        absoluteRotation = Quat.multiply(Quat.fromPitchYawRollDegrees(0, 0, 90), absoluteRotation);
        var success = Entities.setAbsoluteJointRotationInObjectFrame(entityID, index, absoluteRotation);
        print("Success: " + success);
    }, 2000);
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @param rotation - The rotation to set the joint to relative to the entity's orientation.
     * @returns <code>true</code> if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the joint index is valid, and the rotation is different to the joint's current rotation; otherwise
        <code>false</code>.
     */
    function setAbsoluteJointRotationInObjectFrame(entityID: Uuid, jointIndex: number, rotation: TQuat): boolean;
    /**
     * Gets the local translation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @returns The local translation of the joint if the entity is a {@link Entities.EntityPropertiesModel|Model}
        entity, the entity is loaded, and the joint index is valid; otherwise <code>{@link TVec3(0)|Vec3.ZERO}</code>.
     */
    function getLocalJointTranslation(entityID: Uuid, jointIndex: number): TVec3;
    /**
     * Gets the local rotation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @example
     * <caption>Report the local rotation of an avatar model's head joint.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
        var index = Entities.getJointIndex(entityID, "Head");
        var rotation = Entities.getLocalJointRotation(entityID,  index);
        print("Head local rotation: " + JSON.stringify(Quat.safeEulerAngles(rotation)));
    }, 2000);
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @returns The local rotation of the joint if the entity is a {@link Entities.EntityPropertiesModel|Model} entity,
        the entity is loaded, and the joint index is valid; otherwise <code>{@link TQuat(0)|Quat.IDENTITY}</code>.
     */
    function getLocalJointRotation(entityID: Uuid, jointIndex: number): TQuat;
    /**
     * Sets the local translation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @param translation - The local translation to set the joint to.
     * @returns <code>true</code>if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the joint index is valid, and the translation is different to the joint's current translation; otherwise
        <code>false</code>.
     */
    function setLocalJointTranslation(entityID: Uuid, jointIndex: number, translation: TVec3): boolean;
    /**
     * Sets the local rotation of a joint in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @example
     * <caption>Make an avatar model turn its head left.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
        var index = Entities.getJointIndex(entityID, "Head");
        var rotation = Quat.fromPitchYawRollDegrees(0, 60, 0);
        var success = Entities.setLocalJointRotation(entityID, index, rotation);
        print("Success: " + success);
    }, 2000);
     * @param entityID - The ID of the entity.
     * @param jointIndex - The integer index of the joint.
     * @param rotation - The local rotation to set the joint to.
     * @returns <code>true</code> if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the joint index is valid, and the rotation is different to the joint's current rotation; otherwise
        <code>false</code>.
     */
    function setLocalJointRotation(entityID: Uuid, jointIndex: number, rotation: TQuat): boolean;
    /**
     * Sets the local translations of joints in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @param entityID - The ID of the entity.
     * @param translations - The local translations to set the joints to.
     * @returns <code>true</code>if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the model has joints, and at least one of the translations is different to the model's current
        translations; otherwise <code>false</code>.
     */
    function setLocalJointTranslations(entityID: Uuid, translations: TVec3[]): boolean;
    /**
     * Sets the local rotations of joints in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @example
     * <caption>Raise both palms of an avatar model.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
    
        // Get all the joint rotations.
        var jointNames = Entities.getJointNames(entityID);
        var jointRotations = [];
        for (var i = 0, length = jointNames.length; i < length; i++) {
            var index = Entities.getJointIndex(entityID, jointNames[i]);
            jointRotations.push(Entities.getLocalJointRotation(entityID, index));
        }
    
        // Raise both palms.
        var index = jointNames.indexOf("LeftHand");
        jointRotations[index] = Quat.multiply(Quat.fromPitchYawRollDegrees(-90, 0, 0), jointRotations[index]);
        index = jointNames.indexOf("RightHand");
        jointRotations[index] = Quat.multiply(Quat.fromPitchYawRollDegrees(-90, 0, 0), jointRotations[index]);
    
        // Update all the joint rotations.
        var success = Entities.setLocalJointRotations(entityID, jointRotations);
        print("Success: " + success);
    }, 2000);
     * @param entityID - The ID of the entity.
     * @param rotations - The local rotations to set the joints to.
     * @returns <code>true</code> if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the model has joints, and at least one of the rotations is different to the model's current rotations;
        otherwise <code>false</code>.
     */
    function setLocalJointRotations(entityID: Uuid, rotations: TQuat[]): boolean;
    /**
     * Sets the local rotations and translations of joints in a {@link Entities.EntityPropertiesModel|Model} entity. This is
    the same as calling both {@link Entities.setLocalJointRotations|setLocalJointRotations} and
    {@link Entities.setLocalJointTranslations|setLocalJointTranslations} at the same time.
     * @param entityID - The ID of the entity.
     * @param rotations - The local rotations to set the joints to.
     * @param translations - The local translations to set the joints to.
     * @returns <code>true</code> if the entity is a {@link Entities.EntityPropertiesModel|Model} entity, the entity
        is loaded, the model has joints, and at least one of the rotations or translations is different to the model's
        current values; otherwise <code>false</code>.
     */
    function setLocalJointsData(entityID: Uuid, rotations: TQuat[], translations: TVec3[]): boolean;
    /**
     * Gets the index of a named joint in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @example
     * <caption>Report the index of a model's head joint.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
        var index = Entities.getJointIndex(entityID, "Head");
        print("Head joint index: " + index);
    }, 2000);
     * @param entityID - The ID of the entity.
     * @param name - The name of the joint.
     * @returns The integer index of the joint if the entity is a {@link Entities.EntityPropertiesModel|Model}
        entity, the entity is loaded, and the joint is present; otherwise <code>-1</code>. The joint indexes are in order
        per {@link Entities.getJointNames|getJointNames}.
     */
    function getJointIndex(entityID: Uuid, name: string): number;
    /**
     * Gets the names of all the joints in a {@link Entities.EntityPropertiesModel|Model} entity.
     * @example
     * <caption>Report a model's joint names.</caption>
    entityID = Entities.addEntity({
        type: "Model",
        modelURL: "https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        rotation: MyAvatar.orientation,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        // Joint data aren't available until after the model has loaded.
        var jointNames = Entities.getJointNames(entityID);
        print("Joint names: " + JSON.stringify(jointNames));
    }, 2000);
     * @param entityID - The ID of the {@link Entities.EntityPropertiesModel|Model} entity.
     * @returns The names of all the joints in the entity if it is a {@link Entities.EntityPropertiesModel|Model}
        entity and is loaded, otherwise an empty array. The joint names are in order per
        {@link Entities.getJointIndex|getJointIndex}.
     */
    function getJointNames(entityID: Uuid): string[];
    /**
     * Gets the IDs of entities and avatars that are directly parented to an entity or avatar model. To get all descendants,
    you can recurse on the IDs returned.
     * @example
     * <caption>Report the children of an entity.</caption>
    function createEntity(description, position, parent) {
        var entity = Entities.addEntity({
            type: "Sphere",
            position: position,
            dimensions: Vec3.HALF,
            parentID: parent,
            lifetime: 300  // Delete after 5 minutes.
        });
        print(description + ": " + entity);
        return entity;
    }
    
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));
    var root = createEntity("Root", position, Uuid.NULL);
    var child = createEntity("Child", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);
    var grandChild = createEntity("Grandchild", Vec3.sum(position, { x: 0, y: -2, z: 0 }), child);
    
    var children = Entities.getChildrenIDs(root);
    print("Children of root: " + JSON.stringify(children));  // Only the child entity.
     * @param parentID - The ID of the entity or avatar to get the children IDs of.
     * @returns An array of entity and avatar IDs that are parented directly to the <code>parentID</code>
        entity or avatar. Does not include children's children, etc. The array is empty if no children can be found or
        <code>parentID</code> cannot be found.
     */
    function getChildrenIDs(parentID: Uuid): Uuid[];
    /**
     * Gets the IDs of entities and avatars that are directly parented to an entity or avatar model's joint. To get all
    descendants, you can use {@link Entities.getChildrenIDs|getChildrenIDs} to recurse on the IDs returned.
     * @example
     * <caption>Report the children of your avatar's right hand.</caption>
    function createEntity(description, position, parent) {
        var entity = Entities.addEntity({
            type: "Sphere",
            position: position,
            dimensions: Vec3.HALF,
            parentID: parent,
            lifetime: 300  // Delete after 5 minutes.
        });
        print(description + ": " + entity);
        return entity;
    }
    
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));
    var root = createEntity("Root", position, Uuid.NULL);
    var child = createEntity("Child", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);
    
    Script.setTimeout(function () { // Wait for the entity to be created before editing.
        Entities.editEntity(root, {
            parentID: MyAvatar.sessionUUID,
            parentJointIndex: MyAvatar.getJointIndex("RightHand")
        });
    
        var children = Entities.getChildrenIDsOfJoint(MyAvatar.sessionUUID, MyAvatar.getJointIndex("RightHand"));
        print("Children of hand: " + JSON.stringify(children));  // Only the root entity.
    }, 50);
     * @param parentID - The ID of the entity or avatar to get the children IDs of.
     * @param jointIndex - Integer number of the model joint to get the children IDs of.
     * @returns An array of entity and avatar IDs that are parented directly to the <code>parentID</code>
        entity or avatar at the <code>jointIndex</code> joint. Does not include children's children, etc. The
        array is empty if no children can be found or <code>parentID</code> cannot be found.
     */
    function getChildrenIDsOfJoint(parentID: Uuid, jointIndex: number): Uuid[];
    /**
     * Checks whether an entity has an entity as an ancestor (parent, parent's parent, etc.).
     * @example
     * <caption>Check that a grandchild entity is a child of its grandparent.</caption>
    function createEntity(description, position, parent) {
        var entity = Entities.addEntity({
            type: "Sphere",
            position: position,
            dimensions: Vec3.HALF,
            parentID: parent,
            lifetime: 300  // Delete after 5 minutes.
        });
        print(description + ": " + entity);
        return entity;
    }
    
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));
    var root = createEntity("Root", position, Uuid.NULL);
    var child = createEntity("Child", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);
    var grandChild = createEntity("Grandchild", Vec3.sum(position, { x: 0, y: -2, z: 0 }), child);
    
    print("grandChild has root as parent: " + Entities.isChildOfParent(grandChild, root));  // true
     * @param childID - The ID of the child entity to test for being a child, grandchild, etc.
     * @param parentID - The ID of the parent entity to test for being a parent, grandparent, etc.
     * @returns <code>true</code> if the <code>childID</code> entity has the <code>parentID</code> entity
        as a parent or grandparent etc., otherwise <code>false</code>.
     */
    function isChildOfParent(childID: Uuid, parentID: Uuid): boolean;
    /**
     * Gets the type &mdash; entity or avatar &mdash; of an in-world item.
     * @example
     * <caption>Report some nestable types.</caption>
    var entity = Entities.addEntity({
        type: "Sphere",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -2 })),
        lifetime: 300  // Delete after 5 minutes.
    });
    
    print(Entities.getNestableType(entity));  // "entity"
    print(Entities.getNestableType(Uuid.generate()));  // "unknown"
     * @param id - The ID of the item to get the type of.
     * @returns The type of the item.
     */
    function getNestableType(id: Uuid): Entities.NestableType;
    /**
     * Gets the ID of the {@link Entities.EntityPropertiesWeb|Web} entity that has keyboard focus.
     * @returns The ID of the {@link Entities.EntityPropertiesWeb|Web} entity that has focus, if any, otherwise <code>null</code>.
     */
    function getKeyboardFocusEntity(): Uuid;
    /**
     * Sets the {@link Entities.EntityPropertiesWeb|Web} entity that has keyboard focus.
     * @param id - The ID of the {@link Entities.EntityPropertiesWeb|Web} entity to set keyboard focus to. Use
        <code>null</code> or {@link Uuid(0)|Uuid.NULL} to unset keyboard focus from an entity.
     */
    function setKeyboardFocusEntity(id: Uuid): void;
    /**
     * Emits a {@link Entities.mousePressOnEntity|mousePressOnEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendMousePressOnEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.mouseMoveOnEntity|mouseMoveOnEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendMouseMoveOnEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.mouseReleaseOnEntity|mouseReleaseOnEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendMouseReleaseOnEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.clickDownOnEntity|clickDownOnEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendClickDownOnEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.holdingClickOnEntity|holdingClickOnEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendHoldingClickOnEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.clickReleaseOnEntity|clickReleaseOnEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendClickReleaseOnEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.hoverEnterEntity|hoverEnterEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendHoverEnterEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.hoverOverEntity|hoverOverEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendHoverOverEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Emits a {@link Entities.hoverLeaveEntity|hoverLeaveEntity} event.
     * @param entityID - The ID of the entity to emit the event for.
     * @param event - The event details.
     */
    function sendHoverLeaveEntity(entityID: Uuid, event: PointerEvent): void;
    /**
     * Checks whether an entity wants hand controller pointer events. For example, a {@link Entities.EntityPropertiesWeb|Web}
    entity does but a {@link Entities.EntityPropertiesShape|Shape} entity doesn't.
     * @param entityID - The ID of the entity.
     * @returns <code>true</code> if the entity can be found and it wants hand controller pointer events, otherwise
        <code>false</code>.
     */
    function wantsHandControllerPointerEvents(entityID: Uuid): boolean;
    /**
     * Sends a message to a {@link Entities.EntityPropertiesWeb|Web} entity's HTML page. To receive the message, the web
    page's script must connect to the <code>EventBridge</code> that is automatically provided to the script:
    <pre class="prettyprint"><code>EventBridge.scriptEventReceived.connect(function(message) {
        ...
    });</code></pre>
    <p>Use {@link Entities.webEventReceived} to receive messages from the Web entity's HTML page.</p>
    <p>Alternatively, you can use {@link Entities.getEntityObject} to exchange messages over a Web entity's HTML event
    bridge.</p>
     * @example
     * <caption>Exchange messages with a Web entity.</caption>
    // HTML file, name: "webEntity.html".
    <!DOCTYPE html>
    <html>
    <head>
        <title>HELLO</title>
    </head>
    <body>
        <h1>HELLO</h1>
        <script>
            function onScriptEventReceived(message) {
                // Message received from the script.
                console.log("Message received: " + message);
            }
    
            EventBridge.scriptEventReceived.connect(onScriptEventReceived);
    
            setTimeout(function () {
                // Send a message to the script.
                EventBridge.emitWebEvent("hello");
            }, 5000);
        </script>
    </body>
    </html>
    
    // Script file.
    var webEntity = Entities.addEntity({
        type: "Web",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -3 })),
        rotation: MyAvatar.orientation,
        sourceUrl: Script.resolvePath("webEntity.html"),
        alpha: 1.0,
        lifetime: 300  // 5 min
    });
    
    function onWebEventReceived(entityID, message) {
        if (entityID === webEntity) {
            // Message received.
            print("Message received: " + message);
    
            // Send a message back.
            Entities.emitScriptEvent(webEntity, message + " back");
        }
    }
    
    Entities.webEventReceived.connect(onWebEventReceived);
     * @param entityID - The ID of the Web entity to send the message to.
     * @param message - The message to send.
     */
    function emitScriptEvent(entityID: Uuid, message: string): void;
    /**
     * Checks whether an axis-aligned box and a capsule intersect.
     * @param brn - The bottom right near (minimum axes values) corner of the AA box.
     * @param dimensions - The dimensions of the AA box.
     * @param start - One end of the capsule.
     * @param end - The other end of the capsule.
     * @param radius - The radius of the capsule.
     * @returns <code>true</code> if the AA box and capsule intersect, otherwise <code>false</code>.
     */
    function AABoxIntersectsCapsule(brn: TVec3, dimensions: TVec3, start: TVec3, end: TVec3, radius: number): boolean;
    /**
     * Gets the meshes in a {@link Entities.EntityPropertiesModel|Model} or {@link Entities.EntityPropertiesPolyVox|PolyVox}
    entity.
     * @param entityID - The ID of the <code>Model</code> or <code>PolyVox</code> entity to get the meshes of.
     * @param callback - The function to call upon completion.
     */
    function getMeshes(entityID: Uuid, callback: Entities.getMeshesCallback): void;
    /**
     * Called when a {@link Entities.getMeshes} call is complete.
     * @param meshes - If <code>success</code> is <code>true</code>, a {@link MeshProxy} per mesh in the
        <code>Model</code> or <code>PolyVox</code> entity; otherwise <code>undefined</code>.
     * @param success - <code>true</code> if the {@link Entities.getMeshes} call was successful, <code>false</code>
        otherwise. The call may be unsuccessful if the requested entity could not be found.
     */
    type getMeshesCallback = (meshes: MeshProxy[], success: boolean) => void;
    /**
     * Gets the object to world transform, excluding scale, of an entity.
     * @example
     * <caption>Position and rotation in an entity's world transform.</caption>
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -2 }));
    var orientation = MyAvatar.orientation;
    print("Position: " + JSON.stringify(position));
    print("Orientation: " + JSON.stringify(orientation));
    
    var entityID = Entities.addEntity({
        type: "Sphere",
        position: position,
        rotation: orientation,
        dimensions: Vec3.HALF,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    var transform = Entities.getEntityTransform(entityID);
    print("Transform: " + JSON.stringify(transform));
    print("Translation: " + JSON.stringify(Mat4.extractTranslation(transform)));  // Same as position.
    print("Rotation: " + JSON.stringify(Mat4.extractRotation(transform)));  // Same as orientation.
    print("Scale: " + JSON.stringify(Mat4.extractScale(transform)));  // { x: 1, y: 1, z: 1 }
     * @param entityID - The ID of the entity.
     * @returns The entity's object to world transform excluding scale (i.e., translation and rotation, with scale of 1)
       if the entity can be found, otherwise a transform with zero translation and rotation and a scale of 1.
     */
    function getEntityTransform(entityID: Uuid): TMat4;
    /**
     * Gets the object to parent transform, excluding scale, of an entity.
     * @example
     * <caption>Position and rotation in an entity's local transform.</caption>
    function createEntity(position, rotation, parent) {
        var entity = Entities.addEntity({
            type: "Box",
            position: position,
            rotation: rotation,
            dimensions: Vec3.HALF,
            parentID: parent,
            lifetime: 300  // Delete after 5 minutes.
        });
        return entity;
    }
    
    var position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));
    
    var parent = createEntity(position, MyAvatar.orientation, Uuid.NULL);
    
    var childTranslation = { x: 0, y: -1.5, z: 0 };
    var childRotation = Quat.fromPitchYawRollDegrees(0, 45, 0);
    var child = createEntity(Vec3.sum(position, childTranslation), Quat.multiply(childRotation, MyAvatar.orientation), parent);
    
    var transform = Entities.getEntityLocalTransform(child);
    print("Transform: " + JSON.stringify(transform));
    print("Translation: " + JSON.stringify(Mat4.extractTranslation(transform)));  // childTranslation
    print("Rotation: " + JSON.stringify(Quat.safeEulerAngles(Mat4.extractRotation(transform))));  // childRotation
    print("Scale: " + JSON.stringify(Mat4.extractScale(transform)));  // { x: 1, y: 1, z: 1 }
     * @param entityID - The ID of the entity.
     * @returns The entity's object to parent transform excluding scale (i.e., translation and rotation, with scale of
        1) if the entity can be found, otherwise a transform with zero translation and rotation and a scale of 1. If the
        entity doesn't have a parent, its world transform is returned.
     */
    function getEntityLocalTransform(entityID: Uuid): TMat4;
    /**
     * Converts a position in world coordinates to a position in an avatar, entity, or joint's local coordinates.
     * @example
     * <caption>Report the local coordinates of an entity parented to another.</caption>
    var parentPosition = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 }));
    var childPosition = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -5 }));
    
    var parentEntity = Entities.addEntity({
        type: "Box",
        position: parentPosition,
        rotation: MyAvatar.orientation,
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        lifetime: 300  // Delete after 5 minutes.
    });
    var childEntity = Entities.addEntity({
        type: "Sphere",
        position: childPosition,
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        parentID: parentEntity,
        lifetime: 300  // Delete after 5 minutes.
    });
    
    var localPosition = Entities.worldToLocalPosition(childPosition, parentEntity);
    print("Local position: " + JSON.stringify(localPosition));  // 0, 1, 0.
    localPosition = Entities.getEntityProperties(childEntity, "localPosition").localPosition;
    print("Local position: " + JSON.stringify(localPosition));  // The same.
     * @param worldPosition - The world position to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <code>true</code> to scale the local position per the parent's scale,
        <code>false</code> for the local position to be at world scale.
     * @returns The position converted to local coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function worldToLocalPosition(worldPosition: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Converts a rotation or orientation in world coordinates to rotation in an avatar, entity, or joint's local coordinates.
     * @param worldRotation - The world rotation to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <em>Not used in the calculation.</em>
     * @returns The rotation converted to local coordinates if successful, otherwise {@link TQuat(0)|Quat.IDENTITY}.
     */
    function worldToLocalRotation(worldRotation: TQuat, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TQuat;
    /**
     * Converts a velocity in world coordinates to a velocity in an avatar, entity, or joint's local coordinates.
     * @param worldVelocity - The world velocity to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <code>true</code> to scale the local velocity per the parent's scale,
        <code>false</code> for the local velocity to be at world scale.
     * @returns The velocity converted to local coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function worldToLocalVelocity(worldVelocity: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Converts a Euler angular velocity in world coordinates to an angular velocity in an avatar, entity, or joint's local
    coordinates.
     * @param worldAngularVelocity - The world Euler angular velocity to convert. (Can be in any unit, e.g., deg/s or
        rad/s.)
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <em>Not used in the calculation.</em>
     * @returns The angular velocity converted to local coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function worldToLocalAngularVelocity(worldAngularVelocity: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Converts dimensions in world coordinates to dimensions in an avatar or entity's local coordinates.
     * @param worldDimensions - The world dimensions to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - <em>Not used in the calculation.</em>
     * @param [scalesWithParent = false] - <code>true</code> to scale the local dimensions per the parent's scale,
        <code>false</code> for the local dimensions to be at world scale.
     * @returns The dimensions converted to local coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function worldToLocalDimensions(worldDimensions: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Converts a position in an avatar, entity, or joint's local coordinate to a position in world coordinates.
     * @param localPosition - The local position to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithparent = false] - <code>true</code> if the local dimensions are scaled per the parent's scale,
        <code>false</code> if the local dimensions are at world scale.
     * @returns The position converted to world coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function localToWorldPosition(localPosition: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithparent?: boolean): TVec3;
    /**
     * Converts a rotation or orientation in an avatar, entity, or joint's local coordinate to a rotation in world coordinates.
     * @param localRotation - The local rotation to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <em>Not used in the calculation.</em>
     * @returns The rotation converted to local coordinates if successful, otherwise {@link TQuat(0)|Quat.IDENTITY}.
     */
    function localToWorldRotation(localRotation: TQuat, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TQuat;
    /**
     * Converts a velocity in an avatar, entity, or joint's local coordinate to a velocity in world coordinates.
     * @param localVelocity - The local velocity to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <code>true</code> if the local velocity is scaled per the parent's scale,
        <code>false</code> if the local velocity is at world scale.
     * @returns The velocity converted to world coordinates it successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function localToWorldVelocity(localVelocity: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Converts a Euler angular velocity in an avatar, entity, or joint's local coordinate to an angular velocity in world
    coordinates.
     * @param localAngularVelocity - The local Euler angular velocity to convert. (Can be in any unit, e.g., deg/s or
    rad/s.)
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - The joint in the avatar or entity that the local coordinates are based on. If
        <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.
     * @param [scalesWithParent = false] - <em>Not used in the calculation.</em>
     * @returns The angular velocity converted to world coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function localToWorldAngularVelocity(localAngularVelocity: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Converts dimensions in an avatar or entity's local coordinates to dimensions in world coordinates.
     * @param localDimensions - The local dimensions to convert.
     * @param parentID - The avatar or entity that the local coordinates are based on.
     * @param [parentJointIndex = -1] - <em>Not used in the calculation.</em>
     * @param [scalesWithParent = false] - <code>true</code> if the local dimensions are scaled per the parent's
        scale, <code>false</code> if the local dimensions are at world scale.
     * @returns The dimensions converted to world coordinates if successful, otherwise {@link TVec3(0)|Vec3.ZERO}.
     */
    function localToWorldDimensions(localDimensions: TVec3, parentID: Uuid, parentJointIndex?: number, scalesWithParent?: boolean): TVec3;
    /**
     * Gets information about an entity property, including a minimum to maximum range for some numerical properties.
     * @example
     * <caption>Report property information for some properties.</caption>
    print("alpha: " + JSON.stringify(Entities.getPropertyInfo("alpha")));
    print("script: " + JSON.stringify(Entities.getPropertyInfo("script")));
     * @param propertyName - The name of the property to get the information for.
     * @returns The information about the property if it can be found, otherwise an empty object.
     */
    function getPropertyInfo(propertyName: string): Entities.EntityPropertyInfo;
    /**
     * Triggered when a mouse button is clicked while the mouse cursor is on
     * an entity, or a controller trigger is fully pressed while its laser
     * is on an entity.
     *
     * See also, Entity Methods and Script.addEventHandler.
     * @param entityID - The ID of the entity that was pressed on.
     * @param event - Details of the event.
     */
    const mousePressOnEntity: Signal<[entityID: Uuid, event: PointerEvent]>;

    /**
     * Triggered when a script in a Web entity's HTML sends an event over
     * the entity's HTML event bridge. The HTML web page can send a message
     * by calling: EventBridge.emitWebEvent(message);
     *
     * Use Entities.emitScriptEvent to send messages to the Web entity's
     * HTML page. Alternatively, you can use Entities.getEntityObject
     * to exchange messages over a Web entity's HTML event bridge.
     *
     * See also, Entity Methods and Script.addEventHandler.
     * @param entityID - The ID of the Web entity that the message was received from.
     * @param message - The message received.
     */
    const webEventReceived: Signal<[entityID: Uuid, message: string]>;

    /**
     * <p>An entity may be one of the following types:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th><th>Properties</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"Shape"</code></td><td>A basic entity such as a cube.
          See also, the <code>"Box"</code> and <code>"Sphere"</code> entity types.</td>
          <td>{@link Entities.EntityPropertiesShape|EntityPropertiesShape}</td></tr>
        <tr><td><code>"Box"</code></td><td>A rectangular prism. This is a synonym of <code>"Shape"</code> for the case
          where the entity's <code>shape</code> property value is <code>"Cube"</code>.
          <p>If an entity is created with its <code>type</code>
          set to <code>"Box"</code> it will always be created with a <code>shape</code> property value of
          <code>"Cube"</code>. If an entity of type <code>Shape</code> or <code>Sphere</code> has its <code>shape</code> set
          to <code>"Cube"</code> then its <code>type</code> will be reported as <code>"Box"</code>.</p></td>
          <td>{@link Entities.EntityPropertiesBox|EntityPropertiesBox}</td></tr>
        <tr><td><code>"Sphere"</code></td><td>A sphere. This is a synonym of <code>"Shape"</code> for the case
          where the entity's <code>shape</code> property value is <code>"Sphere"</code>.
          <p>If an entity is created with its <code>type</code>
          set to <code>"Sphere"</code> it will always be created with a <code>shape</code> property value of
          <code>"Sphere"</code>. If an entity of type <code>Box</code> or <code>Shape</code> has its <code>shape</code> set
          to <code>"Sphere"</code> then its <code>type</code> will be reported as <code>"Sphere"</code>.</td>
          <td>{@link Entities.EntityPropertiesSphere|EntityPropertiesSphere}</td></tr>
        <tr><td><code>"Model"</code></td><td>A mesh model from a glTF, FBX, or OBJ file.</td>
          <td>{@link Entities.EntityPropertiesModel|EntityPropertiesModel}</td></tr>
        <tr><td><code>"Text"</code></td><td>A pane of text oriented in space.</td>
          <td>{@link Entities.EntityPropertiesText|EntityPropertiesText}</td></tr>
        <tr><td><code>"Image"</code></td><td>An image oriented in space.</td>
          <td>{@link Entities.EntityPropertiesImage|EntityPropertiesImage}</td></tr>
        <tr><td><code>"Web"</code></td><td>A browsable web page.</td>
          <td>{@link Entities.EntityPropertiesWeb|EntityPropertiesWeb}</td></tr>
        <tr><td><code>"ParticleEffect"</code></td><td>A particle system that can be used to simulate things such as fire,
          smoke, snow, magic spells, etc.</td>
          <td>{@link Entities.EntityPropertiesParticleEffect|EntityPropertiesParticleEffect}</td></tr>
        <tr><td><code>"Line"</code></td><td>A sequence of one or more simple straight lines.</td>
          <td>{@link Entities.EntityPropertiesLine|EntityPropertiesLine}</td></tr>
        <tr><td><code>"PolyLine"</code></td><td>A sequence of one or more textured straight lines.</td>
          <td>{@link Entities.EntityPropertiesPolyLine|EntityPropertiesPolyLine}</td></tr>
        <tr><td><code>"PolyVox"</code></td><td>A set of textured voxels.</td>
          <td>{@link Entities.EntityPropertiesPolyVox|EntityPropertiesPolyVox}</td></tr>
        <tr><td><code>"Grid"</code></td><td>A grid of lines in a plane.</td>
          <td>{@link Entities.EntityPropertiesGrid|EntityPropertiesGrid}</td></tr>
        <tr><td><code>"Gizmo"</code></td><td>A gizmo intended for UI.</td>
          <td>{@link Entities.EntityPropertiesGizmo|EntityPropertiesGizmo}</td></tr>
        <tr><td><code>"Light"</code></td><td>A local lighting effect.</td>
          <td>{@link Entities.EntityPropertiesLight|EntityPropertiesLight}</td></tr>
        <tr><td><code>"Zone"</code></td><td>A volume of lighting effects and avatar permissions.</td>
          <td>{@link Entities.EntityPropertiesZone|EntityPropertiesZone}</td></tr>
        <tr><td><code>"Material"</code></td><td>Modifies the existing materials on entities and avatars.</td>
          <td>{@link Entities.EntityPropertiesMaterial|EntityPropertiesMaterial}</td></tr>
      </tbody>
    </table>
     */
    type EntityType = string;
    /**
     * Grabbing behavior is defined by the following properties:
     */
    type Grab = {
        /**
         * <code>true</code> if the entity can be grabbed, <code>false</code> if it can't be.
         * @defaultValue true
         */
        grabbable: boolean;
        /**
         * <code>true</code> if the entity will be updated in a kinematic manner when
         * grabbed; <code>false</code> if it will be grabbed using a tractor action. A kinematic grab will make the item appear
         * more tightly held but will cause it to behave poorly when interacting with dynamic entities.
         * @defaultValue true
         */
        grabKinematic: boolean;
        /**
         * <code>true</code> if the entity will follow the motions of the hand
         * controller even if the avatar's hand can't get to the implied position, <code>false</code> if it will follow the motions
         * of the avatar's hand. This should be set <code>true</code> for tools, pens, etc. and <code>false</code> for things meant
         * to decorate the hand.
         * @defaultValue true
         */
        grabFollowsController: boolean;
        /**
         * <code>true</code> if the entity will receive calls to trigger
         * {@link Controller|Controller entity methods}, <code>false</code> if it won't.
         */
        triggerable: boolean;
        /**
         * <code>true</code> if when the entity is grabbed, the grab will be
         * transferred to its parent entity if there is one; <code>false</code> if the grab won't be transferred, so a child entity
         * can be grabbed and moved relative to its parent.
         * @defaultValue true
         */
        grabDelegateToParent: boolean;
        /**
         * <code>true</code> if the entity can be equipped, <code>false</code> if it cannot.
         * @defaultValue true
         */
        equippable: boolean;
        /**
         * Positional offset from the left hand, when equipped.
         * @defaultValue 0,0,0
         */
        equippableLeftPosition: TVec3;
        /**
         * Rotational offset from the left hand, when equipped.
         * @defaultValue 0,0,0,1
         */
        equippableLeftRotation: TQuat;
        /**
         * Positional offset from the right hand, when equipped.
         * @defaultValue 0,0,0
         */
        equippableRightPosition: TVec3;
        /**
         * Rotational offset from the right hand, when equipped.
         * @defaultValue 0,0,0,1
         */
        equippableRightRotation: TQuat;
        /**
         * If non-empty, this model will be used to indicate that an
         * entity is equippable, rather than the default.
         * @defaultValue ""
         */
        equippableIndicatorURL: string;
        /**
         * If <code>equippableIndicatorURL</code> is non-empty, this controls the
         * scale of the displayed indicator.
         * @defaultValue 1,1,1
         */
        equippableIndicatorScale: TVec3;
        /**
         * If <code>equippableIndicatorURL</code> is non-empty, this controls the
         * relative offset of the displayed object from the equippable entity.
         * @defaultValue 0,0,0
         */
        equippableIndicatorOffset: TVec3;
    };
    /**
     * Haze is defined by the following properties:
     */
    type Haze = {
        /**
         * The horizontal distance at which visibility is reduced to 95%; i.e., 95% of each pixel's
         * color is haze.
         * @defaultValue 1000
         */
        hazeRange: number;
        /**
         * The color of the haze when looking away from the key light.
         * @defaultValue 128,154,179
         */
        hazeColor: Color;
        /**
         * <code>true</code> if the haze is colored with glare from the key light,
         * <code>false</code> if it isn't. If <code>true</code>, then <code>hazeGlareColor</code> and <code>hazeGlareAngle</code>
         * are used.
         */
        hazeEnableGlare: boolean;
        /**
         * The color of the haze when looking towards the key light.
         * @defaultValue 255,299,179
         */
        hazeGlareColor: Color;
        /**
         * The angle in degrees across the circle around the key light that the glare color and
         * haze color are blended 50/50.
         * @defaultValue 20
         */
        hazeGlareAngle: number;
        /**
         * <code>true</code> if haze decreases with altitude as defined by the
         * entity's local coordinate system, <code>false</code> if it doesn't. If <code>true</code>, then <code>hazeBaseRef</code>
         * and <code>hazeCeiling</code> are used.
         */
        hazeAltitudeEffect: boolean;
        /**
         * The y-axis value in the entity's local coordinate system at which the haze density starts
         * reducing with altitude.
         */
        hazeBaseRef: number;
        /**
         * The y-axis value in the entity's local coordinate system at which the haze density has
         * reduced to 5%.
         * @defaultValue 200
         */
        hazeCeiling: number;
        /**
         * The proportion of the skybox image to show through the haze: <code>0.0</code>
         * displays no skybox image; <code>1.0</code> displays no haze.
         */
        hazeBackgroundBlend: number;
        /**
         * <code>true</code> if the haze attenuates the key light, <code>false</code>
         * if it doesn't. If <code>true</code>, then <code>hazeKeyLightRange</code> and <code>hazeKeyLightAltitude</code> are used.
         */
        hazeAttenuateKeyLight: boolean;
        /**
         * The distance at which the haze attenuates the key light by 95%.
         * @defaultValue 1000
         */
        hazeKeyLightRange: number;
        /**
         * The altitude at which the haze starts attenuating the key light (i.e., the
         * altitude at which the distance starts being calculated).
         * @defaultValue 200
         */
        hazeKeyLightAltitude: number;
    };
    /**
     * A key light is defined by the following properties:
     */
    type KeyLight = {
        /**
         * The color of the light.
         * @defaultValue 255,255,255
         */
        color: Color;
        /**
         * The intensity of the light.
         * @defaultValue 1
         */
        intensity: number;
        /**
         * The direction the light is shining.
         * @defaultValue 0,-1,0
         */
        direction: TVec3;
        /**
         * <code>true</code> if shadows are cast, <code>false</code> if they aren't. Shadows
         * are cast by avatars, plus {@link Entities.EntityPropertiesModel|Model} and
         * {@link Entities.EntityPropertiesShape|Shape} entities that have their
         * <code>{@link Entities.EntityProperties|canCastShadow}</code> property set to <code>true</code>.
         */
        castShadows: boolean;
        /**
         * The bias of the shadows cast by the light, range <code>0.0</code> &ndash;
         * <code>1.0</code>. This fine-tunes shadows cast by the light, to prevent shadow acne and peter panning.
         * @defaultValue 0.5
         */
        shadowBias: number;
        /**
         * The maximum distance from the camera position at which shadows will be computed,
         * range <code>1.0</code> &ndash; <code>250.0</code>. Higher values cover more of the scene but with less precision.
         * @defaultValue 40.0
         */
        shadowMaxDistance: number;
    };
    /**
     * <p>The surface of a {@link Entities.EntityPropertiesPolyVox|PolyVox} entity may be one of the following styles:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Type</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>Marching cubes.</td><td>Chamfered edges. Open volume.
          Joins neighboring PolyVox entities reasonably well.</td></tr>
        <tr><td><code>1</code></td><td>Cubic.</td><td>Square edges. Open volume.
          Joins neighboring PolyVox entities cleanly.</td></tr>
        <tr><td><code>2</code></td><td>Edged cubic.</td><td>Square edges. Enclosed volume.
          Joins neighboring PolyVox entities cleanly.</td></tr>
        <tr><td><code>3</code></td><td>Edged marching cubes.</td><td>Chamfered edges. Enclosed volume.
          Doesn't join neighboring PolyVox entities.</td></tr>
      </tbody>
    </table>
     */
    type PolyVoxSurfaceStyle = number;
    /**
     * A color and alpha pulse that an entity may have.
     */
    type Pulse = {
        /**
         * The minimum value of the pulse multiplier.
         */
        min: number;
        /**
         * The maximum value of the pulse multiplier.
         * @defaultValue 1
         */
        max: number;
        /**
         * The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from
         * <code>min</code> to <code>max</code>, then <code>max</code> to <code>min</code> in one period.
         * @defaultValue 1
         */
        period: number;
        /**
         * If "in", the color is pulsed in phase with the pulse period; if "out"
         * the color is pulsed out of phase with the pulse period.
         * @defaultValue "none"
         */
        colorMode: Entities.PulseMode;
        /**
         * If "in", the alpha is pulsed in phase with the pulse period; if "out"
         * the alpha is pulsed out of phase with the pulse period.
         * @defaultValue "none"
         */
        alphaMode: Entities.PulseMode;
    };
    /**
     * A {@link Entities.EntityPropertiesGizmo|ring Gizmo} entity is defined by the following properties:
     */
    type RingGizmo = {
        /**
         * The angle at which the ring starts, in degrees.
         */
        startAngle: number;
        /**
         * The angle at which the ring ends, in degrees.
         * @defaultValue 360
         */
        endAngle: number;
        /**
         * The inner radius of the ring as a fraction of the total radius, range <code>0.0</code>
         * &mdash; <code>1.0</code>.
         */
        innerRadius: number;
        /**
         * The color at the inner start point of the ring.
         * @defaultValue 255,255,255
         */
        innerStartColor: Color;
        /**
         * The color at the inner end point of the ring.
         * @defaultValue 255,255,255
         */
        innerEndColor: Color;
        /**
         * The color at the outer start point of the ring.
         * @defaultValue 255,255,255
         */
        outerStartColor: Color;
        /**
         * The color at the outer end point of the ring.
         * @defaultValue 255,255,255
         */
        outerEndColor: Color;
        /**
         * The opacity at the inner start point of the ring.
         * @defaultValue 1
         */
        innerStartAlpha: number;
        /**
         * The opacity at the inner end point of the ring.
         * @defaultValue 1
         */
        innerEndAlpha: number;
        /**
         * The opacity at the outer start point of the ring.
         * @defaultValue 1
         */
        outerStartAlpha: number;
        /**
         * The opacity at the outer end point of the ring.
         * @defaultValue 1
         */
        outerEndAlpha: number;
        /**
         * <code>true</code> to render tick marks, otherwise <code>false</code>.
         */
        hasTickMarks: boolean;
        /**
         * The angle between major tick marks, in degrees.
         */
        majorTickMarksAngle: number;
        /**
         * The angle between minor tick marks, in degrees.
         */
        minorTickMarksAngle: number;
        /**
         * The length of the major tick marks as a fraction of the radius. A positive value
         * draws tick marks outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.
         */
        majorTickMarksLength: number;
        /**
         * The length of the minor tick marks, as a fraction of the radius. A positive
         * value draws tick marks outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.
         */
        minorTickMarksLength: number;
        /**
         * The color of the major tick marks.
         * @defaultValue 255,255,255
         */
        majorTickMarksColor: Color;
        /**
         * The color of the minor tick marks.
         * @defaultValue 255,255,255
         */
        minorTickMarksColor: Color;
    };
    /**
     * <p>A <code>"Shape"</code>, <code>"Box"</code>, or <code>"Sphere"</code> {@link Entities.EntityType|EntityType} may
    display as one of the following geometrical shapes:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Dimensions</th><th>Notes</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"Circle"</code></td><td>2D</td><td>A circle oriented in 3D.</td></tr>
        <tr><td><code>"Cone"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Cube"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Cylinder"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Dodecahedron"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Hexagon"</code></td><td>3D</td><td>A hexagonal prism.</td></tr>
        <tr><td><code>"Icosahedron"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Octagon"</code></td><td>3D</td><td>An octagonal prism.</td></tr>
        <tr><td><code>"Octahedron"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Quad"</code></td><td>2D</td><td>A square oriented in 3D.</td></tr>
        <tr><td><code>"Sphere"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Tetrahedron"</code></td><td>3D</td><td></td></tr>
        <tr><td><code>"Torus"</code></td><td>3D</td><td><em>Not implemented.</em></td></tr>
        <tr><td><code>"Triangle"</code></td><td>3D</td><td>A triangular prism.</td></tr>
      </tbody>
    </table>
     */
    type Shape = string;
    /**
     * A skybox is defined by the following properties:
     */
    type Skybox = {
        /**
         * Sets the color of the sky if <code>url</code> is <code>""</code>, otherwise modifies the
         * color of the cube map image.
         * @defaultValue 0,0,0
         */
        color: Color;
        /**
         * A cube map image that is used to render the sky.
         * @defaultValue ""
         */
        url: string;
    };
    /**
     * Sets the maximum number of entity packets that the client can send per second.
     * @param packetsPerSecond - Integer maximum number of entity packets that the client can send per second.
     */
    function setPacketsPerSecond(packetsPerSecond: number): void;
    /**
     * Gets the maximum number of entity packets that the client can send per second.
     * @returns Integer maximum number of entity packets that the client can send per second.
     */
    function getPacketsPerSecond(): number;
    /**
     * Checks whether servers exist for the client to send entity packets to, i.e., whether you are connected to a domain and
    its entity server is working.
     * @returns <code>true</code> if servers exist for the client to send entity packets to, otherwise
        <code>false</code>.
     */
    function serversExist(): boolean;
    /**
     * Checks whether the client has entity packets waiting to be sent.
     * @returns <code>true</code> if the client has entity packets waiting to be sent, otherwise <code>false</code>.
     */
    function hasPacketsToSend(): boolean;
    /**
     * Gets the number of entity packets the client has waiting to be sent.
     * @returns Integer number of entity packets the client has waiting to be sent.
     */
    function packetsToSendCount(): number;
    /**
     * Gets the entity packets per second send rate of the client over its lifetime.
     * @returns Entity packets per second send rate of the client over its lifetime.
     */
    function getLifetimePPS(): number;
    /**
     * Gets the entity bytes per second send rate of the client over its lifetime.
     * @returns Entity bytes per second send rate of the client over its lifetime.
     */
    function getLifetimeBPS(): number;
    /**
     * Gets the entity packets per second queued rate of the client over its lifetime.
     * @returns Entity packets per second queued rate of the client over its lifetime.
     */
    function getLifetimePPSQueued(): number;
    /**
     * Gets the entity bytes per second queued rate of the client over its lifetime.
     * @returns Entity bytes per second queued rate of the client over its lifetime.
     */
    function getLifetimeBPSQueued(): number;
    /**
     * Gets the lifetime of the client from the first entity packet sent until now, in microseconds.
     * @returns Lifetime of the client from the first entity packet sent until now, in microseconds.
     */
    function getLifetimeInUsecs(): number;
    /**
     * Gets the lifetime of the client from the first entity packet sent until now, in seconds.
     * @returns Lifetime of the client from the first entity packet sent until now, in seconds.
     */
    function getLifetimeInSeconds(): number;
    /**
     * Gets the total number of entity packets sent by the client over its lifetime.
     * @returns The total number of entity packets sent by the client over its lifetime.
     */
    function getLifetimePacketsSent(): number;
    /**
     * Gets the total bytes of entity packets sent by the client over its lifetime.
     * @returns The total bytes of entity packets sent by the client over its lifetime.
     */
    function getLifetimeBytesSent(): number;
    /**
     * Gets the total number of entity packets queued by the client over its lifetime.
     * @returns The total number of entity packets queued by the client over its lifetime.
     */
    function getLifetimePacketsQueued(): number;
    /**
     * Gets the total bytes of entity packets queued by the client over its lifetime.
     * @returns The total bytes of entity packets queued by the client over its lifetime.
     */
    function getLifetimeBytesQueued(): number;
    /**
     * The <code>"offset"</code> {@link Entities.ActionType|ActionType} moves an entity so that it is a defined distance away from
    a target point.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsOffset = {
        /**
         * The target point to offset the entity from.
         * @defaultValue 0,0,0
         */
        pointToOffsetFrom: TVec3;
        /**
         * The distance away from the target point to position the entity.
         */
        linearDistance: number;
        /**
         * Controls how long it takes for the entity's position to catch up with the
         * target offset. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action
         * is applied using an exponential decay.
         * @defaultValue 34e+38
         */
        linearTimeScale: number;
    };
    /**
     * The <code>"tractor"</code> {@link Entities.ActionType|ActionType} moves and rotates an entity to a target position and
    orientation, optionally relative to another entity.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsTractor = {
        /**
         * If an entity ID, the <code>targetPosition</code> and <code>targetRotation</code> are
         * relative to the entity's position and rotation.
         */
        otherID: Uuid;
        /**
         * If a joint index in the <code>otherID</code> entity, the <code>targetPosition</code>
         * and <code>targetRotation</code> are relative to the entity joint's position and rotation.
         */
        otherJointIndex: Uuid;
        /**
         * The target position.
         * @defaultValue 0,0,0
         */
        targetPosition: TVec3;
        /**
         * The target rotation.
         * @defaultValue 0,0,0,1
         */
        targetRotation: TQuat;
        /**
         * Controls how long it takes for the entity's position to catch up with the
         * target position. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action
         * is applied using an exponential decay.
         * @defaultValue 3.4e+38
         */
        linearTimeScale: number;
        /**
         * Controls how long it takes for the entity's orientation to catch up with the
         * target orientation. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the
         * action is applied using an exponential decay.
         * @defaultValue 3.4e+38
         */
        angularTimeScale: number;
    };
    /**
     * The <code>"travel-oriented"</code> {@link Entities.ActionType|ActionType} orients an entity to align with its direction of
    travel.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsTravelOriented = {
        /**
         * The axis of the entity to align with the entity's direction of travel.
         * @defaultValue 0,0,0
         */
        forward: TVec3;
        /**
         * Controls how long it takes for the entity's orientation to catch up with the
         * direction of travel. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the
         * action is applied using an exponential decay.
         * @defaultValue 0.1
         */
        angularTimeScale: number;
    };
    /**
     * The <code>"ball-socket"</code> {@link Entities.ActionType|ActionType} connects two entities with a ball and socket joint.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsBallSocket = {
        /**
         * The ID of the other entity that is connected to the joint.
         */
        otherEntityID: Uuid;
        /**
         * The local offset of the joint relative to the entity's position.
         * @defaultValue 0,0,0
         */
        pivot: TVec3;
        /**
         * The local offset of the joint relative to the other entity's position.
         * @defaultValue 0,0,0
         */
        otherPivot: TVec3;
    };
    /**
     * The <code>"cone-twist"</code> {@link Entities.ActionType|ActionType} connects two entities with a joint that can move
    through a cone and can twist.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsConeTwist = {
        /**
         * The ID of the other entity that is connected to the joint.
         */
        otherEntityID: Uuid;
        /**
         * The local offset of the joint relative to the entity's position.
         * @defaultValue 0,0,0
         */
        pivot: TVec3;
        /**
         * The axis of the entity that moves through the cone. Must be a non-zero vector.
         * @defaultValue 1,0,0
         */
        axis: TVec3;
        /**
         * The local offset of the joint relative to the other entity's position.
         * @defaultValue 0,0,0
         */
        otherPivot: TVec3;
        /**
         * The axis of the other entity that moves through the cone. Must be a non-zero vector.
         * @defaultValue 1,0,0
         */
        otherAxis: TVec3;
        /**
         * The angle through which the joint can move in one axis of the cone, in radians.
         * @defaultValue 2*Math.PI
         */
        swingSpan1: number;
        /**
         * The angle through which the joint can move in the other axis of the cone, in
         * radians.
         * @defaultValue 2*Math.PI
         */
        swingSpan2: number;
        /**
         * The angle through with the joint can twist, in radians.
         * @defaultValue 2*Math.PI
         */
        twistSpan: number;
    };
    /**
     * The <code>"hinge"</code> {@link Entities.ActionType|ActionType} lets an entity pivot about an axis or connects two entities
    with a hinge joint.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsHinge = {
        /**
         * The ID of the other entity that is connected to the joint, if any. If none is
         * specified then the first entity simply pivots about its specified <code>axis</code>.
         */
        otherEntityID: Uuid;
        /**
         * The local offset of the joint relative to the entity's position.
         * @defaultValue 0,0,0
         */
        pivot: TVec3;
        /**
         * The axis of the entity that it pivots about. Must be a non-zero vector.
         * @defaultValue 1,0,0
         */
        axis: TVec3;
        /**
         * The local offset of the joint relative to the other entity's position.
         * @defaultValue 0,0,0
         */
        otherPivot: TVec3;
        /**
         * The axis of the other entity that it pivots about. Must be a non-zero vector.
         * @defaultValue 1,0,0
         */
        otherAxis: TVec3;
        /**
         * The most negative angle that the hinge can take, in radians.
         * @defaultValue -2*Math.PI
         */
        low: number;
        /**
         * The most positive angle that the hinge can take, in radians.
         * @defaultValue 2*Math.PI
         */
        high: number;
        /**
         * The current angle of the hinge, in radians, range <code>-Math.PI</code> &ndash;
         * <code>Math.PI</code>. <em>Read-only.</em>
         */
        angle: number;
    };
    /**
     * The <code>"slider"</code> {@link Entities.ActionType|ActionType} lets an entity slide and rotate along an axis, or connects
    two entities that slide and rotate along a shared axis.
    It has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:
     */
    type ActionArgumentsSlider = {
        /**
         * The ID of the other entity that is connected to the joint, if any. If none is
         * specified then the first entity simply slides and rotates about its specified <code>axis</code>.
         */
        otherEntityID: Uuid;
        /**
         * The local position of a point in the entity that slides along the axis.
         * @defaultValue 0,0,0
         */
        point: TVec3;
        /**
         * The axis of the entity that slides along the joint. Must be a non-zero vector.
         * @defaultValue 1,0,0
         */
        axis: TVec3;
        /**
         * The local position of a point in the other entity that slides along the axis.
         * @defaultValue 0,0,0
         */
        otherPoint: TVec3;
        /**
         * The axis of the other entity that slides along the joint. Must be a non-zero vector.
         * @defaultValue 1,0,0
         */
        otherAxis: TVec3;
        /**
         * The most negative linear offset from the entity's initial point that the entity can
         * have along the slider.
         * @defaultValue 1.17e-38
         */
        linearLow: number;
        /**
         * The most positive linear offset from the entity's initial point that the entity can
         * have along the slider.
         * @defaultValue 3.40e+38
         */
        linearHigh: number;
        /**
         * The most negative angle that the entity can rotate about the axis if the action
         * involves only one entity, otherwise the most negative angle the rotation can be between the two entities. In radians.
         * @defaultValue -2*Math.PI
         */
        angularLow: number;
        /**
         * The most positive angle that the entity can rotate about the axis if the action
         * involves only one entity, otherwise the most positive angle the rotation can be between the two entities. In radians.
         * @defaultValue Math.PI
         */
        angularHigh: number;
        /**
         * The current linear offset the entity is from its initial point if the action involves
         * only one entity, otherwise the linear offset between the two entities' action points. <em>Read-only.</em>
         */
        linearPosition: number;
        /**
         * The current angular offset of the entity from its initial rotation if the action
         * involves only one entity, otherwise the angular offset between the two entities. In radians. <em>Read-only.</em>
         */
        angularPosition: number;
    };
    /**
     * Different entity action types have different arguments: some common to all actions (listed in the table) and some specific
    to each {@link Entities.ActionType|ActionType} (linked to below).
     */
    type ActionArguments = {
        /**
         * The type of action.
         */
        type: Entities.ActionType;
        /**
         * A string that a script can use for its own purposes.
         * @defaultValue ""
         */
        tag: string;
        /**
         * How long the action should exist, in seconds, before it is automatically deleted. A value of
         * <code>0</code> means that the action should not be deleted.
         */
        ttl: number;
        /**
         * <code>true</code> if the action was created during the current client session,
         * <code>false</code> if it wasn't. <em>Read-only.</em>
         * @defaultValue true
         */
        isMine: boolean;
        /**
         * Is present with a value of <code>true</code> when the entity hasn't been registered
         * with the physics engine yet (e.g., if the action hasn't been properly configured), otherwise the property is
         * <code>undefined</code>. <em>Read-only.</em>
         */
        'no-otion-state': boolean;
        /**
         * <code>true</code> when the action is modifying the entity's motion, <code>false</code>
         * otherwise. Is present once the entity has been registered with the physics engine, otherwise the property is
         * <code>undefined</code>.
         * <em>Read-only.</em>
         */
        'active': boolean;
        /**
         * How the entity moves with the action. Is present once the entity has
         * been registered with the physics engine, otherwise the property is <code>undefined</code>. <em>Read-only.</em>
         */
        'motion-type': Entities.PhysicsMotionType;
    };
    /**
     * <p>An entity's physics motion type may be one of the following:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"static"</code></td><td>There is no motion because the entity is locked  &mdash; its <code>locked</code>
            property is set to <code>true</code>.</td></tr>
        <tr><td><code>"kinematic"</code></td><td>Motion is applied without physical laws (e.g., damping) because the entity is
            not locked and has its <code>dynamic</code> property set to <code>false</code>.</td></tr>
        <tr><td><code>"dynamic"</code></td><td>Motion is applied according to physical laws (e.g., damping) because the entity
            is not locked and has its <code>dynamic</code> property set to <code>true</code>.</td></tr>
      </tbody>
    </table>
     */
    type PhysicsMotionType = string;
    /**
     * A material or set of materials used by a {@link Entities.EntityType|Material entity}.
     */
    type MaterialResource = {
        /**
         * The version of the material. <em>Currently not used.</em>
         * @defaultValue 1
         */
        materialVersion: number;
        /**
         * The details of the material or materials, or the ID of another
         * Material entity.
         */
        materials: Entities.Material | Entities.Material[] | string;
    };
    /**
     * A material used in a {@link Entities.MaterialResource|MaterialResource}.
     */
    type Material = {
        /**
         * A name for the material. Supported by all material models.
         * @defaultValue ""
         */
        name: string;
        /**
         * Different material models support different properties and rendering modes.
         * Supported models are: <code>"hifi_pbr"</code>, <code>"hifi_shader_simple"</code>.
         * @defaultValue "hifi_pbr"
         */
        model: string;
        /**
         * The emissive color, i.e., the color that the material emits. A
         * {@link ColorFloat} value is treated as sRGB and must have component values in the range <code>0.0</code> &ndash;
         * <code>1.0</code>. A {@link RGBS} value can be either RGB or sRGB.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        emissive: ColorFloat | RGBS | string;
        /**
         * The opacity, range <code>0.0</code> &ndash; <code>1.0</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> and
         * <code>"hifi_shader_simple"</code> models only.
         * @defaultValue 1.0
         */
        opacity: number | string;
        /**
         * <code>true</code> if the material is unaffected by lighting, <code>false</code> if
         * it is lit by the key light and local lights.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        unlit: boolean | string;
        /**
         * The albedo color. A {@link ColorFloat} value is treated as sRGB and must have
         * component values in the range <code>0.0</code> &ndash; <code>1.0</code>. A {@link RGBS} value can be either RGB or sRGB.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> and
         * <code>"hifi_shader_simple"</code> models only.
         */
        albedo: ColorFloat | RGBS | string;
        /**
         * The roughness, range <code>0.0</code> &ndash; <code>1.0</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        roughness: number | string;
        /**
         * The metallicness, range <code>0.0</code> &ndash; <code>1.0</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        metallic: number | string;
        /**
         * The scattering, range <code>0.0</code> &ndash; <code>1.0</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        scattering: number | string;
        /**
         * The URL of the emissive texture image, or an entity ID.  An entity ID may be that of an
         * Image or Web entity.  Set to <code>"fallthrough"</code> to fall through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        emissiveMap: string;
        /**
         * The URL of the albedo texture image, or an entity ID.  An entity ID may be that of an Image
         * or Web entity.  Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code>
         * model only.
         */
        albedoMap: string;
        /**
         * The URL of the opacity texture image, or an entity ID.  An entity ID may be that of an Image
         * or Web entity.  Set the value the same as the <code>albedoMap</code> value for transparency.
         * <code>"hifi_pbr"</code> model only.
         */
        opacityMap: string;
        /**
         * The mode defining the interpretation of the opacity map. Values can be:
         * <ul>
         * <li><code>"OPACITY_MAP_OPAQUE"</code> for ignoring the opacity map information.</li>
         * <li><code>"OPACITY_MAP_MASK"</code> for using the <code>opacityMap</code> as a mask, where only the texel greater
         * than <code>opacityCutoff</code> are visible and rendered opaque.</li>
         * <li><code>"OPACITY_MAP_BLEND"</code> for using the <code>opacityMap</code> for alpha blending the material surface
         * with the background.</li>
         * </ul>
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        opacityMapMode: string;
        /**
         * The opacity cutoff threshold used to determine the opaque texels of the
         * <code>opacityMap</code> when <code>opacityMapMode</code> is <code>"OPACITY_MAP_MASK"</code>. Range <code>0.0</code>
         * &ndash; <code>1.0</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        opacityCutoff: number | string;
        /**
         * The mode defining which side of the geometry should be rendered. Values can be:
         * <ul>
         * <li><code>"CULL_NONE"</code> for rendering both sides of the geometry.</li>
         * <li><code>"CULL_FRONT"</code> for culling the front faces of the geometry.</li>
         * <li><code>"CULL_BACK"</code> (the default) for culling the back faces of the geometry.</li>
         * </ul>
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        cullFaceMode: string;
        /**
         * The URL of the roughness texture image. You can use this or <code>glossMap</code>, but not
         * both.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        roughnessMap: string;
        /**
         * The URL of the gloss texture image. You can use this or <code>roughnessMap</code>, but not
         * both.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        glossMap: string;
        /**
         * The URL of the metallic texture image, or an entity ID.  An entity ID may be that of an
         * Image or Web entity.  You can use this or <code>specularMap</code>, but not both.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        metallicMap: string;
        /**
         * The URL of the specular texture image, or an entity ID.  An entity ID may be that of an
         * Image or Web entity.  You can use this or <code>metallicMap</code>, but not both.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        specularMap: string;
        /**
         * The URL of the normal texture image, or an entity ID.  An entity ID may be that of an Image
         * or Web entity.  You can use this or <code>bumpMap</code>, but not both. Set to <code>"fallthrough"</code> to fall
         * through to the material below. <code>"hifi_pbr"</code> model only.
         */
        normalMap: string;
        /**
         * The URL of the bump texture image, or an entity ID.  An entity ID may be that of an Image
         * or Web entity.  You can use this or <code>normalMap</code>, but not both. Set to <code>"fallthrough"</code> to
         * fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        bumpMap: string;
        /**
         * The URL of the occlusion texture image, or an entity ID.  An entity ID may be that of
         * an Image or Web entity.  Set to <code>"fallthrough"</code> to fall through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        occlusionMap: string;
        /**
         * The URL of the scattering texture image, or an entity ID.  An entity ID may be that of an
         * Image or Web entity.  Only used if <code>normalMap</code> or <code>bumpMap</code> is specified.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        scatteringMap: string;
        /**
         * The URL of the light map texture image, or an entity ID.  An entity ID may be that of an Image
         * or Web entity.  Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code>
         * model only.
         */
        lightMap: string;
        /**
         * The transform to use for all of the maps apart from <code>occlusionMap</code>
         * and <code>lightMap</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        texCoordTransform0: TMat4 | string;
        /**
         * The transform to use for <code>occlusionMap</code> and <code>lightMap</code>.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         */
        texCoordTransform1: TMat4 | string;
        /**
         * Parameters for controlling how <code>lightMap</code> is used.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         * <p><em>Currently not used.</em></p>
         */
        lightmapParams: string;
        /**
         * Parameters for controlling the material projection and repetition.
         * Set to <code>"fallthrough"</code> to fall through to the material below. <code>"hifi_pbr"</code> model only.
         * <p><em>Currently not used.</em></p>
         */
        materialParams: string;
        /**
         * <code>true</code> if all properties fall through to the material below
         * unless they are set, <code>false</code> if properties respect their individual fall-through settings.
         * <code>"hifi_pbr"</code> and <code>"hifi_shader_simple"</code> models only.
         */
        defaultFallthrough: boolean;
        /**
         * The definition of a procedural shader material.  <code>"hifi_shader_simple"</code> model only.
         */
        procedural: ProceduralData;
    };
    /**
     * <p>How an effect is applied in a {@link Entities.EntityPropertiesZone|Zone} entity.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"inherit"</code></td><td>The effect from any enclosing zone continues into this zone.</td></tr>
        <tr><td><code>"disabled"</code></td><td>The effect &mdash; from any enclosing zone and this zone &mdash; is disabled in
          this zone.</td></tr>
        <tr><td><code>"enabled"</code></td><td>The effect from this zone is enabled, overriding the effect from any enclosing
          zone.</td></tr>
      </tbody>
    </table>
     */
    type ComponentMode = string;
    /**
     * <p>The priority of updates from avatars in a zone to other clients.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"inherit"</code></td><td>The update priority from any enclosing zone continues into this zone.</td></tr>
        <tr><td><code>"crowd"</code></td><td>The update priority in this zone is the normal priority.</td></tr>
        <tr><td><code>"hero"</code></td><td>Avatars in this zone have an increased update priority.</td></tr>
      </tbody>
    </table>
     */
    type AvatarPriorityMode = string;
    /**
     * <p>A {@link Entities.ScreenshareMode} entity may be one of the following types:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"inherit"</code></td><td>inherit</td></tr>
        <tr><td><code>"enabled"</code></td><td>enabled</td></tr>
        <tr><td><code>"disabled"</code></td><td>disabled</td></tr>
      </tbody>
    </table>
     */
    type ScreenshareMode = 'enabled' | 'disabled' | 'inherit';
    /**
     * <p>A {@link Entities.EntityPropertiesGizmo|Gizmo} entity may be one of the following types:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"ring"</code></td><td>A ring gizmo.</td></tr>
      </tbody>
    </table>
     */
    type GizmoType = string;
    /**
     * <p>How the geometry of an entity is rendered.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"solid"</code></td><td>The entity is drawn as a solid shape.</td></tr>
        <tr><td><code>"lines"</code></td><td>The entity is drawn as wireframe.</td></tr>
      </tbody>
    </table>
     */
    type PrimitiveMode = string;
    /**
     * <p>Pulse modes for color and alpha pulsing.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"none"</code></td><td>No pulsing.</td></tr>
        <tr><td><code>"in"</code></td><td>Pulse in phase with the pulse period.</td></tr>
        <tr><td><code>"out"</code></td><td>Pulse out of phase with the pulse period.</td></tr>
      </tbody>
    </table>
     */
    type PulseMode = string;
    /**
     * <p>A layer in which an entity may be rendered.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"world"</code></td><td>The entity is drawn in the world with everything else.</td></tr>
        <tr><td><code>"front"</code></td><td>The entity is drawn on top of the world layer but behind the HUD surface.</td></tr>
        <tr><td><code>"hud"</code></td><td>The entity is drawn on top of other layers and the HUD surface.</td></tr>
      </tbody>
    </table>
     */
    type RenderLayer = string;
    /**
     * <p>An in-world item may be one of the following types:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"entity"</code></td><td>The item is an entity.</td></tr>
        <tr><td><code>"avatar"</code></td><td>The item is an avatar.</td></tr>
        <tr><td><code>"unknown"</code></td><td>The item cannot be found.</td></tr>
      </tbody>
    </table>
     */
    type NestableType = string;
    /**
     * <p>A {@link Entities.EntityPropertiesText|Text} entity may use one of the following alignments:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"left"</code></td><td>Text is aligned to the left side.</td></tr>
        <tr><td><code>"center"</code></td><td>Text is centered.</td></tr>
        <tr><td><code>"right"</code></td><td>Text is aligned to the right side.</td></tr>
      </tbody>
    </table>
     */
    type TextAlignment = string;
    /**
     * <p>A {@link Entities.EntityPropertiesText|Text} entity may use one of the following effects:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"none"</code></td><td>No effect.</td></tr>
        <tr><td><code>"outline"</code></td><td>An outline effect.</td></tr>
        <tr><td><code>"outline fill"</code></td><td>An outline effect, with fill.</td></tr>
        <tr><td><code>"shadow"</code></td><td>A shadow effect.</td></tr>
      </tbody>
    </table>
     */
    type TextEffect = string;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>EntityScriptServerLog</code> API makes server log file output written by server entity scripts available to client
scripts.
 */
declare namespace EntityScriptServerLog {
    /**
     * Triggered when one or more lines are written to the server log by server entity scripts.
     * @example
     * <caption>Echo server entity script program log output to Interface's program log.</caption>
    EntityScriptServerLog.receivedNewLogLines.connect(function (logLines) {
        print("Log lines from server entity scripts:", logLines);
    });
     * @example
     * <caption>A server entity script to test with. Copy the code into an entity's "Server Script" property.</caption>
    (function () {
        print("Hello from a server entity script!");
    })
     *
     * @param logLines - The server log lines written by server entity scripts. If there are multiple lines they are
        separated by <code>"\n"</code>s.
     */
    function receivedNewLogLines(logLines: string): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Graphics</code> API enables you to access and manipulate avatar, entity, and overlay models in the rendered scene.
This includes getting mesh and material information for applying {@link Entities.EntityPropertiesMaterial|Material}
entities.
 */
declare namespace Graphics {
    /**
     * <p>The type name of a graphics buffer.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"position"</code></td><td>Position buffer.</td></tr>
        <tr><td><code>"normal"</code></td><td>normal buffer.</td></tr>
        <tr><td><code>"tangent"</code></td><td>Tangent buffer.</td></tr>
        <tr><td><code>"color"</code></td><td>Color buffer.</td></tr>
        <tr><td><code>"skin_cluster_index"</code></td><td>Skin cluster index buffer.</td></tr>
        <tr><td><code>"skin_cluster_weight"</code></td><td>Skin cluster weight buffer.</td></tr>
        <tr><td><code>"texcoord0"</code></td><td>First UV coordinates buffer.</td></tr>
        <tr><td><code>"texcoord1"</code></td><td>Second UV coordinates buffer.</td></tr>
        <tr><td><code>"texcoord2"</code></td><td>Third UV coordinates buffer.</td></tr>
        <tr><td><code>"texcoord3"</code></td><td>Fourth UV coordinates buffer.</td></tr>
        <tr><td><code>"texcoord4"</code></td><td>Fifth UV coordinates buffer.</td></tr>
      </tbody>
    </table>
     */
    type BufferTypeName = string;
    /**
     * <p>The type of a graphics buffer value as accessed by JavaScript.</p>
    <table>
      <thead>
        <tr><th>Type</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td>{@link TVec3}</td><td><code>"position"</code></td><td>Position buffer.</td></tr>
        <tr><td>{@link TVec3}</td><td><code>"normal"</code></td><td>normal buffer.</td></tr>
        <tr><td>{@link TVec3}</td><td><code>"tangent"</code></td><td>Tangent buffer.</td></tr>
        <tr><td>{@link TVec4}</td><td><code>"color"</code></td><td>Color buffer.</td></tr>
        <tr><td>{@link TVec4}</td><td><code>"skin_cluster_index"</code></td><td>Skin cluster index buffer.</td></tr>
        <tr><td>{@link TVec4}</td><td><code>"skin_cluster_weight"</code></td><td>Skin cluster weight buffer.</td></tr>
        <tr><td>{@link TVec2}</td><td><code>"texcoord0"</code></td><td>First UV coordinates buffer.</td></tr>
        <tr><td>{@link TVec2}</td><td><code>"texcoord1"</code></td><td>Second UV coordinates buffer.</td></tr>
        <tr><td>{@link TVec2}</td><td><code>"texcoord2"</code></td><td>Third UV coordinates buffer.</td></tr>
        <tr><td>{@link TVec2}</td><td><code>"texcoord3"</code></td><td>Fourth UV coordinates buffer.</td></tr>
        <tr><td>{@link TVec2}</td><td><code>"texcoord4"</code></td><td>Fifth UV coordinates buffer.</td></tr>
      </tbody>
    </table>
     */
    type BufferType = TVec4 | TVec3 | TVec2;
    /**
     * <p>The interpretation of mesh elements.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"points"</code></td><td>Points.</td></tr>
        <tr><td><code>"lines"</code></td><td>Lines.</td></tr>
        <tr><td><code>"line_strip"</code></td><td>Line strip.</td></tr>
        <tr><td><code>"triangles"</code></td><td>Triangles.</td></tr>
        <tr><td><code>"triangle_strip"</code></td><td>Triangle strip.</td></tr>
        <tr><td><code>"quads"</code></td><td>Quads.</td></tr>
        <tr><td><code>"quad_strip"</code></td><td>Quad strip.</td></tr>
      </tbody>
    </table>
     */
    type MeshTopology = string;
    /**
     * A material layer.
     */
    type MaterialLayer = {
        /**
         * The layer's material.
         */
        material: Graphics.Material;
        /**
         * The priority of the layer. If multiple materials are applied to a mesh part, only the
         * layer with the highest priority is applied, with materials of the same priority randomly assigned.
         */
        priority: number;
    };
    /**
     * IFS (Indexed-Face Set) data defining a mesh.
     */
    type IFSData = {
        /**
         * Mesh name. (Useful for debugging.)
         * @defaultValue ""
         */
        name?: string;
        /**
         * Element interpretation. <em>Currently only triangles is supported.</em>
         */
        topology: Graphics.MeshTopology;
        /**
         * Vertex indices to use for the mesh faces, in tuples per the <code>topology</code>.
         */
        indices: number[];
        /**
         * Vertex positions, in model coordinates.
         */
        positions: TVec3[];
        /**
         * Vertex normals (normalized).
         * @defaultValue []
         */
        normals?: TVec3[];
        /**
         * Vertex colors (normalized).
         * @defaultValue []
         */
        colors?: TVec3[];
        /**
         * Vertex texture coordinates (normalized).
         * @defaultValue []
         */
        texCoords0?: TVec2[];
    };
    /**
     * A material in a {@link GraphicsModel}.
     */
    type Material = {
        /**
         * The name of the material.
         */
        name: string;
        /**
         * Different material models support different properties and rendering modes. Supported models
         * are: <code>"hifi_pbr"</code> and <code>"hifi_shader_simple"</code>.
         */
        model: string;
        /**
         * The albedo color. Component values are in the range <code>0.0</code> &ndash;
         * <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         */
        albedo?: TVec3 | string;
        /**
         * The opacity, range <code>0.0</code> &ndash; <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         */
        opacity?: number | string;
        /**
         * The opacity cutoff threshold used to determine the opaque texels of the
         * <code>opacityMap</code> when <code>opacityMapMode</code> is <code>"OPACITY_MAP_MASK"</code>. Range <code>0.0</code>
         * &ndash; <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        opacityCutoff?: number | string;
        /**
         * The roughness, range <code>0.0</code> &ndash; <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        roughness?: number | string;
        /**
         * The metallicness, range <code>0.0</code> &ndash; <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        metallic?: number | string;
        /**
         * The scattering, range <code>0.0</code> &ndash; <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        scattering?: number | string;
        /**
         * <code>true</code> if the material is unaffected by lighting, <code>false</code> if it
         * it is lit by the key light and local lights.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        unlit?: boolean | string;
        /**
         * The emissive color, i.e., the color that the material emits. Component values are
         * in the range <code>0.0</code> &ndash; <code>1.0</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        emissive?: TVec3 | string;
        /**
         * The URL of the albedo texture image.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        albedoMap?: string;
        /**
         * The URL of the opacity texture image.
         * <code>"hifi_pbr"</code> model only.
         */
        opacityMap?: string;
        /**
         * The mode defining the interpretation of the opacity map. Values can be:
         * <ul>
         * <li><code>"OPACITY_MAP_OPAQUE"</code> for ignoring the opacity map information.</li>
         * <li><code>"OPACITY_MAP_MASK"</code> for using the <code>opacityMap</code> as a mask, where only the texel greater
         * than <code>opacityCutoff</code> are visible and rendered opaque.</li>
         * <li><code>"OPACITY_MAP_BLEND"</code> for using the <code>opacityMap</code> for alpha blending the material surface
         * with the background.</li>
         * </ul>
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        opacityMapMode?: string;
        /**
         * The URL of the occlusion texture image.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        occlusionMap?: string;
        /**
         * The URL of the light map texture image.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        lightMap?: string;
        /**
         * Parameters for controlling how <code>lightMap</code> is used.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         * <p><em>Currently not used.</em></p>
         */
        lightmapParams?: string;
        /**
         * The URL of the scattering texture image.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        scatteringMap?: string;
        /**
         * The URL of the emissive texture image.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        emissiveMap?: string;
        /**
         * The URL of the metallic texture image.
         * If <code>"fallthrough"</code> then it and <code>specularMap</code> fall through to the material below.
         * Only use one of <code>metallicMap</code> and <code>specularMap</code>.
         * <code>"hifi_pbr"</code> model only.
         */
        metallicMap?: string;
        /**
         * The URL of the specular texture image.
         * Only use one of <code>metallicMap</code> and <code>specularMap</code>.
         * <code>"hifi_pbr"</code> model only.
         */
        specularMap?: string;
        /**
         * The URL of the roughness texture image.
         * If <code>"fallthrough"</code> then it and <code>glossMap</code> fall through to the material below.
         * Only use one of <code>roughnessMap</code> and <code>glossMap</code>.
         * <code>"hifi_pbr"</code> model only.
         */
        roughnessMap?: string;
        /**
         * The URL of the gloss texture image.
         * Only use one of <code>roughnessMap</code> and <code>glossMap</code>.
         * <code>"hifi_pbr"</code> model only.
         */
        glossMap?: string;
        /**
         * The URL of the normal texture image.
         * If <code>"fallthrough"</code> then it and <code>bumpMap</code> fall through to the material below.
         * Only use one of <code>normalMap</code> and <code>bumpMap</code>.
         * <code>"hifi_pbr"</code> model only.
         */
        normalMap?: string;
        /**
         * The URL of the bump texture image.
         * Only use one of <code>normalMap</code> and <code>bumpMap</code>.
         * <code>"hifi_pbr"</code> model only.
         */
        bumpMap?: string;
        /**
         * Parameters for controlling the material projection and repetition.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         * <p><em>Currently not used.</em></p>
         */
        materialParams?: string;
        /**
         * Specifies Which faces of the geometry to render. Values can be:
         * <ul>
         * <li><code>"CULL_NONE"</code> to render both sides of the geometry.</li>
         * <li><code>"CULL_FRONT"</code> to cull the front faces of the geometry.</li>
         * <li><code>"CULL_BACK"</code> (the default) to cull the back faces of the geometry.</li>
         * </ul>
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         * @defaultValue "CULL_BACK"
         */
        cullFaceMode?: string;
        /**
         * The transform to use for all of the maps apart from
         * <code>occlusionMap</code> and <code>lightMap</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        texCoordTransform0?: TMat4 | string;
        /**
         * The transform to use for <code>occlusionMap</code> and
         * <code>lightMap</code>.
         * If <code>"fallthrough"</code> then it falls through to the material below.
         * <code>"hifi_pbr"</code> model only.
         */
        texCoordTransform1?: TMat4 | string;
        /**
         * The definition of a procedural shader material.
         * <code>"hifi_shader_simple"</code> model only.
         * <p><em>Currently not used.</em></p>
         */
        procedural: string;
        /**
         * <code>true</code> if all properties fall through to the material below unless
         * they are set, <code>false</code> if properties respect their individual fall-through settings.
         */
        defaultFallthrough: boolean;
    };
    /**
     * Gets a handle to the model data used for displaying an avatar, 3D entity, or 3D overlay.
    <p>Note: The model data may be used for more than one instance of the item displayed in the scene.</p>
     * @example
     * <caption>Report some details of your avatar's model.</caption>
    var model = Graphics.getModel(MyAvatar.sessionUUID);
    var meshes = model.meshes;
    var numMeshparts = 0;
    for (var i = 0; i < meshes.length; i++) {
        numMeshparts += meshes[i].numParts;
    }
    
    print("Avatar:", MyAvatar.skeletonModelURL);
    print("Number of meshes:", model.numMeshes);
    print("Number of mesh parts:", numMeshparts);
    print("Material names: ", model.materialNames);
    print("Material layers:", Object.keys(model.materialLayers));
     * @param id - The ID of the avatar, 3D entity, or 3D overlay.
     * @returns The model data for the avatar, entity, or overlay, as displayed. This includes the results of
        applying any {@link Entities.EntityPropertiesMaterial|Material} entities to the item.
     */
    function getModel(id: Uuid): GraphicsModel;
    /**
     * Updates the model for an avatar, 3D entity, or 3D overlay in the rendered scene.
     * @param id - The ID of the avatar, 3D entity, or 3D overlay to update.
     * @param model - The model to update the avatar, 3D entity, or 3D overlay with.
     * @returns <code>true</code> if the update was completed successfully, <code>false</code> if it wasn't.
     */
    function updateModel(id: Uuid, model: GraphicsModel): boolean;
    /**
     * Checks whether the model for an avatar, entity, or overlay can be updated in the rendered scene. Only avatars,
    <code>"Model"</code> entities and <code>"model"</code> overlays can have their meshes updated.
     * @example
     * <caption>Test whether different types of items can be updated.</caption>
    var modelEntityID = Entities.addEntity({
        type: "Model",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(Camera.orientation, { x: -0.5, y: 0, z: -3 })),
        rotation: MyAvatar.orientation,
        modelURL: "https://apidocs.vircadia.dev/models/cowboy-hat.fbx",
        dimensions: { x: 0.8569, y: 0.3960, z: 1.0744 },
        lifetime: 300  // Delete after 5 minutes.
    });
    var shapeEntityID = Entities.addEntity({
        type: "Shape",
        shape: "Cylinder",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(Camera.orientation, { x: 0.5, y: 0, z: -3 })),
        dimensions: { x: 0.4, y: 0.6, z: 0.4 },
        lifetime: 300  // Delete after 5 minutes.
    });
    
    Script.setTimeout(function () {
        print("Can update avatar:", Graphics.canUpdateModel(MyAvatar.sessionUUID));  // true
        print("Can update model entity:", Graphics.canUpdateModel(modelEntityID));  // true
        print("Can update shape entity:", Graphics.canUpdateModel(shapeEntityID));  // false
    }, 1000);  // Wait for the entities to rez.
     * @param id - The ID of the avatar, entity, or overlay.
     * @param [meshIndex = -1] - <em>Not used.</em>
     * @param [partNumber = -1] - <em>Not used.</em>
     * @returns <code>true</code> if the model can be updated, <code>false</code> if it can't.
     */
    function canUpdateModel(id: Uuid, meshIndex?: number, partNumber?: number): boolean;
    /**
     * Creates a new graphics model from meshes.
     * @param meshes - The meshes to include in the model.
     * @returns The new graphics model.
     */
    function newModel(meshes: GraphicsMesh[]): GraphicsModel;
    /**
     * Creates a new graphics mesh.
     * @param ifsMeshData - Index-Faced Set (IFS) data defining the mesh.
     * @returns The new graphics mesh.
     */
    function newMesh(ifsMeshData: Graphics.IFSData): GraphicsMesh;
    /**
     * Exports a model to OBJ format.
     * @param model - The model to export.
     * @returns The OBJ format representation of the model.
     */
    function exportModelToOBJ(model: GraphicsModel): string;
    /**
     * The extents of a mesh.
     */
    type MeshExtents = {
        /**
         * The bottom right near (minimum axes values) corner of the enclosing box.
         */
        brn: TVec3;
        /**
         * The top far left (maximum axes values) corner of the enclosing box.
         */
        tfl: TVec3;
        /**
         * The center of the enclosing box.
         */
        center: TVec3;
        /**
         * The dimensions of the enclosing box.
         */
        dimensions: TVec3;
    };
    /**
     * Details of a buffer element's format.
     */
    type BufferElementFormat = {
        /**
         * Type.
         */
        type: string;
        /**
         * Semantic.
         */
        semantic: string;
        /**
         * Dimension.
         */
        dimension: string;
        /**
         * Scalar count.
         */
        scalarCount: number;
        /**
         * Byte size.
         */
        byteSize: number;
        /**
         * Bytes per element.
         */
        BYTES_PER_ELEMENT: number;
    };
    /**
     * Details of buffer's format.
     */
    type BufferFormat = {
        /**
         * Slot.
         */
        slot: number;
        /**
         * Length.
         */
        length: number;
        /**
         * Byte length.
         */
        byteLength: number;
        /**
         * Offset.
         */
        offset: number;
        /**
         * Stride.
         */
        stride: number;
        /**
         * Element format.
         */
        element: Graphics.BufferElementFormat;
    };
}

declare namespace GraphicsMesh {
    /**
     * Called for each vertex when {@link GraphicsMesh.updateVertexAttributes} is called.
     * @param attributes - The attributes  of the vertex.
     * @param index - The vertex index.
     * @param properties - The properties of the mesh, per {@link GraphicsMesh}.
     */
    type forEachVertexCallback = (attributes: {
        [key: string]: Graphics.BufferType;
    }, index: number, properties: any) => void;
    /**
     * Called for each vertex when {@link GraphicsMesh.updateVertexAttributes} is called. The value returned by the script function
    should be the modified attributes to update the vertex with, or <code>false</code> to not update the particular vertex.
     * @param attributes - The attributes  of the vertex.
     * @param index - The vertex index.
     * @param properties - The properties of the mesh, per {@link GraphicsMesh}.
     */
    type updateVertexAttributesCallback = (attributes: {
        [key: string]: Graphics.BufferType;
    }, index: number, properties: any) => {
        [key: string]: Graphics.BufferType;
    } | boolean;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A handle to in-memory mesh data in a {@link GraphicsModel}.

<p>Create using the {@link Graphics} API, {@link GraphicsModel.cloneModel}, or {@link GraphicsMesh.cloneMesh}.</p>
 * @property numParts - The number of mesh parts.
    <em>Read-only.</em>
 * @property parts - The mesh parts.
    <em>Read-only.</em>
 * @property numIndices - The total number of vertex indices in the mesh.
    <em>Read-only.</em>
 * @property numVertices - The total number of vertices in the mesh.
    <em>Read-only.</em>
 * @property numAttributes - The number of vertex attributes.
    <em>Read-only.</em>
 * @property attributeNames - The names of the vertex attributes.
    <em>Read-only.</em>
 * @property valid - <code>true</code> if the mesh is valid, <code>false</code> if it isn't.
    <em>Read-only.</em>
 * @property strong - <code>true</code> if the mesh is valid and able to be used, <code>false</code> if it isn't.
    <em>Read-only.</em>
 * @property extents - The mesh extents, in model coordinates.
    <em>Read-only.</em>
 * @property bufferFormats - Details of the buffers used for the
    mesh.
    <em>Read-only.</em>
 */
declare class GraphicsMesh {
    static getMeshPointer(): undefined;
    static getModelProviderPointer(): undefined;
    static getModelBasePointer(): undefined;
    /**
     * Gets the model the mesh is part of.
    <p><em>Currently doesn't work.</em></p>
     * @returns The model the mesh is part of, <code>null</code> if it isn't part of a model.
     */
    static getParentModel(): GraphicsModel;
    /**
     * Gets the vertex indices.
     * @returns The vertex indices.
     */
    static getIndices(): number[];
    /**
     * Gets the indices of nearby vertices.
     * @param origin - The search position, in model coordinates.
     * @param [epsilon = 1e-6] - The search distance. If a vertex is within this distance from the
       <code>origin</code> it is considered to be "nearby".
     * @returns The indices of nearby vertices.
     */
    static findNearbyVertexIndices(origin: TVec3, epsilon?: number): number[];
    /**
     * Adds an attribute for all vertices.
     * @param name - The name of the attribute.
     * @param [defaultValue] - The value to give the attributes added to the vertices.
     * @returns The number of vertices the attribute was added to, <code>0</code> if the <code>name</code> was
        invalid or all vertices already had the attribute.
     */
    static addAttribute(name: Graphics.BufferTypeName, defaultValue?: Graphics.BufferType): number;
    /**
     * Sets the value of an attribute for all vertices.
     * @param name - The name of the attribute. The attribute is added to the vertices if not
        already present.
     * @param value - The value to give the attributes.
     * @returns <code>1</code> if the attribute name was valid and the attribute values were set, <code>0</code>
        otherwise.
     */
    static fillAttribute(name: Graphics.BufferTypeName, value: Graphics.BufferType): number;
    /**
     * Removes an attribute from all vertices.
    <p>Note: The <code>"position"</code> attribute cannot be removed.</p>
     * @param name - The name of the attribute to remove.
     * @returns <code>true</code> if the attribute existed and was removed, <code>false</code> otherwise.
     */
    static removeAttribute(name: Graphics.BufferTypeName): boolean;
    /**
     * Gets the value of an attribute for all vertices.
     * @param name - The name of the attribute to get the vertex values of.
     * @returns The attribute values for all vertices.
     */
    static queryVertexAttributes(name: Graphics.BufferTypeName): Graphics.BufferType[];
    /**
     * Gets the attributes and attribute values of a vertex.
     * @param index - The vertex to get the attributes for.
     * @returns The attribute names and values for the vertex.
     */
    static getVertexAttributes(index: number): {
        [key: string]: Graphics.BufferType;
    };
    /**
     * Updates attribute values of a vertex.
     * @param index - The vertex to set the attributes for.
     * @param values - The attribute names and values. Need not
        specify unchanged values.
     * @returns <code>true</code> if the index and the attribute names and values were valid and the vertex was
        updated, <code>false</code> otherwise.
     */
    static setVertexAttributes(index: number, values: {
        [key: string]: Graphics.BufferType;
    }): boolean;
    /**
     * Gets the value of a vertex's attribute.
     * @param index - The vertex index.
     * @param name - The name of the vertex attribute to get.
     * @returns The value of the vertex attribute.
     */
    static getVertexProperty(index: number, name: Graphics.BufferTypeName): Graphics.BufferType;
    /**
     * Sets the value of a vertex's attribute.
     * @param index - The vertex index.
     * @param name - The name of the vertex attribute to set.
     * @param value - The vertex attribute value to set.
     * @returns <code>true</code> if the vertex attribute value was set, <code>false</code> if it wasn't.
     */
    static setVertexProperty(index: number, name: Graphics.BufferTypeName, value: Graphics.BufferType): boolean;
    /**
     * Makes a copy of the mesh.
     * @returns A copy of the mesh.
     */
    static cloneMesh(): GraphicsMesh;
    /**
     * Updates vertex attributes by calling a function for each vertex. The function can return modified attributes to
    update the vertex with.
     * @param callback - The function to call for each vertex.
     * @returns The number of vertices the callback was called for.
     */
    static updateVertexAttributes(callback: GraphicsMesh.updateVertexAttributesCallback): number;
    /**
     * Calls a function for each vertex.
     * @param callback - The function to call for each vertex.
     * @returns The number of vertices the callback was called for.
     */
    static forEachVertex(callback: GraphicsMesh.forEachVertexCallback): number;
    /**
     * Checks if an index is valid and, optionally, that vertex has a particular attribute.
     * @param index - The index to check.
     * @param [attribute] - The attribute to check.
     * @returns <code>true</code> if the index is valid and that vertex has the attribute if specified.
     */
    static isValidIndex(index: number, attribute?: Graphics.BufferTypeName): boolean;
    /**
     * The number of mesh parts.
     * <em>Read-only.</em>
    */
    numParts: number;
    /**
     * The mesh parts.
     * <em>Read-only.</em>
    */
    parts: GraphicsMeshPart[];
    /**
     * The total number of vertex indices in the mesh.
     * <em>Read-only.</em>
    */
    numIndices: number;
    /**
     * The total number of vertices in the mesh.
     * <em>Read-only.</em>
    */
    numVertices: number;
    /**
     * The number of vertex attributes.
     * <em>Read-only.</em>
    */
    numAttributes: number;
    /**
     * The names of the vertex attributes.
     * <em>Read-only.</em>
    */
    attributeNames: Graphics.BufferTypeName[];
    /**
     * <code>true</code> if the mesh is valid, <code>false</code> if it isn't.
     * <em>Read-only.</em>
    */
    valid: boolean;
    /**
     * <code>true</code> if the mesh is valid and able to be used, <code>false</code> if it isn't.
     * <em>Read-only.</em>
    */
    strong: boolean;
    /**
     * The mesh extents, in model coordinates.
     * <em>Read-only.</em>
    */
    extents: Graphics.MeshExtents;
    /**
     * Details of the buffers used for the
     * mesh.
     * <em>Read-only.</em>
    */
    bufferFormats: {
        [key: string]: Graphics.BufferFormat;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A handle to in-memory mesh part data in a {@link GraphicsModel}.

<p>Create using the {@link Graphics} API, {@link GraphicsModel.cloneModel}, {@link GraphicsMesh.cloneMesh}, or
{@link GraphicsMeshPart.cloneMeshPart}.</p>
 * @property valid - <code>true</code> if the mesh part is valid, <code>false</code> if it isn't.
    <em>Read-only.</em>
 * @property partIndex - The index of the part within the <em>whole</em> mesh (i.e., parent and mesh parts).
    <em>Read-only.</em>
 * @property firstVertexIndex - The index of the first vertex.
 * @property baseVertexIndex - The index of the base vertex.
 * @property lastVertexIndex - The index of the last vertex.
 * @property topology - The element interpretation. <em>Currently only triangles is supported.</em>
 * @property numIndices - The number of vertex indices in the mesh part.
 * @property numVertices - The number of vertices in the <em>whole</em> mesh  (i.e., parent and mesh parts).
    <em>Read-only.</em>
 * @property numVerticesPerFace - The number of vertices per face, per the <code>topology</code> (e.g., 3 for
    triangles).
    <em>Read-only.</em>
 * @property numFaces - The number of faces represented by the mesh part.
    <em>Read-only.</em>
 * @property numAttributes - The number of vertex attributes in the <em>whole</em> mesh  (i.e., parent and mesh
    parts).
    <em>Read-only.</em>
 * @property attributeNames - The names of the vertex attributes in the <em>whole</em> mesh
    (i.e., parent and mesh parts).
    <em>Read-only.</em>
 * @property extents - The mesh part extents, in model coordinates.
    <em>Read-only.</em>
 * @property bufferFormats - Details of the buffers used for the
    <em>whole</em> mesh (i.e., parent and mesh parts).
    <em>Read-only.</em>
 */
declare class GraphicsMeshPart {
    /**
     * Gets the vertex indices.
     * @returns The vertex indices.
     */
    static getIndices(): number[];
    /**
     * Sets the vertex indices.
     * @param indices - The vertex indices.
     * @returns <code>true</code> if successful, <code>false</code> if not.
     */
    static setIndices(indices: number[]): boolean;
    /**
     * Gets the indices of nearby vertices in the mesh part.
     * @param origin - The search position, in model coordinates.
     * @param [epsilon = 1e-6] - The search distance. If a vertex is within this distance from the
       <code>origin</code> it is considered to be "nearby".
     * @returns The indices of nearby vertices.
     */
    static findNearbyPartVertexIndices(origin: TVec3, epsilon?: number): number[];
    /**
     * Gets the value of a vertex's attribute.
     * @param index - The vertex index.
     * @param name - The name of the vertex attribute to get.
     * @returns The value of the vertex attribute.
     */
    static getVertexProperty(index: number, name: Graphics.BufferTypeName): Graphics.BufferType;
    /**
     * Sets the value of a vertex's attribute.
     * @param index - The vertex index.
     * @param name - The name of the vertex attribute to set.
     * @param value - The vertex attribute value to set.
     * @returns <code>true</code> if the vertex attribute value was set, <code>false</code> if it wasn't.
     */
    static setVertexProperty(index: number, name: Graphics.BufferTypeName, value: Graphics.BufferType): boolean;
    /**
     * Gets the vertex indices that make up a face.
     * @param index - The index of the face.
     * @returns The vertex indices that make up the face, of number per the mesh <code>topology</code>.
     */
    static getFace(index: number): number[];
    /**
     * Scales the mesh to so that it's maximum model coordinate dimension is a specified length.
     * @param scale - The target dimension.
     * @returns The resulting mesh extents, in model coordinates.
     */
    static scaleToFit(scale: number): Graphics.MeshExtents;
    /**
     * Translates the mesh part.
     * @param translation - The translation to apply, in model coordinates.
     * @returns The rseulting mesh extents, in model coordinates.
     */
    static translate(translation: TVec3): Graphics.MeshExtents;
    /**
     * Scales the mesh part.
     * @param scale - The scale to apply in each model coordinate direction.
     * @param [origin] - The origin to scale about. If not specified, the center of the mesh part is used.
     * @returns The resulting mesh extents, in model coordinates.
     */
    static scale(scale: TVec3, origin?: TVec3): Graphics.MeshExtents;
    /**
     * Rotates the mesh part, using Euler angles.
     * @param eulerAngles - The rotation to perform, in mesh coordinates, as Euler angles in degrees.
     * @param [origin] - The point about which to rotate, in model coordinates.
        <p><strong>Warning:</strong> Currently doesn't work as expected.</p>
     * @returns The resulting mesh extents, in model coordinates.
     */
    static rotateDegrees(eulerAngles: TVec3, origin?: TVec3): Graphics.MeshExtents;
    /**
     * Rotates the mesh part, using a quaternion.
     * @param rotation - The rotation to perform, in model coordinates.
     * @param [origin] - The point about which to rotate, in model coordinates.
        <p><strong>Warning:</strong> Currently doesn't work as expected.</p>
     * @returns The resulting mesh extents, in model coordinates.
     */
    static rotate(rotation: TQuat, origin?: TVec3): Graphics.MeshExtents;
    /**
     * Scales, rotates, and translates the mesh.
     * @param transform - The scale, rotate, and translate transform to apply.
     * @returns The resulting mesh extents, in model coordinates.
     */
    static transform(transform: TMat4): Graphics.MeshExtents;
    /**
     * Sets the value of an attribute for all vertices in the <em>whole</em> mesh (i.e., parent and mesh parts).
     * @param name - The name of the attribute. The attribute is added to the vertices if not
        already present.
     * @param value - The value to give the attributes.
     * @returns <code>1</code> if the attribute name was valid and the attribute values were set, <code>0</code>
        otherwise.
     */
    static fillAttribute(name: Graphics.BufferTypeName, value: Graphics.BufferType): number;
    /**
     * Deduplicates vertices.
     * @param [epsilon = 1e-6] - The deduplicadtion distance. If a pair of vertices is within this distance of each
       other they are combined into a single vertex.
     * @returns <code>true</code> if the deduplication succeeded, <code>false</code> if it didn't.
     */
    static dedupeVertices(epsilon?: number): boolean;
    /**
     * Gets the parent mesh.
     * @returns The parent mesh.
     */
    static getParentMesh(): GraphicsMesh;
    /**
     * Replaces a mesh part with a copy of another mesh part.
     * @param source - The mesh part to copy.
     * @param [attributes] - The attributes to copy. If not specified, all attributes are
        copied from the source.
     * @returns <code>true</code> if the mesh part was successfully replaced, <code>false</code> if it wasn't.
     */
    static replaceMeshPartData(source: GraphicsMeshPart, attributes?: Graphics.BufferTypeName[]): boolean;
    /**
     * Makes a copy of the mesh part.
     * @returns A copy of the mesh part.
     */
    static cloneMeshPart(): GraphicsMeshPart;
    /**
     * Exports the mesh part to OBJ format.
     * @returns The OBJ format representation of the mesh part.
     */
    static toOBJ(): string;
    /**
     * Updates vertex attributes by calling a function for each vertex in the <em>whole</em> mesh (i.e., the parent and
    mesh parts). The function can return modified attributes to update the vertex with.
     * @param callback - The function to call for each vertex.
     * @returns The number of vertices the callback was called for.
     */
    static updateVertexAttributes(callback: GraphicsMesh.updateVertexAttributesCallback): number;
    /**
     * Checks if an index is valid and, optionally, that vertex has a particular attribute.
     * @param index - The index to check.
     * @param [attribute] - The attribute to check.
     * @returns <code>true</code> if the index is valid and that vertex has the attribute if specified.
     */
    static isValidIndex(index: number, attribute?: Graphics.BufferTypeName): boolean;
    /**
     * Adds an attribute for all vertices.
     * @param name - The name of the attribute.
     * @param [defaultValue] - The value to give the attributes added to the vertices.
     * @returns The number of vertices the attribute was added to, <code>0</code> if the <code>name</code> was
        invalid or all vertices already had the attribute.
     */
    static addAttribute(name: Graphics.BufferTypeName, defaultValue?: Graphics.BufferType): number;
    /**
     * Gets the attributes and attribute values of a vertex.
     * @param index - The vertex to get the attributes for.
     * @returns The attribute names and values for the vertex.
     */
    static getVertextAttributes(index: number): {
        [key: string]: Graphics.BufferType;
    };
    /**
     * Updates attribute values of a vertex.
     * @param index - The vertex to set the attributes for.
     * @param values - The attribute names and values. Need not
        specify unchanged values.
     * @returns <code>true</code> if the index and the attribute names and values were valid and the vertex was
        updated, <code>false</code> otherwise.
     */
    static setVertextAttributes(index: number, values: {
        [key: string]: Graphics.BufferType;
    }): boolean;
    /**
     * <code>true</code> if the mesh part is valid, <code>false</code> if it isn't.
     * <em>Read-only.</em>
    */
    valid: boolean;
    /**
     * The index of the part within the <em>whole</em> mesh (i.e., parent and mesh parts).
     * <em>Read-only.</em>
    */
    partIndex: number;
    /**
     * The index of the first vertex.
    */
    firstVertexIndex: number;
    /**
     * The index of the base vertex.
    */
    baseVertexIndex: number;
    /**
     * The index of the last vertex.
    */
    lastVertexIndex: number;
    /**
     * The element interpretation. <em>Currently only triangles is supported.</em>
    */
    topology: Graphics.MeshTopology;
    /**
     * The number of vertex indices in the mesh part.
    */
    numIndices: number;
    /**
     * The number of vertices in the <em>whole</em> mesh  (i.e., parent and mesh parts).
     * <em>Read-only.</em>
    */
    numVertices: number;
    /**
     * The number of vertices per face, per the <code>topology</code> (e.g., 3 for
     * triangles).
     * <em>Read-only.</em>
    */
    numVerticesPerFace: number;
    /**
     * The number of faces represented by the mesh part.
     * <em>Read-only.</em>
    */
    numFaces: number;
    /**
     * The number of vertex attributes in the <em>whole</em> mesh  (i.e., parent and mesh
     * parts).
     * <em>Read-only.</em>
    */
    numAttributes: number;
    /**
     * The names of the vertex attributes in the <em>whole</em> mesh
     * (i.e., parent and mesh parts).
     * <em>Read-only.</em>
    */
    attributeNames: Graphics.BufferTypeName[];
    /**
     * The mesh part extents, in model coordinates.
     * <em>Read-only.</em>
    */
    extents: Graphics.MeshExtents;
    /**
     * Details of the buffers used for the
     * <em>whole</em> mesh (i.e., parent and mesh parts).
     * <em>Read-only.</em>
    */
    bufferFormats: {
        [key: string]: Graphics.BufferFormat;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A handle to in-memory model data such as may be used in displaying avatars, 3D entities, or 3D overlays in the rendered
scene. Changes made to the model are visible only to yourself; they are not persisted.
<p>Note: The model may be used for more than one instance of an item displayed in the scene. Modifying the model updates
all instances displayed.</p>

<p>Create using the {@link Graphics} API or {@link GraphicsModel.cloneModel}.</p>
 * @property objectID - The ID of the entity or avatar that the model is associated with, if any; <code>null</code>
    if the model is not associated with an entity or avatar.
    <em>Read-only.</em>
 * @property numMeshes - The number of meshes in the model.
    <em>Read-only.</em>
 * @property meshes - The meshes in the model. Each mesh may have more than one mesh part.
    <em>Read-only.</em>
 * @property materialNames - The names of the materials used by each mesh part in the model. The names are in
    the order of the <code>meshes</code> and their mesh parts.
    <em>Read-only.</em>
 * @property materialLayers - The mapping from mesh parts and material
    names to material layers. The mesh parts are numbered from <code>"0"</code> per the array indexes of
    <code>materialNames</code>. The material names are those used in <code>materialNames</code>. (You can look up a
    material layer by mesh part number or by material name.)
    <em>Read-only.</em>
 */
declare class GraphicsModel {
    /**
     * Makes a copy of the model.
     * @param [options] - <em>Not used.</em>
     * @returns A copy of the model.
     */
    static cloneModel(options?: any): GraphicsModel;
    /**
     * Gets a string description of the model.
     * @example
     * <caption>Report the string description of your avatar's model.</caption>
    var model = Graphics.getModel(MyAvatar.sessionUUID);
    print("Avatar model info:", model.toString());
     *
     * @returns A string description of the model.
     */
    static toString(): string;
    /**
     * The ID of the entity or avatar that the model is associated with, if any; <code>null</code>
     * if the model is not associated with an entity or avatar.
     * <em>Read-only.</em>
    */
    objectID: Uuid;
    /**
     * The number of meshes in the model.
     * <em>Read-only.</em>
    */
    numMeshes: number;
    /**
     * The meshes in the model. Each mesh may have more than one mesh part.
     * <em>Read-only.</em>
    */
    meshes: GraphicsMesh[];
    /**
     * The names of the materials used by each mesh part in the model. The names are in
     * the order of the <code>meshes</code> and their mesh parts.
     * <em>Read-only.</em>
    */
    materialNames: string[];
    /**
     * The mapping from mesh parts and material
     * names to material layers. The mesh parts are numbered from <code>"0"</code> per the array indexes of
     * <code>materialNames</code>. The material names are those used in <code>materialNames</code>. (You can look up a
     * material layer by mesh part number or by material name.)
     * <em>Read-only.</em>
    */
    materialLayers: {
        [key: string]: Graphics.MaterialLayer[];
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>TextureCache</code> API manages texture cache resources.
 * @property numTotal - Total number of total resources. <em>Read-only.</em>
 * @property numCached - Total number of cached resource. <em>Read-only.</em>
 * @property sizeTotal - Size in bytes of all resources. <em>Read-only.</em>
 * @property sizeCached - Size in bytes of all cached resources. <em>Read-only.</em>
 * @property numGlobalQueriesPending - Total number of global queries pending (across all resource cache managers).
    <em>Read-only.</em>
 * @property numGlobalQueriesLoading - Total number of global queries loading (across all resource cache managers).
    <em>Read-only.</em>
 */
declare namespace TextureCache {
    /**
     * <p>Describes the type of texture.</p>
    <p>See also: {@link Material} and
    {@link https://docs.overte.org/create/3d-models/pbr-materials-guide.html|PBR Materials Guide}.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>Default</td><td>Basic color.</td></tr>
        <tr><td><code>1</code></td><td>Strict</td><td>Basic color. Quality never downgraded.</td></tr>
        <tr><td><code>2</code></td><td>Albedo</td><td>Color for PBR.</td></tr>
        <tr><td><code>3</code></td><td>Normal</td><td>Normal map.</td></tr>
        <tr><td><code>4</code></td><td>Bump</td><td>Bump map.</td></tr>
        <tr><td><code>5</code></td><td>Specular or metallic</td><td>Metallic or not.</td></tr>
        <tr><td><code>6</code></td><td>Roughness</td><td>Rough or matte.</td></tr>
        <tr><td><code>7</code></td><td>Gloss</td><td>Gloss or shine.</td></tr>
        <tr><td><code>8</code></td><td>Emissive</td><td>The amount of light reflected.</td></tr>
        <tr><td><code>9</code></td><td>Cube</td><td>Cubic image for sky boxes.</td></tr>
        <tr><td><code>10</code></td><td>Occlusion or scattering</td><td>How objects or human skin interact with light.</td></tr>
        <tr><td><code>11</code></td><td>Lightmap</td><td>Light map.</td></tr>
        <tr><td><code>12</code></td><td>Unused</td><td>Texture is not currently used.</td></tr>
      </tbody>
    </table>
     */
    type TextureType = number;
    /**
     * Prefetches a texture resource of specific type.
     * @param url - The URL of the texture to prefetch.
     * @param type - The type of the texture.
     * @param [maxNumPixels = 67108864] - The maximum number of pixels to use for the image. If the texture has more
        than this number it is downscaled.
     * @returns A resource object.
     */
    function prefetch(url: string, type: TextureCache.TextureType, maxNumPixels?: number): ResourceObject;
    /**
     * Gets the URLs of all resources in the cache.
     * @example
     * <caption>Report cached resources.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    
    var cachedResources = AnimationCache.getResourceList();
    print("Cached resources: " + JSON.stringify(cachedResources));
     * @returns The URLs of all resources in the cache.
     */
    function getResourceList(): string[];
    /**
     * @param deltaSize - Delta size.
     */
    function updateTotalSize(deltaSize: number): void;
    /**
     * Prefetches a resource.
     * @example
     * <caption>Prefetch a resource and wait until it has loaded.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    // TextureCache has its own version of this function.
    
    var resourceURL = "https://cdn-1.vircadia.com/eu-c-1/vircadia-public/clement/production/animations/sitting_idle.fbx";
    var resourceObject = AnimationCache.prefetch(resourceURL);
    
    function checkIfResourceLoaded(state) {
        if (state === Resource.State.FINISHED) {
            print("Resource loaded and ready.");
        } else if (state === Resource.State.FAILED) {
            print("Resource not loaded.");
        }
    }
    
    // Resource may have already been loaded.
    print("Resource state: " + resourceObject.state);
    checkIfResourceLoaded(resourceObject.state);
    
    // Resource may still be loading.
    resourceObject.stateChanged.connect(function (state) {
        print("Resource state changed to: " + state);
        checkIfResourceLoaded(state);
    });
     * @param url - The URL of the resource to prefetch.
     * @returns A resource object.
     */
    function prefetch(url: string): ResourceObject;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Midi</code> API provides the ability to connect Interface with musical instruments and other external or virtual
devices via the MIDI protocol. For further information and examples, see the tutorial:
<a href="https://docs.overte.org/script/midi-tutorial.html">Use MIDI to Control Your Environment</a>.

<p><strong>Note:</strong> Only works on Windows.</p>
 */
declare namespace Midi {
    /**
     * A MIDI message.
    <p><strong>Warning:</strong> The <code>status</code> property is NOT a MIDI status value.</p>
     */
    type MidiMessage = {
        /**
         * Device number.
         */
        device: number;
        /**
         * Raw MIDI message.
         */
        raw: Midi.RawMidiMessage;
        /**
         * Channel + status. <em>Legacy value.</em>
         */
        status: number;
        /**
         * Channel: <code>1</code> &ndash; <code>16</code>.
         */
        channel: number;
        /**
         * Status: {@link Midi.MidiStatus}; <code>8</code> &ndash; <code>15</code>.
         */
        type: number;
        /**
         * Note: <code>0</code> &ndash; <code>127</code>.
         */
        note: number;
        /**
         * Note velocity: <code>0</code> &ndash; <code>127</code>. (<code>0</code> means "note off".)
         */
        velocity: number;
        /**
         * Pitch bend: <code>-8192</code> &ndash; <code>8191</code>.
         */
        bend: number;
        /**
         * Program change: <code>0</code> &ndash; <code>127</code>.
         */
        program: number;
    };
    /**
     * An integer DWORD (unsigned 32 bit) message with bits having values as follows:
    <table>
      <tbody>
        <tr>
          <td width=25%><code>00000000</code></td>
          <td width=25%><code>0vvvvvvv</code></td>
          <td width=25%><code>0nnnnnnn</code></td>
          <td width=12%><code>1sss</code></td>
          <td width=12%><code>cccc</code></td>
      </tbody>
    </table>
    <p>Where:</p>
    <ul>
      <li><code>v</code> = Velocity.
      <li><code>n</code> = Note.
      <li><code>s</code> = Status - {@link Midi.MidiStatus}
      <li><code>c</code> = Channel.
    </ul>
    <p>The number in the first bit of each byte denotes whether it is a command (1) or data (0).
     */
    type RawMidiMessage = number;
    /**
     * <p>A MIDI status value. The following MIDI status values are supported:</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>8</code></td><td>Note off.</td></tr>
        <tr><td><code>9</code></td><td>Note on.</td></tr>
        <tr><td><code>10</code></td><td>Polyphonic key pressure.</td></tr>
        <tr><td><code>11</code></td><td>Control change.</td></tr>
        <tr><td><code>12</code></td><td>Program change.</td></tr>
        <tr><td><code>13</code></td><td>Channel pressure.</td></tr>
        <tr><td><code>14</code></td><td>Pitch bend.</td></tr>
        <tr><td><code>15</code></td><td>System message.</td></tr>
      </tbody>
    </table>
     */
    type MidiStatus = number;
    /**
     * Sends a raw MIDI packet to a particular device.
     * @param device - Integer device number.
     * @param raw - Raw MIDI message.
     */
    function sendRawDword(device: number, raw: Midi.RawMidiMessage): void;
    /**
     * Sends a MIDI message to a particular device.
     * @param device - Integer device number.
     * @param channel - Integer channel number.
     * @param type - Integer status value.
     * @param note - Note number.
     * @param velocity - Note velocity. (<code>0</code> means "note off".)
     */
    function sendMidiMessage(device: number, channel: number, type: Midi.MidiStatus, note: number, velocity: number): void;
    /**
     * Plays a note on all connected devices.
     * @param status - Note status.
     * @param note - Note number.
     * @param velocity - Note velocity. (<code>0</code> means "note off".)
     */
    function playMidiNote(status: MidiStatus, note: number, velocity: number): void;
    /**
     * Turns off all notes on all connected MIDI devices.
     */
    function allNotesOff(): void;
    /**
     * Cleans up and rediscovers attached MIDI devices.
     */
    function resetDevices(): void;
    /**
     * Gets a list of MIDI input or output devices.
     * @param output - <code>true</code> to list output devices, <code>false</code> to list input devices.
     */
    function listMidiDevices(output: boolean): string[];
    /**
     * Blocks a MIDI device's input or output.
     * @param name - The name of the MIDI device to block.
     * @param output - <code>true</code> to block the device's output, <code>false</code> to block its input.
     */
    function blockMidiDevice(name: string, output: boolean): void;
    /**
     * Unblocks a MIDI device's input or output.
     * @param name - The name of the MIDI device to unblock.
     * @param output - <code>true</code> to unblock the device's output, <code>false</code> to unblock its input.
     */
    function unblockMidiDevice(name: string, output: boolean): void;
    /**
     * Enables or disables repeating all incoming notes to all outputs. (Default is disabled.)
     * @param enable - <code>true</code> to enable repeating all incoming notes to all output, <code>false</code> to
        disable.
     */
    function thruModeEnable(enable: boolean): void;
    /**
     * Enables or disables broadcasts to all unblocked devices.
     * @param enable - <code>true</code> to have "send" functions broadcast to all devices, <code>false</code> to
        have them send to specific output devices.
     */
    function broadcastEnable(enable: boolean): void;
    /**
     * Enables or disables note off events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typeNoteOffEnable(enable: boolean): void;
    /**
     * Enables or disables note on events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typeNoteOnEnable(enable: boolean): void;
    /**
     * Enables or disables poly key pressure events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typePolyKeyPressureEnable(enable: boolean): void;
    /**
     * Enables or disables control change events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typeControlChangeEnable(enable: boolean): void;
    /**
     * Enables or disables program change events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typeProgramChangeEnable(enable: boolean): void;
    /**
     * Enables or disables channel pressure events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typeChanPressureEnable(enable: boolean): void;
    /**
     * Enables or disables pitch bend events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typePitchBendEnable(enable: boolean): void;
    /**
     * Enables or disables system message events.
     * @param enable - <code>true</code> to enable, <code>false</code> to disable.
     */
    function typeSystemMessageEnable(enable: boolean): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>ModelCache</code> API manages model cache resources.
 * @property numTotal - Total number of total resources. <em>Read-only.</em>
 * @property numCached - Total number of cached resource. <em>Read-only.</em>
 * @property sizeTotal - Size in bytes of all resources. <em>Read-only.</em>
 * @property sizeCached - Size in bytes of all cached resources. <em>Read-only.</em>
 * @property numGlobalQueriesPending - Total number of global queries pending (across all resource cache managers).
    <em>Read-only.</em>
 * @property numGlobalQueriesLoading - Total number of global queries loading (across all resource cache managers).
    <em>Read-only.</em>
 */
declare namespace ModelCache {
    /**
     * Gets the URLs of all resources in the cache.
     * @example
     * <caption>Report cached resources.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    
    var cachedResources = AnimationCache.getResourceList();
    print("Cached resources: " + JSON.stringify(cachedResources));
     * @returns The URLs of all resources in the cache.
     */
    function getResourceList(): string[];
    /**
     * @param deltaSize - Delta size.
     */
    function updateTotalSize(deltaSize: number): void;
    /**
     * Prefetches a resource.
     * @example
     * <caption>Prefetch a resource and wait until it has loaded.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    // TextureCache has its own version of this function.
    
    var resourceURL = "https://cdn-1.vircadia.com/eu-c-1/vircadia-public/clement/production/animations/sitting_idle.fbx";
    var resourceObject = AnimationCache.prefetch(resourceURL);
    
    function checkIfResourceLoaded(state) {
        if (state === Resource.State.FINISHED) {
            print("Resource loaded and ready.");
        } else if (state === Resource.State.FAILED) {
            print("Resource not loaded.");
        }
    }
    
    // Resource may have already been loaded.
    print("Resource state: " + resourceObject.state);
    checkIfResourceLoaded(resourceObject.state);
    
    // Resource may still be loading.
    resourceObject.stateChanged.connect(function (state) {
        print("Resource state changed to: " + state);
        checkIfResourceLoaded(state);
    });
     * @param url - The URL of the resource to prefetch.
     * @returns A resource object.
     */
    function prefetch(url: string): ResourceObject;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>location</code> API provides facilities related to your current location in the directory services.

<h3>Getter/Setter</h3>
<p>You can get and set your current directory services address by directly reading a string value from and writing a string value to
the <code>location</code> object. This is an alternative to using the <code>location.href</code> property or other object
functions.</p>
 * @property domainID - A UUID uniquely identifying the domain you're visiting. Is {@link Uuid(0)|Uuid.NULL} if you're not
    connected to the domain or are in a serverless domain.
    <em>Read-only.</em>
 * @property hostname - The name of the domain for your current directory services address (e.g., <code>"DomainName"</code>,
    <code>localhost</code>, or an IP address). Is blank if you're in a serverless domain.
    <em>Read-only.</em>
 * @property href - Your current directory services address (e.g., <code>"hifi://domainname/15,-10,26/0,0,0,1"</code>)
    regardless of whether or not you're connected to the domain. Starts with <code>"file:///"</code> if you're in a
    serverless domain.
    <em>Read-only.</em>
 * @property isConnected - <code>true</code> if you're connected to the domain in your current <code>href</code>
    directory services address, otherwise <code>false</code>.
 * @property pathname - The location and orientation in your current <code>href</code> directory services address
    (e.g., <code>"/15,-10,26/0,0,0,1"</code>).
    <em>Read-only.</em>
 * @property placename - The place name in your current <code>href</code> directory services address
    (e.g., <code>"DomainName"</code>). Is blank if your <code>hostname</code> is an IP address.
    <em>Read-only.</em>
 * @property protocol - The protocol of your current <code>href</code> directory services address (e.g., <code>"hifi"</code>).
    <em>Read-only.</em>
 */
declare namespace location {
    /**
     * <p>The reasons for an address lookup via the Directory Services API are defined by numeric values:</p>
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><strong>UserInput</strong></td>
          <td><code>0</code></td>
          <td>User-typed input.</td>
        </tr>
        <tr>
          <td><strong>Back</strong></td>
          <td><code>1</code></td>
          <td>Address from a {@link location.goBack|goBack} call.</td>
        </tr>
        <tr>
          <td><strong>Forward</strong></td>
          <td><code>2</code></td>
          <td>Address from a {@link location.goForward|goForward} call.</td>
        </tr>
        <tr>
          <td><strong>StartupFromSettings</strong></td>
          <td><code>3</code></td>
          <td>Initial location at Interface start-up from settings.</td>
        </tr>
        <tr>
          <td><strong>DomainPathResponse</strong></td>
          <td><code>4</code></td>
          <td>A named path in the domain.</td>
        </tr>
        <tr>
          <td><strong>Internal</strong></td>
          <td><code>5</code></td>
          <td>An internal attempt to resolve an alternative path.</td>
        </tr>
        <tr>
          <td><strong>AttemptedRefresh</strong></td>
          <td><code>6</code></td>
          <td>A refresh after connecting to a domain.</td>
        </tr>
        <tr>
          <td><strong>Suggestions</strong></td>
          <td><code>7</code></td>
          <td>Address from the Goto dialog.</td>
        </tr>
        <tr>
          <td><strong>VisitUserFromPAL</strong></td>
          <td><code>8</code></td>
          <td>User from the People dialog.</td>
        </tr>
      </tbody>
    </table>
     */
    type LookupTrigger = number;
    /**
     * Takes you to a specified directory services address.
     * @param address - The address to go to: a <code>"hifi://"</code> address, an IP address (e.g.,
        <code>"127.0.0.1"</code> or <code>"localhost"</code>), a <code>file:///</code> address, a domain name, a named path
        on a domain (starts with <code>"/"</code>), a position or position and orientation, or a user (starts with
        <code>"@"</code>).
     * @param [fromSuggestions = false] - Set to <code>true</code> if the address is obtained from the "Explore" app.
        Helps ensure that the user's location history is correctly maintained.
     */
    function handleLookupString(address: string, fromSuggestions?: boolean): void;
    /**
     * Takes you to a position and orientation resulting from a lookup for a named path in the domain (set in the domain
    server's settings).
     * @param path - The position and orientation corresponding to the named path.
     * @param namedPath - The named path that was looked up on the server.
     */
    function goToViewpointForPath(path: string, namedPath: string): void;
    /**
     * Takes you back to the previous location in your navigation history, if there is one.
     */
    function goBack(): void;
    /**
     * Takes you forward to the next location in your navigation history, if there is one.
     */
    function goForward(): void;
    /**
     * Takes you to the local Sandbox server that's running on the same PC as Interface.
     * @param [path = ""] - The position and orientation to go to (e.g., <code>"/0,0,0"</code>).
     * @param [trigger = StartupFromSettings] - The reason for the function call. Helps ensure that user's
        location history is correctly maintained.
     */
    function goToLocalSandbox(path?: string, trigger?: location.LookupTrigger): void;
    /**
     * Takes you to the default "welcome" directory services address.
     * @param trigger - The reason for the function call. Helps ensure that user's
        location history is correctly maintained.
     */
    function goToEntry(trigger?: location.LookupTrigger): void;
    /**
     * Takes you to the specified user's location.
     * @param username - The user's username.
     * @param [matchOrientation = true] - If <code>true</code> then go to a location just in front of the user and turn
        to face them, otherwise go to the user's exact location and orientation.
     */
    function goToUser(username: string, matchOrientation?: boolean): void;
    /**
     * Takes you to the last address tried. This will be the last URL tried from <code>location.handleLookupString</code>.
     */
    function goToLastAddress(): void;
    /**
     * Checks if going back to the previous location is possible.
     * @returns <code>true</code> if going back is possible, <code>false</code> if it isn't.
     */
    function canGoBack(): boolean;
    /**
     * Refreshes the current address, e.g., after connecting to a domain in order to position the user to the desired location.
     */
    function refreshPreviousLookup(): void;
    /**
     * Updates your current directory services location in Interface's {@link Settings} file as your last-known address. This can be used
    to ensure that you start up at that address if you exit Interface without a later address automatically being saved.
     */
    function storeCurrentAddress(): void;
    /**
     * Copies your current directory services address (i.e., <code>location.href</code> property value) to the OS clipboard.
     */
    function copyAddress(): void;
    /**
     * Copies your current directory services location and orientation (i.e., <code>location.pathname</code> property value) to the OS
    clipboard.
     */
    function copyPath(): void;
    /**
     * Retrieves and remembers the place name for the given domain ID if the place name is not already known.
     * @param domainID - The UUID of the domain.
     */
    function lookupShareableNameForDomainID(domainID: Uuid): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AddressManager</code> API provides facilities related to your current location in the directory services.
 * @property domainID - A UUID uniquely identifying the domain you're visiting. Is {@link Uuid(0)|Uuid.NULL} if you're not
    connected to the domain or are in a serverless domain.
    <em>Read-only.</em>
 * @property hostname - The name of the domain for your current directory services address (e.g., <code>"DomainName"</code>,
    <code>localhost</code>, or an IP address). Is blank if you're in a serverless domain.
    <em>Read-only.</em>
 * @property href - Your current directory services address (e.g., <code>"hifi://domainname/15,-10,26/0,0,0,1"</code>)
    regardless of whether or not you're connected to the domain. Starts with <code>"file:///"</code> if you're in a
    serverless domain.
    <em>Read-only.</em>
 * @property isConnected - <code>true</code> if you're connected to the domain in your current <code>href</code>
    directory services address, otherwise <code>false</code>.
 * @property pathname - The location and orientation in your current <code>href</code> directory services address
    (e.g., <code>"/15,-10,26/0,0,0,1"</code>).
    <em>Read-only.</em>
 * @property placename - The place name in your current <code>href</code> directory services address
    (e.g., <code>"DomainName"</code>). Is blank if your <code>hostname</code> is an IP address.
    <em>Read-only.</em>
 * @property protocol - The protocol of your current <code>href</code> directory services address (e.g., <code>"hifi"</code>).
    <em>Read-only.</em>
 */
declare namespace AddressManager {
    /**
     * Takes you to a specified directory services address.
     * @param address - The address to go to: a <code>"hifi://"</code> address, an IP address (e.g.,
        <code>"127.0.0.1"</code> or <code>"localhost"</code>), a <code>file:///</code> address, a domain name, a named path
        on a domain (starts with <code>"/"</code>), a position or position and orientation, or a user (starts with
        <code>"@"</code>).
     * @param [fromSuggestions = false] - Set to <code>true</code> if the address is obtained from the "Explore" app.
        Helps ensure that the user's location history is correctly maintained.
     */
    function handleLookupString(address: string, fromSuggestions?: boolean): void;
    /**
     * Takes you to a position and orientation resulting from a lookup for a named path in the domain (set in the domain
    server's settings).
     * @param path - The position and orientation corresponding to the named path.
     * @param namedPath - The named path that was looked up on the server.
     */
    function goToViewpointForPath(path: string, namedPath: string): void;
    /**
     * Takes you back to the previous location in your navigation history, if there is one.
     */
    function goBack(): void;
    /**
     * Takes you forward to the next location in your navigation history, if there is one.
     */
    function goForward(): void;
    /**
     * Takes you to the local Sandbox server that's running on the same PC as Interface.
     * @param [path = ""] - The position and orientation to go to (e.g., <code>"/0,0,0"</code>).
     * @param [trigger = StartupFromSettings] - The reason for the function call. Helps ensure that user's
        location history is correctly maintained.
     */
    function goToLocalSandbox(path?: string, trigger?: location.LookupTrigger): void;
    /**
     * Takes you to the default "welcome" directory services address.
     * @param trigger - The reason for the function call. Helps ensure that user's
        location history is correctly maintained.
     */
    function goToEntry(trigger?: location.LookupTrigger): void;
    /**
     * Takes you to the specified user's location.
     * @param username - The user's username.
     * @param [matchOrientation = true] - If <code>true</code> then go to a location just in front of the user and turn
        to face them, otherwise go to the user's exact location and orientation.
     */
    function goToUser(username: string, matchOrientation?: boolean): void;
    /**
     * Takes you to the last address tried. This will be the last URL tried from <code>location.handleLookupString</code>.
     */
    function goToLastAddress(): void;
    /**
     * Checks if going back to the previous location is possible.
     * @returns <code>true</code> if going back is possible, <code>false</code> if it isn't.
     */
    function canGoBack(): boolean;
    /**
     * Refreshes the current address, e.g., after connecting to a domain in order to position the user to the desired location.
     */
    function refreshPreviousLookup(): void;
    /**
     * Updates your current directory services location in Interface's {@link Settings} file as your last-known address. This can be used
    to ensure that you start up at that address if you exit Interface without a later address automatically being saved.
     */
    function storeCurrentAddress(): void;
    /**
     * Copies your current directory services address (i.e., <code>location.href</code> property value) to the OS clipboard.
     */
    function copyAddress(): void;
    /**
     * Copies your current directory services location and orientation (i.e., <code>location.pathname</code> property value) to the OS
    clipboard.
     */
    function copyPath(): void;
    /**
     * Retrieves and remembers the place name for the given domain ID if the place name is not already known.
     * @param domainID - The UUID of the domain.
     */
    function lookupShareableNameForDomainID(domainID: Uuid): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p><p>The <code>Messages</code> API enables text and data to be sent between scripts over named "channels". A channel can have
an arbitrary name to help separate messaging between different sets of scripts.</p>

<p><strong>Note:</strong> To call a function in another script, you should use one of the following rather than sending a
message:</p>
<ul>
  <li>{@link Entities.callEntityClientMethod}</li>
  <li>{@link Entities.callEntityMethod}</li>
  <li>{@link Entities.callEntityServerMethod}</li>
  <li>{@link Script.callEntityScriptMethod}</li>
</ul>
 */
declare namespace Messages {
    /**
     * Sends a text message on a channel.
     * @example
     * <caption>Send and receive a message.</caption>
    // Receiving script.
    var channelName = "org.overte.example.messages-example";
    
    function onMessageReceived(channel, message, sender, localOnly) {
        print("Message received:");
        print("- channel: " + channel);
        print("- message: " + message);
        print("- sender: " + sender);
        print("- localOnly: " + localOnly);
    }
    
    Messages.subscribe(channelName);
    Messages.messageReceived.connect(onMessageReceived);
    
    Script.scriptEnding.connect(function () {
        Messages.messageReceived.disconnect(onMessageReceived);
        Messages.unsubscribe(channelName);
    });
    
    
    // Sending script.
    var channelName = "org.overte.example.messages-example";
    var message = "Hello";
    Messages.sendMessage(channelName, message);
     * @param channel - The channel to send the message on.
     * @param message - The message to send.
     * @param [localOnly = false] - If <code>false</code> then the message is sent to all Interface, client entity,
        server entity, and assignment client scripts in the domain.
        <p>If <code>true</code> then: if sent from an Interface or client entity script it is received by all Interface and
        client entity scripts; if sent from a server entity script it is received by all entity server scripts; and if sent
        from an assignment client script it is received only by that same assignment client script.</p>
     */
    function sendMessage(channel: string, message: string, localOnly?: boolean): void;
    /**
     * Sends a text message locally on a channel.
    This is the same as calling {@link Messages.sendMessage|sendMessage} with <code>localOnly == true</code>.
     * @param channel - The channel to send the message on.
     * @param message - The message to send.
     */
    function sendLocalMessage(channel: string, message: string): void;
    /**
     * Sends a data message on a channel.
     * @example
     * <caption>Send and receive data.</caption>
    // Receiving script.
    var channelName = "org.overte.example.messages-example";
    
    function onDataReceived(channel, data, sender, localOnly) {
        var int8data = new Int8Array(data);
        var dataAsString = "";
        for (var i = 0; i < int8data.length; i++) {
            if (i > 0) {
                dataAsString += ", ";
            }
            dataAsString += int8data[i];
        }
        print("Data received:");
        print("- channel: " + channel);
        print("- data: " + dataAsString);
        print("- sender: " + sender);
        print("- localOnly: " + localOnly);
    }
    
    Messages.subscribe(channelName);
    Messages.dataReceived.connect(onDataReceived);
    
    Script.scriptEnding.connect(function () {
        Messages.dataReceived.disconnect(onDataReceived);
        Messages.unsubscribe(channelName);
    });
    
    
    // Sending script.
    var channelName = "org.overte.example.messages-example";
    var int8data = new Int8Array([1, 1, 2, 3, 5, 8, 13]);
    Messages.sendData(channelName, int8data.buffer);
     * @param channel - The channel to send the data on.
     * @param data - The data to send. The data is handled as a byte stream, for example, as may be provided via a
        JavaScript <code>Int8Array</code> object.
     * @param [localOnly = false] - If <code>false</code> then the message is sent to all Interface, client entity,
        server entity, and assignment client scripts in the domain.
        <p>If <code>true</code> then: if sent from an Interface or client entity script it is received by all Interface and
        client entity scripts; if sent from a server entity script it is received by all entity server scripts; and if sent
        from an assignment client script it is received only by that same assignment client script.</p>
     */
    function sendData(channel: string, data: any, localOnly?: boolean): void;
    /**
     * Subscribes the scripting environment &mdash; Interface, the entity script server, or assignment client instance &mdash;
    to receive messages on a specific channel. This means, for example, that if there are two Interface scripts that
    subscribe to different channels, both scripts will receive messages on both channels.
     * @param channel - The channel to subscribe to.
     */
    function subscribe(channel: string): void;
    /**
     * Unsubscribes the scripting environment from receiving messages on a specific channel.
     * @param channel - The channel to unsubscribe from.
     */
    function unsubscribe(channel: string): void;

    /**
     * Triggered when a text message is received.
     *
     * @param channel - The channel that the message was sent on. This can be used to filter out messages not relevant to your script.
     * @param message - The message received.
     * @param senderID - The UUID of the sender: the user's session UUID if sent by an Interface or client entity script, the UUID of the entity script server if sent by a server entity script, or the UUID of the assignment client instance if sent by an assignment client script.
     * @param localOnly - true if the message was sent with localOnly == true.
     */
    const messageReceived: Signal<[channel: string, message: string, senderID: Uuid, localOnly: boolean]>;
    
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Information about a cached resource. Created by {@link AnimationCache.prefetch}, {@link MaterialCache.prefetch},
{@link ModelCache.prefetch}, {@link SoundCache.prefetch}, or {@link TextureCache.prefetch}.
 * @property url - URL of the resource. <em>Read-only.</em>
 * @property state - Current loading state. <em>Read-only.</em>
 */
declare class ResourceObject {
    /**
     * Releases the resource.
     */
    release(): void;
    /**
     * URL of the resource. <em>Read-only.</em>
    */
    url: string;
    /**
     * Current loading state. <em>Read-only.</em>
    */
    state: Resource.State;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Resources</code> API enables the default location for different resource types to be overridden.
 */
declare namespace Resources {
    /**
     * Overrides a path prefix with an alternative path.
     * @param prefix - The path prefix to override, e.g., <code>"atp:/"</code>.
     * @param replacement - The replacement path for the prefix.
     */
    function overrideUrlPrefix(prefix: string, replacement: string): void;
    /**
     * Restores the default path for a specified prefix.
     * @param prefix - The prefix of the resource to restore the path for.
     */
    function restoreUrlPrefix(prefix: string): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Steam</code> API provides facilities for working with the Steam version of Interface.
 * @property running - <code>true</code> if Interface is running under Steam, <code>false</code> if it isn't.
    <em>Read-only.</em>
 */
declare namespace Steam {
    /**
     * Gets whether Interface is running under Steam.
     * @returns <code>true</code> if Interface is running under Steam, <code>false</code> if it isn't.
     */
    function isRunning(): boolean;
    /**
     * Opens Steam's "Choose Friends to invite" dialog if Interface is running under Steam.
     * @example
     * <caption>Invite Steam friends to join you in Overte.</caption>
    if (Steam.running) {
        print("Invite Steam friends to joint you...");
        Steam.openInviteOverlay();
    } else {
        print("Interface isn't running under Steam.");
    }
     *
     */
    function openInviteOverlay(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>MaterialCache</code> API manages material cache resources.
 * @property numTotal - Total number of total resources. <em>Read-only.</em>
 * @property numCached - Total number of cached resource. <em>Read-only.</em>
 * @property sizeTotal - Size in bytes of all resources. <em>Read-only.</em>
 * @property sizeCached - Size in bytes of all cached resources. <em>Read-only.</em>
 * @property numGlobalQueriesPending - Total number of global queries pending (across all resource cache managers).
    <em>Read-only.</em>
 * @property numGlobalQueriesLoading - Total number of global queries loading (across all resource cache managers).
    <em>Read-only.</em>
 */
declare namespace MaterialCache {
    /**
     * Gets the URLs of all resources in the cache.
     * @example
     * <caption>Report cached resources.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    
    var cachedResources = AnimationCache.getResourceList();
    print("Cached resources: " + JSON.stringify(cachedResources));
     * @returns The URLs of all resources in the cache.
     */
    function getResourceList(): string[];
    /**
     * @param deltaSize - Delta size.
     */
    function updateTotalSize(deltaSize: number): void;
    /**
     * Prefetches a resource.
     * @example
     * <caption>Prefetch a resource and wait until it has loaded.</caption>
    // Replace AnimationCache with MaterialCache, ModelCache, SoundCache, or TextureCache as appropriate.
    // TextureCache has its own version of this function.
    
    var resourceURL = "https://cdn-1.vircadia.com/eu-c-1/vircadia-public/clement/production/animations/sitting_idle.fbx";
    var resourceObject = AnimationCache.prefetch(resourceURL);
    
    function checkIfResourceLoaded(state) {
        if (state === Resource.State.FINISHED) {
            print("Resource loaded and ready.");
        } else if (state === Resource.State.FAILED) {
            print("Resource not loaded.");
        }
    }
    
    // Resource may have already been loaded.
    print("Resource state: " + resourceObject.state);
    checkIfResourceLoaded(resourceObject.state);
    
    // Resource may still be loading.
    resourceObject.stateChanged.connect(function (state) {
        print("Resource state changed to: " + state);
        checkIfResourceLoaded(state);
    });
     * @param url - The URL of the resource to prefetch.
     * @returns A resource object.
     */
    function prefetch(url: string): ResourceObject;
}

/**
 * An object containing user-defined uniforms for communicating data to shaders.
 */
declare type ProceduralUniforms = any;

/**
 * The data used to define a Procedural shader material.
 */
declare type ProceduralData = {
    /**
     * The version of the procedural shader.
     * @defaultValue 1
     */
    version: number;
    /**
     * A link to a vertex shader.  Currently, only GLSL shaders are supported.  The shader must implement a different method depending on the version.
     * If a procedural material contains a vertex shader, the bounding box of the material entity is used to cull the object to which the material is applied.
     */
    vertexShaderURL: string;
    /**
     * A link to a fragment shader.  Currently, only GLSL shaders are supported.  The shader must implement a different method depending on the version.
     * <code>shaderUrl</code> is an alias.
     */
    fragmentShaderURL: string;
    /**
     * An array of input texture URLs or entity IDs.  Currently, up to 4 are supported.  An entity ID may be that of an Image or Web entity.
     * @defaultValue [
     */
    channels: string[];
    /**
     * A {@link ProceduralUniforms} object containing all the custom uniforms to be passed to the shader.
     * @defaultValue {}
     */
    uniforms: ProceduralUniforms;
};

/**
 * <p>An RGB or SRGB color value.</p>
<table>
  <thead>
    <tr><th>Index</th><th>Type</th><th>Attributes</th><th>Default</th><th>Value</th></tr>
  </thead>
  <tbody>
    <tr><td><code>0</code></td><td>number</td><td></td><td></td>
      <td>Red component value. Number in the range <code>0.0</code> &ndash; <code>1.0</code>.</td></tr>
    <tr><td><code>1</code></td><td>number</td><td></td><td></td>
      <td>Green component value. Number in the range <code>0.0</code> &ndash; <code>1.0</code>.</td></tr>
    <tr><td><code>2</code></td><td>number</td><td></td><td></td>
      <td>Blue component value. Number in the range <code>0.0</code> &ndash; <code>1.0</code>.</td></tr>
    <tr><td><code>3</code></td><td>boolean</td><td>&lt;optional&gt;</td><td>false</td>
      <td>If <code>true</code> then the color is an SRGB color.</td></tr>
  </tbody>
</table>
 */
declare type RGBS = any[];

/**
 * <p>The type of an intersection.</p>
<table>
  <thead>
    <tr><th>Name</th><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td>INTERSECTED_NONE</td><td><code>0</code></td><td>Intersected nothing.</td></tr>
    <tr><td>INTERSECTED_ENTITY</td><td><code>1</code></td><td>Intersected an entity.</td></tr>
    <tr><td>INTERSECTED_LOCAL_ENTITY</td><td><code>2</code></td><td>Intersected a local entity.</td></tr>
    <tr><td>INTERSECTED_AVATAR</td><td><code>3</code></td><td>Intersected an avatar.</td></tr>
    <tr><td>INTERSECTED_HUD</td><td><code>4</code></td><td>Intersected the HUD surface.</td></tr>
  </tbody>
</table>
 */
declare type IntersectionType = number;

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>PickType</code> API provides constant numeric values that represent different types of picks.
 * @property Ray - Ray picks intersect a ray with objects in front of them, along their direction.
 * @property Parabola - Parabola picks intersect a parabola with objects in front of them, along their arc.
 * @property Stylus - Stylus picks provide "tapping" functionality on or into flat surfaces.
 * @property Collision - Collision picks intersect a collision volume with avatars and entities that have
    collisions.
 */
declare namespace PickType { }

/**
 * <p>A type of pick.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>{@link PickType(0)|PickType.Ray}</code></td><td>Ray picks intersect a ray with objects in front of
      them, along their direction.</td></tr>
    <tr><td><code>{@link PickType(0)|PickType.Parabola}</code></td><td>Parabola picks intersect a parabola with objects
      in front of them, along their arc.</td></tr>
    <tr><td><code>{@link PickType(0)|PickType.Stylus}</code></td><td>Stylus picks provide "tapping" functionality on or
      into flat surfaces.</td></tr>
    <tr><td><code>{@link PickType(0)|PickType.Collision}</code></td><td>Collision picks intersect a collision volume
      with avatars and entities that have collisions.</td></tr>
  </tbody>
</table>
 */
declare type PickType = number;

/**
 * Antialiasing modes. <table>
  <thead>
    <tr><th>Value</th><th>Name</th><th>Description</th>
  </thead>
  <tbody>
    <tr><td><code>0</code></td><td>NONE</td><td>Antialiasing is disabled.</td></tr>
    <tr><td><code>1</code></td><td>TAA</td><td>Temporal Antialiasing.</td></tr>
    <tr><td><code>2</code></td><td>FXAA</td><td>FXAA.</td></tr>
    <tr><td><code>3</code></td><td>MODE_COUNT</td><td>Inducates number of antialiasing modes</td></tr>
  </tbody>
</table>
 */
declare type AntialiasingMode = number;

/**
 * A submesh intersection point.
 */
declare type SubmeshIntersection = {
    /**
     * The intersection point in world coordinates.
     */
    worldIntersectionPoint: TVec3;
    /**
     * The intersection point in model coordinates.
     */
    meshIntersectionPoint: TVec3;
    /**
     * The index of the intersected mesh part within the submesh.
     */
    partIndex: number;
    /**
     * The index of the mesh part within the model.
     */
    shapeID: number;
    /**
     * The index of the intersected submesh within the model.
     */
    subMeshIndex: number;
    /**
     * The name of the intersected submesh.
     */
    subMeshName: string;
    /**
     * The vertices of the intersected mesh part triangle in world coordinates.
     */
    subMeshTriangleWorld: Triangle;
    /**
     * The normal of the intersected mesh part triangle in model coordinates.
     */
    subMeshNormal: TVec3;
    /**
     * The vertices of the intersected mesh part triangle in model coordinates.
     */
    subMeshTriangle: Triangle;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Assets</code> API provides facilities for interacting with the domain's asset server and the client cache.
<p>Assets are stored in the asset server in files with SHA256 names. These files are mapped to user-friendly URLs of the
format: <code>atp:/path/filename</code>. The assets may optionally be baked, in which case a request for the original
unbaked version of the asset is automatically redirected to the baked version. The asset data may optionally be stored as
compressed.</p>
<p>The client cache can be accessed directly, using <code>"atp:"</code> or <code>"cache:"</code> URLs. Interface, avatar,
and assignment client scripts can write to the cache. All script types can read from the cache.</p>
 */
declare namespace Assets {
    /**
     * Cache status value returned by {@link Assets.getCacheStatus}.
     */
    type GetCacheStatusResult = {
        /**
         * The path of the cache directory.
         */
        cacheDirectory: string;
        /**
         * The current cache size, in bytes.
         */
        cacheSize: number;
        /**
         * The maximum cache size, in bytes.
         */
        maximumCacheSize: number;
    };
    /**
     * Information on an asset in the cache. Value returned by {@link Assets.queryCacheMeta} and included in the data returned by
    {@link Assets.loadFromCache}.
     */
    type CacheItemMetaData = {
        /**
         * The attributes that are stored with this cache item. <em>Not used.</em>
         */
        attributes?: any;
        /**
         * The date and time when the meta data expires. An invalid date means "never expires".
         */
        expirationDate?: Date;
        /**
         * <code>true</code> if the item specified in the URL is in the cache, <code>false</code> if
         * it isn't.
         */
        isValid: boolean;
        /**
         * The date and time when the meta data was last modified.
         */
        lastModified?: Date;
        /**
         * The raw headers that are set in the meta data. <em>Not used.</em>
         */
        rawHeaders?: any;
        /**
         * <code>true</code> if the cache item is allowed to be store on disk,
         * <code>false</code> if it isn't.
         */
        saveToDisk?: boolean;
        /**
         * The ATP URL of the cached item.
         */
        url?: string;
        /**
         * The ATP URL of the cached item.
         */
        metaDataURL?: string;
    };
    /**
     * Last-modified and expiry times for a cache item.
     */
    type SaveToCacheHeaders = {
        /**
         * The date and time the cache value expires, in the format:
         * <code>"ddd, dd MMM yyyy HH:mm:ss"</code>. The default value is an invalid date, representing "never expires".
         */
        expires?: string;
        /**
         * The date and time the cache value was last modified, in the format:
         * <code>"ddd, dd MMM yyyy HH:mm:ss"</code>. The default value is the current date and time.
         */
        'last-modified'?: string;
    };
    /**
     * Information on saving asset data to the cache with {@link Assets.saveToCache}.
     */
    type SaveToCacheResult = {
        /**
         * The size of the cached data, in bytes.
         */
        byteLength?: number;
        /**
         * The date and time that the cache item expires. An invalid date means "never expires".
         */
        expirationDate?: Date;
        /**
         * The date and time that the cache item was last modified.
         */
        lastModified?: Date;
        /**
         * The URL associated with the cache item.
         */
        metaDataURL?: string;
        /**
         * <code>true</code> if the save to cache request was successful.
         */
        success?: boolean;
        /**
         * The URL associated with the cache item.
         */
        url?: string;
    };
    /**
     * Data and information returned by {@link Assets.loadFromCache}.
     */
    type LoadFromCacheResult = {
        /**
         * The number of bytes in the retrieved data.
         */
        byteLength?: number;
        /**
         * The automatically detected MIME type of the content.
         */
        contentType?: string;
        /**
         * The data bytes.
         */
        data: ArrayBuffer;
        /**
         * Information on the cache item.
         */
        metadata: Assets.CacheItemMetaData;
        /**
         * The content of the response.
         */
        response?: string | any | ArrayBuffer;
        /**
         * The type of the content in <code>response</code>.
         */
        responseType: Assets.ResponseType;
        /**
         * The URL of the cache item.
         */
        url: string;
    };
    /**
     * <p>Types of response that {@link Assets.decompressData}, {@link Assets.getAsset}, or {@link Assets.loadFromCache} may
    provide.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"arraybuffer"</code></td><td>A binary <code>ArrayBuffer</code> object.</td></tr>
        <tr><td><code>"json"</code></td><td>A parsed <code>JSON</code> object.</td></tr>
        <tr><td><code>"text"</code></td><td>UTF-8 decoded <code>string</code> value.</td></tr>
      </tbody>
    </table>
     */
    type ResponseType = string;
    /**
     * Checks whether a string is a valid path. Note: A valid path must start with a <code>"/"</code>.
     * @param path - The path to check.
     * @returns <code>true</code> if the path is a valid path, <code>false</code> if it isn't.
     */
    function isValidPath(path: string): boolean;
    /**
     * Checks whether a string is a valid path and filename. Note: A valid path and filename must start with a <code>"/"</code>
    but must not end with a <code>"/"</code>.
     * @param path - The path to check.
     * @returns <code>true</code> if the path is a valid file path, <code>false</code> if it isn't.
     */
    function isValidFilePath(path: string): boolean;
    /**
     * Gets the normalized ATP URL for a path or hash: ensures that it has <code>"atp:"</code> at the start.
     * @param url - The URL to normalize.
     * @returns The normalized ATP URL.
     */
    function getATPUrl(url: string): string;
    /**
     * Gets the SHA256 hexadecimal hash portion of an asset server URL.
     * @param url - The URL to get the SHA256 hexadecimal hash from.
     * @returns The SHA256 hexadecimal hash portion of the URL if present and valid, <code>""</code> otherwise.
     */
    function extractAssetHash(url: string): string;
    /**
     * Checks whether a string is a valid SHA256 hexadecimal hash, i.e., 64 hexadecimal characters.
     * @param hash - The hash to check.
     * @returns <code>true</code> if the hash is a valid SHA256 hexadecimal string, <code>false</code> if it isn't.
     */
    function isValidHash(hash: string): boolean;
    /**
     * Calculates the SHA256 hash of given data.
     * @param data - The data to calculate the hash of.
     * @returns The SHA256 hash of the <code>data</code>.
     */
    function hashData(data: string | ArrayBuffer): ArrayBuffer;
    /**
     * Calculates the SHA256 hash of given data, in hexadecimal format.
     * @example
     * <caption>Calculate the hash of some text.</caption>
    var text = "Hello world!";
    print("Hash: " + Assets.hashDataHex(text));
     *
     * @param data - The data to calculate the hash of.
     * @returns The SHA256 hash of the <code>data</code>, in hexadecimal format.
     */
    function hashDataHex(data: string | ArrayBuffer): string;
    /**
     * The success or failure of an {@link Assets.downloadData} call.
     */
    type DownloadDataError = {
        /**
         * <code>""</code> if the download was successful, otherwise a description of the error.
         */
        errorMessage: string;
    };
    /**
     * Source and download options for {@link Assets.getAsset}.
     */
    type GetOptions = {
        /**
         * <code>true</code> to gunzip decompress the downloaded data. Synonym:
         * <code>compressed</code>.
         */
        decompress?: boolean;
        /**
         * The desired result type.
         * @defaultValue "text"
         */
        responseType?: Assets.ResponseType;
        /**
         * The mapped path or hash to download. May have a leading <code>"atp:"</code>.
         */
        url: string;
    };
    /**
     * Result value returned by {@link Assets.getAsset}.
     */
    type GetResult = {
        /**
         * The number of bytes in the downloaded content in <code>response</code>.
         */
        byteLength?: number;
        /**
         * <code>true</code> if the item was retrieved from the cache, <code>false</code> if it was
         * downloaded.
         */
        cached: boolean;
        /**
         * The automatically detected MIME type of the content.
         */
        contentType?: string;
        /**
         * <code>true</code> if the content was decompressed, <code>false</code> if it wasn't.
         */
        decompressed?: boolean;
        /**
         * The hash for the downloaded asset.
         */
        hash?: string;
        /**
         * The ATP URL of the hash file.
         */
        hashURL?: string;
        /**
         * The path for the asset, if a path was requested. Otherwise, <code>undefined</code>.
         */
        path?: string;
        /**
         * The downloaded content.
         */
        response?: string | any | ArrayBuffer;
        /**
         * The type of the downloaded content in <code>response</code>.
         */
        responseType?: Assets.ResponseType;
        /**
         * The URL of the asset requested: the path with leading <code>"atp:"</code> if a path was
         * requested, otherwise the requested URL.
         */
        url?: string;
        /**
         * <code>true</code> if the downloaded data is the baked version of the asset,
         * <code>false</code> if it isn't baked.
         */
        wasRedirected?: boolean;
    };
    /**
     * Source options for {@link Assets.resolveAsset}.
     */
    type ResolveOptions = {
        /**
         * The hash or path to resolve. May have a leading <code>"atp:"</code>.
         */
        url: string;
    };
    /**
     * Result value returned by {@link Assets.resolveAsset}.
    <p>Note: If resolving a hash, a file of that hash need not be present on the asset server for the hash to resolve.</p>
     */
    type ResolveResult = {
        /**
         * The hash of the asset.
         */
        hash?: string;
        /**
         * The url of the asset's hash file, with leading <code>atp:</code>.
         */
        hashURL?: string;
        /**
         * The path to the asset.
         */
        path?: string;
        /**
         * The URL of the asset.
         */
        url?: string;
        /**
         * <code>true</code> if the resolved data is for the baked version of the asset,
         * <code>false</code> if it isn't.
         */
        wasRedirected?: boolean;
    };
    /**
     * Content and decompression options for {@link Assets.decompressData}.
     */
    type DecompressOptions = {
        /**
         * The data to decompress.
         */
        data: ArrayBuffer;
        /**
         * The type of decompressed data to return.
         * @defaultValue text
         */
        responseType?: Assets.ResponseType;
    };
    /**
     * Result value returned by {@link Assets.decompressData}.
     */
    type DecompressResult = {
        /**
         * The number of bytes in the decompressed data.
         */
        byteLength?: number;
        /**
         * The MIME type of the decompressed data.
         */
        contentType?: string;
        /**
         * <code>true</code> if the data is decompressed.
         */
        decompressed?: boolean;
        /**
         * The decompressed data.
         */
        response?: string | any | ArrayBuffer;
        /**
         * The type of the decompressed data in <code>response</code>.
         */
        responseType?: Assets.ResponseType;
    };
    /**
     * Content and compression options for {@link Assets.compressData}.
     */
    type CompressOptions = {
        /**
         * The data to compress.
         */
        data: string | ArrayBuffer;
        /**
         * The compression level, range <code>-1</code> &ndash; <code>9</code>. <code>-1</code> means
         * use the default gzip compression level, <code>0</code> means no compression, and <code>9</code> means maximum
         * compression.
         */
        level: number;
    };
    /**
     * Result value returned by {@link Assets.compressData}.
     */
    type CompressResult = {
        /**
         * The number of bytes in the compressed data.
         */
        byteLength?: number;
        /**
         * <code>true</code> if the data is compressed.
         */
        compressed?: boolean;
        /**
         * The MIME type of the compressed data, i.e., <code>"application/gzip"</code>.
         */
        contentType?: string;
        /**
         * The compressed data.
         */
        data?: ArrayBuffer;
    };
    /**
     * Content and upload options for {@link Assets.putAsset}.
     */
    type PutOptions = {
        /**
         * <code>true</code> to gzip compress the content for upload and storage,
         * <code>false</code> to upload and store the data without gzip compression. Synonym: <code>compressed</code>.
         */
        compress?: boolean;
        /**
         * The content to upload.
         */
        data: string | ArrayBuffer;
        /**
         * A user-friendly path for the file in the asset server. May have a leading
         * <code>"atp:"</code>. If not specified, no path-to-hash mapping is set.
         * <p>Note: The asset server destroys any unmapped SHA256-named file at server restart. Either set the mapping path
         * with this property or use {@link Assets.setMapping} to set a path-to-hash mapping for the uploaded file.</p>
         */
        path?: string;
    };
    /**
     * Result value returned by {@link Assets.putAsset}.
     */
    type PutResult = {
        /**
         * The number of bytes in the hash file stored on the asset server.
         */
        byteLength?: number;
        /**
         * <code>true</code> if the content stored is gzip compressed.
         */
        compressed?: boolean;
        /**
         * <code>"application/gzip"</code> if the content stored is gzip compressed.
         */
        contentType?: string;
        /**
         * The SHA256 hash of the content.
         */
        hash?: string;
        /**
         * The <code>atp:</code> URL of the content: using the path if specified, otherwise the hash.
         */
        url?: string;
        /**
         * The uploaded content's mapped path, if specified.
         */
        path?: string;
    };
    /**
     * Content and delete options for {@link Assets.deleteAsset}.
     */
    type DeleteOptions = {
        /**
         * The content to upload.
         */
        data: string | ArrayBuffer;
        /**
         * A user-friendly path for the file in the asset server. May have a leading
         * <code>"atp:"</code>. If not specified, no path-to-hash mapping is set.
         * <p>Note: The asset server destroys any unmapped SHA256-named file at server restart. Either set the mapping path
         * with this property or use {@link Assets.setMapping} to set a path-to-hash mapping for the uploaded file.</p>
         */
        path?: string;
    };
    /**
     * Result value returned by {@link Assets.putAsset}.
     */
    type DeleteResult = {
        /**
         * The number of bytes in the hash file stored on the asset server.
         */
        byteLength?: number;
        /**
         * <code>"application/gzip"</code> if the content stored is gzip compressed.
         */
        contentType?: string;
        /**
         * The <code>atp:</code> URL of the content: using the path if specified, otherwise the hash.
         */
        url?: string;
        /**
         * The uploaded content's mapped path, if specified.
         */
        path?: string;
    };
    /**
     * Source for {@link Assets.queryCacheMeta}.
     */
    type QueryCacheMetaOptions = {
        /**
         * The URL of the cached asset to get information on. Must start with <code>"atp:"</code> or
         * <code>"cache:"</code>.
         */
        url: string;
    };
    /**
     * Source and retrieval options for {@link Assets.loadFromCache}.
     */
    type LoadFromCacheOptions = {
        /**
         * <code>true</code> to gunzip decompress the cached data. Synonym:
         * <code>compressed</code>.
         */
        decompress?: boolean;
        /**
         * The desired result type.
         * @defaultValue text
         */
        responseType?: Assets.ResponseType;
        /**
         * The URL of the asset to load from cache. Must start with <code>"atp:"</code> or
         * <code>"cache:"</code>.
         */
        url: string;
    };
    /**
     * The data to save to the cache and cache options for {@link Assets.saveToCache}.
     */
    type SaveToCacheOptions = {
        /**
         * The data to save to the cache.
         */
        data: string | ArrayBuffer;
        /**
         * The last-modified and expiry times for the cache item.
         */
        headers?: Assets.SaveToCacheHeaders;
        /**
         * The URL to associate with the cache item. Must start with <code>"atp:"</code> or
         * <code>"cache:"</code>. If not specified, the URL is <code>"atp:"</code> followed by the SHA256 hash of the content.
         */
        url?: string;
    };
    /**
     * Called when an {@link Assets.uploadData} call is complete.
     * @param url - The raw URL of the file that the content is stored in, with <code>atp:</code> as the scheme and
        the SHA256 hash as the filename (with no extension).
     * @param hash - The SHA256 hash of the content.
     */
    type uploadDataCallback = (url: string, hash: string) => void;
    /**
     * Uploads content to the asset server, storing it in a SHA256-named file.
    <p>Note: The asset server destroys any unmapped SHA256-named file at server restart. Use {@link Assets.setMapping} to
    set a path-to-hash mapping for the new file.</p>
     * @example
     * <caption>Store a string in the asset server.</caption>
    Assets.uploadData("Hello world!", function (url, hash) {
        print("URL: " + url);  // atp:0a1b...9g
        Assets.setMapping("/assetsExamples/helloWorld.txt", hash, function (error) {
            if (error) {
                print("ERROR: Could not set mapping!");
                return;
            }
        });
    });
     * @param data - The content to upload.
     * @param callback - The function to call upon completion.
     */
    function uploadData(data: string, callback: Assets.uploadDataCallback): void;
    /**
     * Called when an {@link Assets.downloadData} call is complete.
     * @param data - The content that was downloaded.
     * @param error - The success or failure of the download.
     */
    type downloadDataCallback = (data: string, error: Assets.DownloadDataError) => void;
    /**
     * Downloads content from the asset server, from a SHA256-named file.
     * @example
     * <caption>Store and retrieve a string from the asset server.</caption>
    var assetURL;
    
    // Store the string.
    Assets.uploadData("Hello world!", function (url, hash) {
        assetURL = url;
        print("url: " + assetURL);  // atp:a0g89...
        Assets.setMapping("/assetsExamples/helloWorld.txt", hash, function (error) {
            if (error) {
                print("ERROR: Could not set mapping!");
                return;
            }
        });
    });
    
    // Retrieve the string.
    Script.setTimeout(function () {
        Assets.downloadData(assetURL, function (data, error) {
            print("Downloaded data: " + data);
            print("Error: " + JSON.stringify(error));
        });
    }, 1000);
     * @param url - The raw URL of asset to download: <code>atp:</code> followed by the assets's SHA256 hash.
     * @param callback - The function to call upon completion.
     */
    function downloadData(url: string, callback: Assets.downloadDataCallback): void;
    /**
     * Called when an {@link Assets.setMapping} call is complete.
     * @param error - <code>null</code> if the path-to-hash mapping was set, otherwise a description of the error.
     */
    type setMappingCallback = (error: string) => void;
    /**
     * Sets a path-to-hash mapping within the asset server.
     * @param path - A user-friendly path for the file in the asset server, without leading <code>"atp:"</code>.
     * @param hash - The hash in the asset server.
     * @param callback - The function to call upon completion.
     */
    function setMapping(path: string, hash: string, callback: Assets.setMappingCallback): void;
    /**
     * Called when an {@link Assets.getMapping} call is complete.
     * @param error - <code>null</code> if the path was found, otherwise a description of the error.
     * @param hash - The hash value if the path was found, <code>""</code> if it wasn't.
     */
    type getMappingCallback = (error: string, hash: string) => void;
    /**
     * Gets the hash for a path within the asset server. The hash is for the unbaked or baked version of the
    asset, according to the asset server setting for the particular path.
     * @example
     * <caption>Report the hash of an asset server item.</caption>
    var assetPath = Window.browseAssets();
    if (assetPath) {
        var mapping = Assets.getMapping(assetPath, function (error, hash) {
            print("Asset: " + assetPath);
            print("- hash:  " + hash);
            print("- error: " + error);
        });
    }
     * @param path - The path to a file in the asset server to get the hash of.
     * @param callback - The function to call upon completion.
     */
    function getMapping(path: string, callback: Assets.getMappingCallback): void;
    /**
     * Called when an {@link Assets.setBakingEnabled} call is complete.
     * @param error - <code>null</code> if baking was successfully enabled or disabled, otherwise a description of the
    error.
     */
    type setBakingEnabledCallback = (error: string) => void;
    /**
     * Sets whether or not to bake an asset in the asset server.
     * @param path - The path to a file in the asset server.
     * @param enabled - <code>true</code> to enable baking of the asset, <code>false</code> to disable.
     * @param callback - The function to call upon completion.
     */
    function setBakingEnabled(path: string, enabled: boolean, callback: Assets.setBakingEnabledCallback): void;
    /**
     * Details of a callback function.
     */
    type CallbackDetails = {
        /**
         * The scope that the <code>callback</code> function is defined in. This object is bound to
         * <code>this</code> when the function is called.
         */
        scope: any;
        /**
         * The function to call upon completion. May be an inline function or a function identifier. If a function
         * identifier, it must be a member of <code>scope</code>.
         */
        callback: Assets.compressDataCallback | Assets.decompressDataCallback | Assets.getAssetCallback | Assets.getCacheStatusCallback | Assets.loadFromCacheCallback | Assets.putAssetCallback | Assets.queryCacheMetaCallback | Assets.resolveAssetCallback | Assets.saveToCacheCallback;
    };
    /**
     * Called when an {@link Assets.getAsset} call is complete.
     * @param error - <code>null</code> if the content was downloaded, otherwise a description of the error.
     * @param result - Information on and the content downloaded.
     */
    type getAssetCallback = (error: string, result: Assets.GetResult) => void;
    /**
     * Downloads content from the asset server.
     * @example
     * <caption>Retrieve a string from the asset server.</caption>
    Assets.getAsset(
        {
            url: "/assetsExamples/helloWorld.txt",
            responseType: "text"
        },
        function (error, result) {
            if (error) {
                print("ERROR: Data not downloaded");
            } else {
                print("Data: " + result.response);
            }
        }
    );
     * @param source - What to download and download options. If a string, the mapped path or hash
        to download, optionally including a leading <code>"atp:"</code>.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function getAsset(source: string | Assets.GetOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.getAssetCallback, callback?: Assets.getAssetCallback): void;
    /**
     * Called when an {@link Assets.putAsset} call is complete.
     * @param error - <code>null</code> if the content was uploaded and any path-to-hash mapping set, otherwise a
        description of the error.
     * @param result - Information on the content uploaded.
     */
    type putAssetCallback = (error: string, result: Assets.PutResult) => void;
    /**
     * Uploads content to the asset server and sets a path-to-hash mapping.
     * @example
     * <caption>Store a string in the asset server.</caption>
    Assets.putAsset(
        {
            data: "Hello world!",
            path: "/assetsExamples/helloWorld.txt"
        },
        function (error, result) {
            if (error) {
                print("ERROR: Data not uploaded or mapping not set");
            } else {
                print("URL: " + result.url);  // atp:/assetsExamples/helloWorld.txt
            }
        }
    );
     * @param options - The content to upload and upload options. If a string, the value of the
        string is uploaded but a path-to-hash mapping is not set.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function putAsset(options: string | Assets.PutOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.putAssetCallback, callback?: Assets.putAssetCallback): void;
    /**
     * Called when an {@link Assets.deleteAsset} call is complete.
    <p class="important">Not implemented: This type is not implemented yet.</p>
     * @param error - <code>null</code> if the content was deleted, otherwise a description of the error.
     * @param result - Information on the content deleted.
     */
    type deleteAssetCallback = (error: string, result: Assets.DeleteResult) => void;
    /**
     * Deletes content from the asset server.
    <p class="important">Not implemented: This method is not implemented yet.</p>
     * @param options - The content to delete and delete options.
     * @param scope - The scope that the <code>callback</code> function is defined in.
     * @param callback - The function to call upon completion.
     */
    function deleteAsset(options: Assets.DeleteOptions, scope: any, callback: Assets.deleteAssetCallback): void;
    /**
     * Called when an {@link Assets.resolveAsset} call is complete.
     * @param error - <code>null</code> if the asset hash or path was resolved, otherwise a description of the error.
     * @param result - Information on the hash or path resolved.
     */
    type resolveAssetCallback = (error: string, result: Assets.ResolveResult) => void;
    /**
     * Resolves and returns information on a hash or a path in the asset server.
     * @example
     * <caption>Get the hash and URL for a path.</caption>
    Assets.resolveAsset(
        "/assetsExamples/helloWorld.txt",
        function (error, result) {
            if (error) {
                print("ERROR: " + error);
            } else {
                print("Hash: " + result.hash);
                print("URL: " + result.url);
            }
        }
    );
     * @param source - The hash or path to resolve if a string, otherwise an object specifying
        what to resolve. If a string, it may have a leading <code>"atp:"</code>.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function resolveAsset(source: string | Assets.ResolveOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.resolveAssetCallback, callback?: Assets.resolveAssetCallback): void;
    /**
     * Called when an {@link Assets.decompressData} call is complete.
     * @param error - <code>null</code> if the data was successfully compressed, otherwise a description of the error.
     * @param result - Information on and the decompressed data.
     */
    type decompressDataCallback = (error: string, result: Assets.DecompressResult) => void;
    /**
     * Decompresses data in memory using gunzip.
     * @param source - What to decompress and decompression options.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function decompressData(source: Assets.DecompressOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.decompressDataCallback, callback?: Assets.decompressDataCallback): void;
    /**
     * Called when an {@link Assets.compressData} call is complete.
     * @param error - <code>null</code> if the data was successfully compressed, otherwise a description of the error.
     * @param result - Information on and the compressed data.
     */
    type compressDataCallback = (error: string, result: Assets.CompressResult) => void;
    /**
     * Compresses data in memory using gzip.
     * @param source - What to compress and compression options. If a string or
        ArrayBuffer, the data to compress.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function compressData(source: string | ArrayBuffer | Assets.CompressOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.compressDataCallback, callback?: Assets.compressDataCallback): void;
    /**
     * Initializes the cache if it isn't already initialized.
     * @returns <code>true</code> if the cache is initialized, <code>false</code> if it isn't.
     */
    function initializeCache(): boolean;
    /**
     * Checks whether the script can write to the cache.
     * @example
     * <caption>Report whether the script can write to the cache.</caption>
    print("Can write to cache: " + Assets.canWriteCacheValue(null));
     * @param url - <em>Not used.</em>
     * @returns <code>true</code> if the script is an Interface, avatar, or assignment client script,
        <code>false</code> if the script is a client entity or server entity script.
     */
    function canWriteCacheValue(url: string): boolean;
    /**
     * Called when a {@link Assets.getCacheStatus} call is complete.
     * @param error - <code>null</code> if the cache status was retrieved without error, otherwise a description of
        the error.
     * @param result - Details of the current cache status.
     */
    type getCacheStatusCallback = (error: string, result: Assets.GetCacheStatusResult) => void;
    /**
     * Gets the current cache status.
     * @example
     * <caption>Report the cache status.</caption>
    Assets.getCacheStatus(function (error, status) {
        print("Cache status");
        print("- Error: " + error);
        print("- Status: " + JSON.stringify(status));
    });
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function getCacheStatus(scopeOrCallback: any | Assets.CallbackDetails | Assets.getCacheStatusCallback, callback?: Assets.getCacheStatusCallback): void;
    /**
     * Called when {@link Assets.queryCacheMeta} is complete.
     * @param error - <code>null</code> if the URL has a valid cache entry, otherwise a description of the error.
     * @param result - Information on an asset in the cache.
     */
    type queryCacheMetaCallback = (error: string, result: Assets.CacheItemMetaData) => void;
    /**
     * Gets information about the status of an asset in the cache.
     * @example
     * <caption>Report details of a string store in the cache.</caption>
    Assets.queryCacheMeta(
        "cache:/cacheExample/helloCache.txt",
        function (error, result) {
            if (error) {
                print("Error: " + error);
            } else {
                print("Success:");
                print("- URL: " + result.url);
                print("- isValid: " + result.isValid);
                print("- saveToDisk: " + result.saveToDisk);
                print("- expirationDate: " + result.expirationDate);
            }
        }
    );
     * @param path - The URL of the cached asset to get information on if a string,
        otherwise an object specifying the cached asset to get information on. The URL must start with <code>"atp:"</code>
        or <code>"cache:"</code>.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function queryCacheMeta(path: string | Assets.QueryCacheMetaOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.queryCacheMetaCallback, callback?: Assets.queryCacheMetaCallback): void;
    /**
     * Called when an {@link Assets.loadFromCache} call is complete.
     * @param error - <code>null</code> if the cache item was successfully retrieved, otherwise a description of the
        error.
     * @param result - Information on and the retrieved data.
     */
    type loadFromCacheCallback = (error: string, result: Assets.LoadFromCacheResult) => void;
    /**
     * Retrieves data from the cache directly, without downloading it.
     * @example
     * <caption>Retrieve a string from the cache.</caption>
    Assets.loadFromCache(
        "cache:/cacheExample/helloCache.txt",
        function (error, result) {
            if (error) {
                print("Error: " + error);
            } else {
                print("Success:");
                print("- Response: " + result.response);
                print("- Content type: " + result.contentType);
                print("- Number of bytes: " + result.byteLength);
                print("- Bytes: " + [].slice.call(new Uint8Array(result.data), 0, result.byteLength));
                print("- URL: " + result.url);
            }
        }
    );
     * @param options - The URL of the asset to load from the cache if a string, otherwise
        an object specifying the asset to load from the cache and load options. The URL must start with <code>"atp:"</code>
        or <code>"cache:"</code>.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function loadFromCache(options: string | Assets.LoadFromCacheOptions, scopeOrCallback: any | Assets.CallbackDetails | Assets.loadFromCacheCallback, callback?: Assets.loadFromCacheCallback): void;
    /**
     * Called when an {@link Assets.saveToCache} call is complete.
     * @param error - <code>null</code> if the asset data was successfully saved to the cache, otherwise a description
        of the error.
     * @param result - Information on the cached data.
     */
    type saveToCacheCallback = (error: string, result: Assets.SaveToCacheResult) => void;
    /**
     * Saves asset data to the cache directly, without downloading it from a URL.
    <p>Note: Can only be used in Interface, avatar, and assignment client scripts.</p>
     * @param url - The URL to associate with the cache item. Must start with <code>"atp:"</code> or
        <code>"cache:"</code>.
     * @param data - The data to save to the cache.
     * @param headers - The last-modified and expiry times for the cache item.
     * @param scopeOrCallback - If an object, then the scope that
        the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is
        called.
        <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>
     * @param [callback] - Used if <code>scopeOrCallback</code> specifies the scope.
        <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function
        in a string. If the name of a function or a function identifier, it must be a member of the scope specified by
        <code>scopeOrCallback</code>.</p>
     */
    function saveToCache(url: string, data: string | ArrayBuffer, headers: Assets.SaveToCacheHeaders, scopeOrCallback: any | Assets.CallbackDetails | Assets.saveToCacheCallback, callback?: Assets.saveToCacheCallback): void;
}


/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>File</code> API provides some facilities for working with the file system.
 */
declare namespace File {
    /**
     * Extracts a filename from a URL, where the filename is specified in the query part of the URL as <code>filename=</code>.
     * @example
     * <caption>Extract a filename from a URL.</caption>
    var url = "http://domain.tld/path/page.html?filename=file.ext";
    print("File name: " + File.convertUrlToPath(url));  // file.ext
     * @param url - The URL to extract the filename from.
     * @returns The filename specified in the URL; an empty string if no filename is specified.
     */
    function convertUrlToPath(url: string): string;
    /**
     * Unzips a file in the local file system to a new, unique temporary directory.
     * @example
     * <caption>Select and unzip a file.</caption>
    File.unzipResult.connect(function (zipFile, unzipFiles, autoAdd, isZip, isBlocks) {
        print("File.unzipResult()");
        print("- zipFile: " + zipFile);
        print("- unzipFiles(" + unzipFiles.length + "): " + unzipFiles);
        print("- autoAdd: " + autoAdd);
        print("- isZip: " + isZip);
        print("- isBlocks: " + isBlocks);
    });
    
    var zipFile = Window.browse("Select a Zip File", "", "*.zip");
    if (zipFile) {
        File.runUnzip(zipFile, "", false, true, false);
    } else {
        print("Zip file not selected.");
    }
     * @param path - The path of the zip file in the local file system. May have a leading <code>"file:///"</code>.
        Need not have a <code>".zip"</code> extension if it is in a temporary directory (as created by
        {@link File.getTempDir|getTempDir}).
     * @param url - <em>Not used.</em>
     * @param autoAdd - <em>Not used by user scripts.</em> The value is simply passed through to the
        {@link File.unzipResult|unzipResult} signal.
     * @param isZip - Set to <code>true</code> if <code>path</code> has a <code>".zip"</code> extension,
        <code>false</code> if it doesn't (but should still be treated as a zip file).
     * @param isBlocks - <em>Not used by user scripts.</em> The value is simply passed through to the
        {@link File.unzipResult|unzipResult} signal.
     */
    function runUnzip(path: string, url: string, autoAdd: boolean, isZip: boolean, isBlocks: boolean): void;
    /**
     * Creates a new, unique directory for temporary use.
     * @example
     * <caption>Create a temporary directory.</caption>
    print("New temporary directory: " + File.getTempDir());
     * @returns The path of the newly created temporary directory.
     */
    function getTempDir(): string;
}

/**
 * A keyboard key event.
 * @example
 * <caption>Report the KeyEvent details for each key press.</caption>
Controller.keyPressEvent.connect(function (event) {
    print(JSON.stringify(event));
});
 *
 */
declare type KeyEvent = {
    /**
     * The Qt keyboard code of the key pressed. For a list of keyboard codes, see
     * <a href="http://doc.qt.io/qt-5/qt.html#Key-enum">http://doc.qt.io/qt-5/qt.html#Key-enum</a>.
     */
    key: number;
    /**
     * A string describing the key. For example, <code>"a"</code> for the "A" key if the Shift is not
     * pressed, <code>"F1"</code> for the F1 key, <code>"SPACE"</code> for the space bar.
     */
    text: string;
    /**
     * <code>true</code> if a Shift key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isShifted: boolean;
    /**
     * <code>true</code> if a meta key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "meta" key is the Windows key; on OSX it is the Control (Splat) key.
     */
    isMeta: boolean;
    /**
     * <code>true</code> if a control key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "control" key is the Ctrl key; on OSX it is the Command key.
     */
    isControl: boolean;
    /**
     * <code>true</code> if an Alt key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isAlt: boolean;
    /**
     * <code>true</code> if the key is on the numeric keypad, otherwise <code>false</code>.
     */
    isKeypad: boolean;
    /**
     * <code>true</code> if the event is a repeat for key that is being held down, otherwise
     * <code>false</code>.
     */
    isAutoRepeat: boolean;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Mat4</code> API provides facilities for generating and using 4 x 4 matrices. These matrices are typically used to
represent transforms (scale, rotate, and translate) that convert one coordinate system into another, or perspective
transforms that convert 3D points into screen coordinates.
 */
declare namespace Mat4 {
    /**
     * Multiplies two matrices.
     * @param m1 - The first matrix.
     * @param m2 - The second matrix.
     * @returns <code>m1</code> multiplied with <code>m2</code>.
     */
    function multiply(m1: TMat4, m2: TMat4): TMat4;
    /**
     * Creates a matrix that represents a rotation and translation.
     * @example
     * <caption>Create a matrix with rotation and translation.</caption>
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromRotAndTrans(rot, trans);
    Mat4.print("Matrix:", matrix);
    // Matrix: dmat4x4((0.353553, 0.612372, -0.707107, 0.000000),
    //                 (-0.573223, 0.739199, 0.353553, 0.000000),
    //                 (0.739199, 0.280330, 0.612372, 0.000000),
    //                 (10.000000, 11.000000, 12.000000, 1.000000))
     * @param rot - The rotation.
     * @param trans - The translation.
     * @returns The matrix that represents the rotation and translation.
     */
    function createFromRotAndTrans(rot: TQuat, trans: TVec3): TMat4;
    /**
     * Creates a matrix that represents a scale, rotation, and translation.
     * @example
     * <caption>Create a matrix with scale, rotation, and translation.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    Mat4.print("Matrix:", matrix);
    // Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),
    //                 (-1.146447, 1.478398, 0.707107, 0.000000),
    //                 (1.478398, 0.560660, 1.224745, 0.000000),
    //                 (10.000000, 11.000000, 12.000000, 1.000000))
     * @param scale - The scale.
     * @param rot - The rotation.
     * @param trans - The translation.
     * @returns The matrix that represents the scale, rotation, and translation.
     */
    function createFromScaleRotAndTrans(scale: TVec3, rot: TQuat, trans: TVec3): TMat4;
    /**
     * Creates a matrix from columns of values.
     * @example
     * <caption>Create a matrix from columns.</caption>
    var col0 = { x: 0.707107, y: 1.224745, z: -1.414214, w: 0.0 };
    var col1 = { x: -1.146447, y: 1.478398, z: 0.707107, w: 0.0 };
    var col2 = { x: 1.478398, y: 0.560660, z: 1.224745, w: 0.0 };
    var col3 = { x: 10.0, y: 11.0, z: 12.0, w: 1.0 };
    var matrix = Mat4.createFromColumns(col0, col1, col2, col3);
    Mat4.print("Matrix:", matrix);
    //Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),
    //                (-1.146447, 1.478398, 0.707107, 0.000000),
    //                (1.478398, 0.560660, 1.224745, 0.000000),
    //                (10.000000, 11.000000, 12.000000, 1.000000))
     * @param col0 - Column 0 values.
     * @param col1 - Column 1 values.
     * @param col2 - Column 2 values.
     * @param col3 - Column 3 valuse.
     * @returns The matrix with the specified columns values.
     */
    function createFromColumns(col0: TVec4, col1: TVec4, col2: TVec4, col3: TVec4): TMat4;
    /**
     * Creates a matrix from an array of values.
     * @example
     * <caption>Create a matrix from an array.</caption>
    var arr = [
        0.707107, 1.224745, -1.414214, 0.0,
        -1.146447, 1.478398, 0.707107, 0.0,
        1.478398, 0.560660, 1.224745, 0.0,
        10.0, 11.0, 12.0, 1.00
    ];
    var matrix = Mat4.createFromArray(arr);
    Mat4.print("Matrix:", matrix);
    //Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),
    //                (-1.146447, 1.478398, 0.707107, 0.000000),
    //                (1.478398, 0.560660, 1.224745, 0.000000),
    //                (10.000000, 11.000000, 12.000000, 1.000000))
     * @param arr - The array of values, starting with column 0.
     * @returns The matrix with the specified values.
     */
    function createFromArray(arr: number[]): TMat4;
    /**
     * Extracts the translation from a matrix.
     * @example
     * <caption>Extract the translation from a matrix.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    
    trans = Mat4.extractTranslation(matrix);
    print("Translation: " + JSON.stringify(trans));
    // Translation: {"x":10,"y":11,"z":12}
     * @param m - The matrix.
     * @returns The translation contained in the matrix.
     */
    function extractTranslation(m: TMat4): TVec3;
    /**
     * Extracts the rotation from a matrix.
     * @example
     * <caption>Extract the rotation from a matrix.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    
    rot = Mat4.extractRotation(matrix);
    print("Rotation: " + JSON.stringify(Quat.safeEulerAngles(rot)));
    // Rotation: {"x":29.999998092651367,"y":45.00000762939453,"z":60.000003814697266}
     * @param m - The matrix.
     * @returns The rotation contained in the matrix.
     */
    function extractRotation(m: TMat4): TQuat;
    /**
     * Extracts the scale from a matrix.
     * @example
     * <caption>Extract the scale from a matrix.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    
    scale = Mat4.extractScale(matrix);
    print("Scale: " + JSON.stringify(scale));
    // Scale: {"x":1.9999998807907104,"y":1.9999998807907104,"z":1.9999998807907104}
     * @param m - The matrix.
     * @returns The scale contained in the matrix.
     */
    function extractScale(m: TMat4): TVec3;
    /**
     * Transforms a point into a new coordinate system: the point value is scaled, rotated, and translated.
     * @example
     * <caption>Transform a point.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(0, 45, 0);
    var trans = { x: 0, y: 10, z: 0 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    
    var point = { x: 1, y: 1, z: 1 };
    var transformedPoint = Mat4.transformPoint(matrix, point);
    print("Transformed point: " + JSON.stringify(transformedPoint));
    // Transformed point: { "x": 2.8284270763397217, "y": 12, "z": -2.384185791015625e-7 }
     * @param m - The transform to the new coordinate system.
     * @param point - The point to transform.
     * @returns The point in the new coordinate system.
     */
    function transformPoint(m: TMat4, point: TVec3): TVec3;
    /**
     * Transforms a vector into a new coordinate system: the vector is scaled and rotated.
     * @example
     * <caption>Transform a vector.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(0, 45, 0);
    var trans = { x: 0, y: 10, z: 0 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    
    var vector = { x: 1, y: 1, z: 1 };
    var transformedVector = Mat4.transformVector(matrix, vector);
    print("Transformed vector: " + JSON.stringify(transformedVector));
    // Transformed vector: { "x": 2.8284270763397217, "y": 2, "z": -2.384185791015625e-7 }
     * @param m - The transform to the new coordinate system.
     * @param vector - The vector to transform.
     * @returns The vector in the new coordinate system.
     */
    function transformVector(m: TMat4, vector: TVec3): TVec3;
    /**
     * Calculates the inverse of a matrix.
     * @example
     * <caption>A matrix multiplied with its inverse is the unit matrix.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    var inverse = Mat4.inverse(matrix);
    var multiplied = Mat4.multiply(matrix, inverse);
    Mat4.print("Multiplied:", multiplied);
    //Multiplied: dmat4x4((1.000000, 0.000000, 0.000000, 0.000000),
    //                    (0.000000, 1.000000, -0.000000, 0.000000),
    //                    (0.000000, 0.000000, 1.000000, 0.000000),
    //                    (0.000000, 0.000000, 0.000001, 1.000000))
     * @param m - The matrix.
     * @returns The inverse of the matrix.
     */
    function inverse(m: TMat4): TMat4;
    /**
     * Gets the "forward" direction that the camera would face if its orientation was set to the rotation contained in a
    matrix. The High Fidelity camera has axes x = right, y = up, -z = forward.
    <p>Synonym for {@link TMat4(0).getForward|getForward}.</p>
     * @param m - The matrix.
     * @returns The negative z-axis rotated by orientation.
     */
    function getFront(m: TMat4): TVec3;
    /**
     * Gets the "forward" direction that the camera would face if its orientation was set to the rotation contained in a
    matrix. The High Fidelity camera has axes x = right, y = up, -z = forward.
     * @example
     * <caption>Demonstrate that the "forward" direction is the negative z-axis.</caption>
    var rot = Quat.IDENTITY;
    var trans = Vec3.ZERO;
    var matrix = Mat4.createFromRotAndTrans(rot, trans);
    var forward = Mat4.getForward(matrix);
    print("Forward: " + JSON.stringify(forward));
    // Forward: {"x":0,"y":0,"z":-1}
     * @param m - The matrix.
     * @returns The negative z-axis rotated by the rotation in the matrix.
     */
    function getForward(m: TMat4): TVec3;
    /**
     * Gets the "right" direction that the camera would have if its orientation was set to the rotation contained in a matrix.
    The High Fidelity camera has axes x = right, y = up, -z = forward.
     * @param m - The matrix.
     * @returns The x-axis rotated by the rotation in the matrix.
     */
    function getRight(m: TMat4): TVec3;
    /**
     * Gets the "up" direction that the camera would have if its orientation was set to the rotation contained in a matrix. The
    High Fidelity camera has axes x = right, y = up, -z = forward.
     * @param m - The matrix.
     * @returns The y-axis rotated by the rotation in the matrix.
     */
    function getUp(m: TMat4): TVec3;
    /**
     * Prints a matrix to the program log as a label followed by the matrix's values.
     * @example
     * <caption>Two ways of printing a label and matrix value.</caption>
    var scale = Vec3.multiply(2, Vec3.ONE);
    var rot = Quat.fromPitchYawRollDegrees(30, 45, 60);
    var trans = { x: 10, y: 11, z: 12 };
    var matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);
    
    Mat4.print("Matrix:", matrix);
    // Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),
    //                 (-1.146447, 1.478398, 0.707107, 0.000000),
    //                 (1.478398, 0.560660, 1.224745, 0.000000),
    //                 (10.000000, 11.000000, 12.000000, 1.000000))
    
    print("Matrix: " + JSON.stringify(matrix));
    // Matrix: {"r0c0":0.7071067094802856,"r1c0":1.2247446775436401,"r2c0":-1.4142136573791504,"r3c0":0,
    //          "r0c1": -1.1464465856552124, "r1c1": 1.4783978462219238, "r2c1": 0.7071066498756409, "r3c1": 0,
    //          "r0c2": 1.4783978462219238, "r1c2": 0.5606603026390076, "r2c2": 1.2247447967529297, "r3c2": 0,
    //          "r0c3": 10, "r1c3": 11, "r2c3": 12, "r3c3": 1}
     *
     * @param label - The label to print.
     * @param m - The matrix to print.
     * @param [transpose = false] - <code>true</code> to transpose the matrix before printing (so that it prints the
        matrix's rows), <code>false</code> to not transpose the matrix (so that it prints the matrix's columns).
     */
    function print(label: string, m: TMat4, transpose?: boolean): void;
}

/**
 * A controller mouse movement or button event.
 * @example
 * <caption>Report the MouseEvent details for each mouse move.</caption>
Controller.mouseMoveEvent.connect(function (event) {
    print(JSON.stringify(event));
});
 *
 */
declare type MouseEvent = {
    /**
     * Integer x-coordinate of the event on the Interface window or HMD HUD.
     */
    x: number;
    /**
     * Integer y-coordinate of the event on the Interface window or HMD HUD.
     */
    y: number;
    /**
     * <code>"LEFT"</code>, <code>"MIDDLE"</code>, or <code>"RIGHT"</code> if a button press or release
     * caused the event, otherwise <code>"NONE"</code>.
     */
    button: string;
    /**
     * <code>true</code> if the left button was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isLeftButton: boolean;
    /**
     * <code>true</code> if the middle button was pressed when the event was generated,
     * otherwise <code>false</code>.
     */
    isMiddleButton: boolean;
    /**
     * <code>true</code> if the right button was pressed when the event was generated,
     * otherwise <code>false</code>.
     */
    isRightButton: boolean;
    /**
     * <code>true</code> if the Shift key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isShifted: boolean;
    /**
     * <code>true</code> if the "meta" key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "meta" key is the Windows key; on OSX it is the Control (Splat) key.
     */
    isMeta: boolean;
    /**
     * <code>true</code> if the "control" key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "control" key is the Ctrl key; on OSX it is the Command key.
     */
    isControl: boolean;
    /**
     * <code>true</code> if the Alt key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isAlt: boolean;
};

/**
 * A 2D or 3D mouse or similar pointer event.
 */
declare type PointerEvent = {
    /**
     * The type of event: <code>"Press"</code>, <code>"DoublePress"</code>, <code>"Release"</code>, or
     * <code>"Move"</code>.
     */
    type: string;
    /**
     * Integer number used to identify the pointer: <code>0</code> = hardware mouse, <code>1</code> = left
     * controller, <code>2</code> = right controller.
     */
    id: number;
    /**
     * The 2D position of the event on the intersected object XY plane, where applicable.
     */
    pos2D: TVec2;
    /**
     * The 3D position of the event on the intersected object, where applicable.
     */
    pos3D: TVec3;
    /**
     * The surface normal at the intersection point.
     */
    normal: TVec3;
    /**
     * The direction of the intersection ray.
     */
    direction: TVec3;
    /**
     * The name of the button pressed: <code>None</code>, <code>Primary</code>, <code>Secondary</code>,
     * or <code>Tertiary</code>.
     */
    button: string;
    /**
     * <code>true</code> if the button pressed was the primary button, otherwise
     * <code>undefined</code>;
     */
    isPrimaryButton: boolean;
    /**
     * <code>true</code> if the button pressed was the primary button, otherwise
     * <code>undefined</code>;
     */
    isLeftButton: boolean;
    /**
     * <code>true</code> if the button pressed was the secondary button, otherwise
     * <code>undefined</code>;
     */
    isSecondaryButton: boolean;
    /**
     * <code>true</code> if the button pressed was the secondary button, otherwise
     * <code>undefined</code>;
     */
    isRightButton: boolean;
    /**
     * <code>true</code> if the button pressed was the tertiary button, otherwise
     * <code>undefined</code>;
     */
    isTertiaryButton: boolean;
    /**
     * <code>true</code> if the button pressed was the tertiary button, otherwise
     * <code>undefined</code>;
     */
    isMiddleButton: boolean;
    /**
     * <code>true</code> if the primary button is currently being pressed, otherwise
     * <code>false</code>
     */
    isPrimaryHeld: boolean;
    /**
     * <code>true</code> if the secondary button is currently being pressed, otherwise
     * <code>false</code>
     */
    isSecondaryHeld: boolean;
    /**
     * <code>true</code> if the tertiary button is currently being pressed, otherwise
     * <code>false</code>
     */
    isTertiaryHeld: boolean;
    /**
     * Integer value with bits set according to which keyboard modifier keys were
     * pressed when the event was generated.
     */
    keyboardModifiers: KeyboardModifiers;
};

/**
 * <p>A KeyboardModifiers value is used to specify which modifier keys on the keyboard are pressed. The value is the sum
(bitwise OR) of the relevant combination of values from the following table:</p>
<table>
  <thead>
    <tr><th>Key</th><th>Hexadecimal value</th><th>Decimal value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td>Shift</td><td><code>0x02000000</code></td><td><code>33554432</code></td>
        <td>A Shift key on the keyboard is pressed.</td></tr>
    <tr><td>Control</td><td><code>0x04000000</code></td><td><code>67108864</code></td>
        <td>A control key on the keyboard is pressed. On Windows the "control" key is the Ctrl key; on OSX it is the Command
        key.</td></tr>
    <tr><td>Alt</td><td><code>0x08000000</code></td><td><code>134217728</code></td>
        <td>An Alt key on the keyboard is pressed.</td></tr>
    <tr><td>Meta</td><td><code>0x10000000</code></td><td><code>268435456</code></td>
        <td>A meta key on the keyboard is pressed. On Windows the "meta" key is the Windows key; on OSX it is the Control
        (Splat) key.</td></tr>
    <tr><td>Keypad</td><td><code>0x20000000</code></td><td><code>536870912</code></td>
        <td>A keypad button is pressed.</td></tr>
    <tr><td>Group</td><td><code>0x40000000</code></td><td><code>1073741824</code></td>
        <td>X11 operating system only: An AltGr / Mode_switch key on the keyboard is pressed.</td></tr>
  </tbody>
</table>
 */
declare type KeyboardModifiers = number;

/**
 * A quaternion value. See also the {@link TQuat(0)|Quat} API.
 */
declare type TQuat = {
    /**
     * Imaginary component i.
     */
    x: number;
    /**
     * Imaginary component j.
     */
    y: number;
    /**
     * Imaginary component k.
     */
    z: number;
    /**
     * Real component.
     */
    w: number;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Quat</code> API provides facilities for generating and manipulating quaternions.
Quaternions should be used in preference to Euler angles wherever possible because quaternions don't suffer from the problem
of gimbal lock.
 * @example
 * <caption>Print the <code>IDENTITY</code> value.</caption>
print(JSON.stringify(Quat.IDENTITY)); // { x: 0, y: 0, z: 0, w: 1 }
print(JSON.stringify(Quat.safeEulerAngles(Quat.IDENTITY))); // { x: 0, y: 0, z: 0 }
 * @property IDENTITY - <code>{ x: 0, y: 0, z: 0, w: 1 }</code> : The identity rotation, i.e., no rotation.
    <em>Read-only.</em>
 */
declare namespace Quat {
    /**
     * Multiplies two quaternions.
     * @example
     * <caption>Calculate the orientation of your avatar's right hand in world coordinates.</caption>
    var handController = Controller.Standard.RightHand;
    var handPose = Controller.getPoseValue(handController);
    if (handPose.valid) {
        var handOrientation = Quat.multiply(MyAvatar.orientation, handPose.rotation);
    }
     * @param q1 - The first quaternion.
     * @param q2 - The second quaternion.
     * @returns <code>q1</code> multiplied with <code>q2</code>.
     */
    function multiply(q1: TQuat, q2: TQuat): TQuat;
    /**
     * Normalizes a quaternion.
     * @example
     * <caption>Normalize a repeated delta rotation so that maths rounding errors don't accumulate.</caption>
    var deltaRotation = Quat.fromPitchYawRollDegrees(0, 0.1, 0);
    var currentRotation = Quat.ZERO;
    while (Quat.safeEulerAngles(currentRotation).y < 180) {
        currentRotation = Quat.multiply(deltaRotation, currentRotation);
        currentRotation = Quat.normalize(currentRotation);
        // Use currentRotatation for something.
    }
     * @param q - The quaternion to normalize.
     * @returns <code>q</code> normalized to have unit length.
     */
    function normalize(q: TQuat): TQuat;
    /**
     * Calculates the conjugate of a quaternion. For a unit quaternion, its conjugate is the same as its
    {@link TQuat(0).inverse|Quat.inverse}.
     * @example
     * <caption>A unit quaternion multiplied by its conjugate is a zero rotation.</caption>
    var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);
    Quat.print("quaternion", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)
    var conjugate = Quat.conjugate(quaternion);
    Quat.print("conjugate", conjugate, true); // dvec3(1.116056, -22.242186, -28.451778)
    var identity = Quat.multiply(conjugate, quaternion);
    Quat.print("identity", identity, true); // dvec3(0.000000, 0.000000, 0.000000)
     * @param q - The quaternion to conjugate.
     * @returns The conjugate of <code>q</code>.
     */
    function conjugate(q: TQuat): TQuat;
    /**
     * Calculates a camera orientation given an eye position, point of interest, and "up" direction. The camera's negative
    z-axis is the forward direction. The result has zero roll about its forward direction with respect to the given "up"
    direction.
     * @example
     * <caption>Rotate your view in independent mode to look at the world origin upside down.</caption>
    Camera.mode = "independent";
    Camera.orientation = Quat.lookAt(Camera.position, Vec3.ZERO, Vec3.UNIT_NEG_Y);
     * @param eye - The eye position.
     * @param target - The point to look at.
     * @param up - The "up" direction.
     * @returns A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to
    be the cross product of the eye-to-target and up vectors.
     */
    function lookAt(eye: TVec3, target: TVec3, up: TVec3): TQuat;
    /**
     * Calculates a camera orientation given an eye position and point of interest. The camera's negative z-axis is the forward
    direction. The result has zero roll about its forward direction.
     * @example
     * <caption>Rotate your view in independent mode to look at the world origin.</caption>
    Camera.mode = "independent";
    Camera.orientation = Quat.lookAtSimple(Camera.position, Vec3.ZERO);
     * @param eye - The eye position.
     * @param target - The point to look at.
     * @returns A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to be
        the cross product of the eye-to-target and an "up" vector. The "up" vector is the y-axis unless the eye-to-target
        vector is nearly aligned with it (i.e., looking near vertically up or down), in which case the x-axis is used as the
        "up" vector.
     */
    function lookAtSimple(eye: TVec3, target: TVec3): TQuat;
    /**
     * Calculates the shortest rotation from a first vector onto a second.
     * @example
     * <caption>Apply a change in velocity to an entity and rotate it to face the direction it's travelling.</caption>
    var newVelocity = Vec3.sum(entityVelocity, deltaVelocity);
    var properties = { velocity: newVelocity };
    if (Vec3.length(newVelocity) > 0.001) {
        properties.rotation = Quat.rotationBetween(entityVelocity, newVelocity);
    }
    Entities.editEntity(entityID, properties);
    entityVelocity = newVelocity;
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns The rotation from <code>v1</code> onto <code>v2</code>.
     */
    function rotationBetween(v1: TVec3, v2: TVec3): TQuat;
    /**
     * Generates a quaternion from a {@link TVec3} of Euler angles in degrees.
     * @example
     * <caption>Zero out pitch and roll from an orientation.</caption>
    var eulerAngles = Quat.safeEulerAngles(orientation);
    eulerAngles.x = 0;
    eulerAngles.z = 0;
    var newOrientation = Quat.fromVec3Degrees(eulerAngles);
     * @param vector - A vector of three Euler angles in degrees, the angles being the rotations about the x, y, and z
        axes.
     * @returns A quaternion created from the Euler angles in <code>vector</code>.
     */
    function fromVec3Degrees(vector: TVec3): TQuat;
    /**
     * Generates a quaternion from a {@link TVec3} of Euler angles in radians.
     * @example
     * <caption>Create a rotation of 180 degrees about the y axis.</caption>
    var rotation = Quat.fromVec3Radians({ x: 0, y: Math.PI, z: 0 });
     * @param vector - A vector of three Euler angles in radians, the angles being the rotations about the x, y, and z
        axes.
     * @returns A quaternion created using the Euler angles in <code>vector</code>.
     */
    function fromVec3Radians(vector: TVec3): TQuat;
    /**
     * Generates a quaternion from pitch, yaw, and roll values in degrees.
     * @example
     * <caption>Create a rotation of 180 degrees about the y axis.</caption>
    var rotation = Quat.fromPitchYawRollDegrees(0, 180, 0 );
     * @param pitch - The pitch angle in degrees.
     * @param yaw - The yaw angle in degrees.
     * @param roll - The roll angle in degrees.
     * @returns A quaternion created using the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles.
     */
    function fromPitchYawRollDegrees(pitch: number, yaw: number, roll: number): TQuat;
    /**
     * Generates a quaternion from pitch, yaw, and roll values in radians.
     * @example
     * <caption>Create a rotation of 180 degrees about the y axis.</caption>
    var rotation = Quat.fromPitchYawRollRadians(0, Math.PI, 0);
     * @param pitch - The pitch angle in radians.
     * @param yaw - The yaw angle in radians.
     * @param roll - The roll angle in radians.
     * @returns A quaternion created from the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles.
     */
    function fromPitchYawRollRadians(pitch: number, yaw: number, roll: number): TQuat;
    /**
     * Calculates the inverse of a quaternion. For a unit quaternion, its inverse is the same as its
        {@link TQuat(0).conjugate|Quat.conjugate}.
     * @example
     * <caption>A quaternion multiplied by its inverse is a zero rotation.</caption>
    var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);
    Quat.print("quaternion", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)
    var inverse = Quat.invserse(quaternion);
    Quat.print("inverse", inverse, true); // dvec3(1.116056, -22.242186, -28.451778)
    var identity = Quat.multiply(inverse, quaternion);
    Quat.print("identity", identity, true); // dvec3(0.000000, 0.000000, 0.000000)
     * @param q - The quaternion.
     * @returns The inverse of <code>q</code>.
     */
    function inverse(q: TQuat): TQuat;
    /**
     * Gets the "front" direction that the camera would face if its orientation was set to the quaternion value.
    This is a synonym for {@link TQuat(0).getForward|Quat.getForward}.
    The Overte camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.
     * @param orientation - A quaternion representing an orientation.
     * @returns The negative z-axis rotated by <code>orientation</code>.
     */
    function getFront(orientation: TQuat): TVec3;
    /**
     * Gets the "forward" direction that the camera would face if its orientation was set to the quaternion value.
    This is a synonym for {@link TQuat(0).getFront|Quat.getFront}.
    The Overte camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.
     * @example
     * <caption>Demonstrate that the "forward" vector is for the negative z-axis.</caption>
    var forward = Quat.getForward(Quat.IDENTITY);
    print(JSON.stringify(forward)); // {"x":0,"y":0,"z":-1}
     * @param orientation - A quaternion representing an orientation.
     * @returns The negative z-axis rotated by <code>orientation</code>.
     */
    function getForward(orientation: TQuat): TVec3;
    /**
     * Gets the "right" direction that the camera would have if its orientation was set to the quaternion value.
    The Overte camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.
     * @param orientation - A quaternion representing an orientation.
     * @returns The x-axis rotated by <code>orientation</code>.
     */
    function getRight(orientation: TQuat): TVec3;
    /**
     * Gets the "up" direction that the camera would have if its orientation was set to the quaternion value.
    The Overte camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.
     * @param orientation - A quaternion representing an orientation.
     * @returns The y-axis rotated by <code>orientation</code>.
     */
    function getUp(orientation: TQuat): TVec3;
    /**
     * Calculates the Euler angles for the quaternion, in degrees. (The "safe" in the name signifies that the angle results
    will not be garbage even when the rotation is particularly difficult to decompose with pitches around +/-90 degrees.)
     * @example
     * <caption>Report the camera yaw.</caption>
    var eulerAngles = Quat.safeEulerAngles(Camera.orientation);
    print("Camera yaw: " + eulerAngles.y);
     * @param orientation - A quaternion representing an orientation.
     * @returns A {@link TVec3} of Euler angles for the <code>orientation</code>, in degrees, the angles being the
    rotations about the x, y, and z axes.
     */
    function safeEulerAngles(orientation: TQuat): TVec3;
    /**
     * Generates a quaternion given an angle to rotate through and an axis to rotate about.
     * @example
     * <caption>Calculate a rotation of 90 degrees about the direction your camera is looking.</caption>
    var rotation = Quat.angleAxis(90, Quat.getForward(Camera.orientation));
     * @param angle - The angle to rotate through, in degrees.
     * @param axis - The unit axis to rotate about.
     * @returns A quaternion that is a rotation through <code>angle</code> degrees about the <code>axis</code>.
    <strong>WARNING:</strong> This value is in degrees whereas the value returned by {@link TQuat(0).angle|Quat.angle} is
    in radians.
     */
    function angleAxis(angle: number, axis: TVec3): TQuat;
    /**
     * Gets the rotation axis for a quaternion.
     * @example
     * <caption>Get the rotation axis of a quaternion.</caption>
    var forward = Quat.getForward(Camera.orientation);
    var rotation = Quat.angleAxis(90, forward);
    var axis = Quat.axis(rotation);
    print("Forward: " + JSON.stringify(forward));
    print("Axis: " + JSON.stringify(axis)); // Same value as forward.
     * @param q - The quaternion.
     * @returns The normalized rotation axis for <code>q</code>.
     */
    function axis(q: TQuat): TVec3;
    /**
     * Gets the rotation angle for a quaternion.
     * @example
     * <caption>Get the rotation angle of a quaternion.</caption>
    var forward = Quat.getForward(Camera.orientation);
    var rotation = Quat.angleAxis(90, forward);
    var angle = Quat.angle(rotation);
    print("Angle: " + angle * 180 / Math.PI);  // 90 degrees.
     * @param q - The quaternion.
     * @returns The rotation angle for <code>q</code>, in radians. <strong>WARNING:</strong> This value is in radians
    whereas the value used by {@link TQuat(0).angleAxis|Quat.angleAxis} is in degrees.
     */
    function angle(q: TQuat): number;
    /**
     * Computes a spherical linear interpolation between two rotations, safely handling two rotations that are very similar.
    See also, {@link TQuat(0).slerp|Quat.slerp}.
     * @example
     * <caption>Animate between one rotation and another.</caption>
    var dt = amountOfTimeThatHasPassed;
    var mixFactor = amountOfTimeThatHasPassed / TIME_TO_COMPLETE;
    if (mixFactor > 1) {
        mixFactor = 1;
    }
    var newRotation = Quat.mix(startRotation, endRotation, mixFactor);
     * @param q1 - The beginning rotation.
     * @param q2 - The ending rotation.
     * @param alpha - The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion
        of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns
        <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.
     * @returns A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>.
     */
    function mix(q1: TQuat, q2: TQuat, alpha: number): TQuat;
    /**
     * Computes a spherical linear interpolation between two rotations, for rotations that are not very similar.
    See also, {@link TQuat(0).mix|Quat.mix}.
     * @param q1 - The beginning rotation.
     * @param q2 - The ending rotation.
     * @param alpha - The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion
        of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns
        <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.
     * @returns A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>.
     */
    function slerp(q1: TQuat, q2: TQuat, alpha: number): TQuat;
    /**
     * Computes a spherical quadrangle interpolation between two rotations along a path oriented toward two other rotations.
    Equivalent to: <code>Quat.slerp(Quat.slerp(q1, q2, alpha), Quat.slerp(s1, s2, alpha), 2 * alpha * (1.0 - alpha))</code>.
     * @param q1 - Initial rotation.
     * @param q2 - Final rotation.
     * @param s1 - First control point.
     * @param s2 - Second control point.
     * @param alpha - The mixture coefficient between <code>0.0</code> and <code>1.0</code>. A value of
        <code>0.0</code> returns <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.
     * @returns A spherical quadrangle interpolation between rotations <code>q1</code> and <code>q2</code> using control
        points <code>s1</code> and <code>s2</code>.
     */
    function squad(q1: TQuat, q2: TQuat, s1: TQuat, s2: TQuat, alpha: number): TQuat;
    /**
     * Calculates the dot product of two quaternions. The closer the quaternions are to each other the more non-zero the value
    is (either positive or negative). Identical unit rotations have a dot product of +/-1.
     * @example
     * <caption>Testing unit quaternions for equality.</caption>
    var q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);
    var q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);
    print(Quat.equal(q1, q2)); // true
    var q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);
    print(Quat.equal(q1, q3)); // false
    
    var dot = Quat.dot(q1, q3);
    print(dot); // -0.9999999403953552
    var equal = Math.abs(1 - Math.abs(dot)) < 0.000001;
    print(equal); // true
     * @param q1 - The first quaternion.
     * @param q2 - The second quaternion.
     * @returns The dot product of <code>q1</code> and <code>q2</code>.
     */
    function dot(q1: TQuat, q2: TQuat): number;
    /**
     * Prints to the program log a text label followed by a quaternion's pitch, yaw, and roll Euler angles.
     * @example
     * <caption>Two ways of printing a label plus a quaternion's Euler angles.</caption>
    var quaternion = Quat.fromPitchYawRollDegrees(0, 45, 0);
    
    // Quaternion: dvec3(0.000000, 45.000004, 0.000000)
    Quat.print("Quaternion:", quaternion,  true);
    
    // Quaternion: {"x":0,"y":45.000003814697266,"z":0}
    print("Quaternion: " + JSON.stringify(Quat.safeEulerAngles(quaternion)));
     * @param label - The label to print.
     * @param q - The quaternion to print.
     * @param [asDegrees = false] - If <code>true</code> the angle values are printed in degrees, otherwise they are
        printed in radians.
     */
    function print(label: string, q: TQuat, asDegrees?: boolean): void;
    /**
     * Tests whether two quaternions are equal.
    <p><strong>Note:</strong> The quaternions must be exactly equal in order for <code>true</code> to be returned; it is
    often better to use {@link TQuat(0).dot|Quat.dot} and test for closeness to +/-1.</p>
     * @example
     * <caption>Testing unit quaternions for equality.</caption>
    var q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);
    var q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);
    print(Quat.equal(q1, q2)); // true
    var q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);
    print(Quat.equal(q1, q3)); // false
    
    var dot = Quat.dot(q1, q3);
    print(dot); // -0.9999999403953552
    var equal = Math.abs(1 - Math.abs(dot)) < 0.000001;
    print(equal); // true
     * @param q1 - The first quaternion.
     * @param q2 - The second quaternion.
     * @returns <code>true</code> if the quaternions are equal, otherwise <code>false</code>.
     */
    function equal(q1: TQuat, q2: TQuat): boolean;
    /**
     * Cancels out the roll and pitch component of a quaternion so that its completely horizontal with a yaw pointing in the
    given quaternion's direction.
     * @example
     * <caption>Two ways of calculating a camera orientation in the x-z plane with a yaw pointing in the direction of
        a given quaternion.</caption>
    var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);
    
    var noRollOrPitch = Quat.cancelOutRollAndPitch(quaternion);
    Quat.print("", noRollOrPitch, true); // dvec3(0.000000, 22.245995, 0.000000)
    
    var front = Quat.getFront(quaternion);
    var lookAt = Quat.lookAtSimple(Vec3.ZERO, { x: front.x, y: 0, z: front.z });
    Quat.print("", lookAt, true); // dvec3(0.000000, 22.245996, 0.000000)
     * @param orientation - A quaternion representing an orientation.
     * @returns <code>orientation</code> with its roll and pitch canceled out.
     */
    function cancelOutRollAndPitch(orientation: TQuat): TQuat;
    /**
     * Cancels out the roll component of a quaternion so that its horizontal axis is level.
     * @example
     * <caption>Two ways of calculating a camera orientation that points in the direction of a given quaternion but
        keeps the camera's horizontal axis level.</caption>
    var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);
    
    var noRoll = Quat.cancelOutRoll(quaternion);
    Quat.print("", noRoll, true); // dvec3(-1.033004, 22.245996, -0.000000)
    
    var front = Quat.getFront(quaternion);
    var lookAt = Quat.lookAtSimple(Vec3.ZERO, front);
    Quat.print("", lookAt, true); // dvec3(-1.033004, 22.245996, -0.000000)
     *
     * @param orientation - A quaternion representing an orientation.
     * @returns <code>orientation</code> with its roll canceled out.
     */
    function cancelOutRoll(orientation: TQuat): TQuat;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Scene</code> API provides some control over what is rendered.
 * @property shouldRenderAvatars - <code>true</code> if avatars are rendered, <code>false</code> if they aren't.
 * @property shouldRenderEntities - <code>true</code> if entities (domain, avatar, and local) are rendered,
    <code>false</code> if they aren't.
 */
declare namespace Scene { }

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>ScriptDiscoveryService</code> API provides facilities to work with Interface scripts.
 * @property debugScriptUrl - The path and name of a script to debug using the "API Debugger" developer tool
    (currentAPI.js). If set, the API Debugger dialog displays the objects and values exposed by the script using
    {@link Script.registerValue} and similar.
 * @property defaultScriptsPath - The path where the default scripts are located in the Interface installation.
    <em>Read-only.</em>
 * @property scriptsModel - Information on the scripts that are in the default scripts directory of the
    Interface installation.
    <em>Read-only.</em>
 * @property scriptsModelFilter - Sorted and filtered information on the scripts that are in the default
    scripts directory of the Interface installation.
    <em>Read-only.</em>
 */
declare namespace ScriptDiscoveryService {
    /**
     * Information on a public script, i.e., a script that's included in the Interface installation.
     */
    type PublicScript = {
        /**
         * The script's file name.
         */
        name: string;
        /**
         * <code>"script"</code> or <code>"folder"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed. It currently always has the value,
         * <code>"script"</code>.</p>
         */
        type: string;
        /**
         * Only present if <code>type == "folder"</code>.
         * <p class="important">Deprecated: This property is deprecated and will be removed. It currently is never present.
         */
        children?: ScriptDiscoveryService.PublicScript[];
        /**
         * The full URL of the script &mdash; including the <code>"file:///"</code> scheme at the start.
         * <p>Only present if <code>type == "script"</code>.</p>
         */
        url?: string;
    };
    /**
     * Information on a local script.
     */
    type LocalScript = {
        /**
         * The script's file name.
         */
        name: string;
        /**
         * The script's path.
         */
        path: string;
    };
    /**
     * Information on a running script.
     */
    type RunningScript = {
        /**
         * <code>true</code> if the script is a local file (i.e., the scheme is "file"), <code>false</code>
         * if it isn't (e.g., the scheme is "http").
         */
        local: boolean;
        /**
         * The script's file name.
         */
        name: string;
        /**
         * The script's path and file name &mdash; excluding the scheme if a local file.
         */
        path: string;
        /**
         * The full URL of the script &mdash; including the scheme if a local file.
         */
        url: string;
    };
    /**
     * Starts running an Interface script, if it isn't already running. The script is automatically loaded next time Interface
    starts.
    <p>This is a synonym for calling {@link ScriptDiscoveryService.loadScript|loadScript} with just the script URL.</p>
    <p class="availableIn"><strong>Supported Script Types:</strong> Interface Scripts &bull; Avatar Scripts</p>
    <p>See also, {@link Script.load}.</p>
     * @param url - The path and name of the script. If a local file, including the <code>"file:///"</code> scheme is
        optional.
     */
    function loadOneScript(url: string): void;
    /**
     * Starts running an Interface script, if it isn't already running.
    <p class="availableIn"><strong>Supported Script Types:</strong> Interface Scripts &bull; Avatar Scripts</p>
    <p>See also, {@link Script.load}.</p>
     * @param [url = ""] - The path and name of the script. If a local file, including the <code>"file:///"</code>
        scheme is optional.
     * @param [isUserLoaded = true] - <code>true</code> if the user specifically loaded it, <code>false</code> if not
        (e.g., a script loaded it). If <code>false</code>, the script is not automatically loaded next time Interface starts.
     * @param [loadScriptFromEditor = false] - <em>Not used.</em>
     * @param [activateMainWindow = false] - <em>Not used.</em>
     * @param [reload = false] - <code>true</code> to redownload the script, <code>false</code> to use the copy from
        the cache if available.
     * @param [quitWhenFinished = false] - <code>true</code> to close Interface when the script finishes,
        <code>false</code> to not close Interface.
     * @returns An empty object, <code>{}</code>.
     */
    function loadScript(url?: string, isUserLoaded?: boolean, loadScriptFromEditor?: boolean, activateMainWindow?: boolean, reload?: boolean, quitWhenFinished?: boolean): any;
    /**
     * Stops or restarts an Interface script.
     * @param url - The path and name of the script. If a local file, including the <code>"file:///"</code> scheme is
        optional.
     * @param [restart = false] - <code>true</code> to redownload and restart the script, <code>false</code> to stop
        it.
     * @returns <code>true</code> if the script was successfully stopped or restarted, <code>false</code> if it
        wasn't (e.g., the script couldn't be found).
     */
    function stopScript(url: string, restart?: boolean): boolean;
    /**
     * Restarts all Interface, avatar, and client entity scripts after clearing the scripts cache.
     */
    function reloadAllScripts(): void;
    /**
     * Stops or restarts all Interface scripts. The scripts cache is not cleared. If restarting, avatar and client entity
    scripts are also restarted.
     * @param [restart = false] - <code>true</code> to restart the scripts, <code>false</code> to stop them.
     */
    function stopAllScripts(restart?: boolean): void;
    /**
     * Gets a list of all Interface scripts that are currently running.
     * @example
     * <caption>Report all running scripts.</caption>
    var runningScripts = ScriptDiscoveryService.getRunning();
    print("Running scripts:");
    for (var i = 0; i < runningScripts.length; i++) {
        print(JSON.stringify(runningScripts[i]));
    }
     * @returns All Interface scripts that are currently running.
     */
    function getRunning(): ScriptDiscoveryService.RunningScript[];
    /**
     * Gets a list of all script files that are in the default scripts directory of the Interface installation.
     * @returns All scripts in the "scripts" directory of the Interface
        installation.
     */
    function getPublic(): ScriptDiscoveryService.PublicScript[];
    /**
     * @returns Local scripts.
     */
    function getLocal(): ScriptDiscoveryService.LocalScript[];
    /**
     * @param message - Message.
     * @param scriptName - Script name.
     */
    function onPrintedMessage(message: string, scriptName: string): void;
    /**
     * @param message - Message.
     * @param scriptName - Script name.
     */
    function onErrorMessage(message: string, scriptName: string): void;
    /**
     * @param message - Message.
     * @param scriptName - Script name.
     */
    function onWarningMessage(message: string, scriptName: string): void;
    /**
     * @param message - Message.
     * @param scriptName - Script name.
     */
    function onInfoMessage(message: string, scriptName: string): void;
    /**
     * @param url - URL.
     */
    function onErrorLoadingScript(url: string): void;
    function onClearDebugWindow(): void;
    /**
     * @param scriptName - Script name.
     * @param manager - Script manager.
     */
    function onScriptFinished(scriptName: string, manager: any): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Resource</code> API provides values that define the possible loading states of a resource.
 * @property State - The possible loading states of a resource. <em>Read-only.</em>
 */
declare namespace Resource {
    /**
     * The loading state of a resource.
     */
    type State = {
        /**
         * The resource is queued up, waiting to be loaded.
         */
        QUEUED: number;
        /**
         * The resource is downloading.
         */
        LOADING: number;
        /**
         * The resource has finished downloading but is not complete.
         */
        LOADED: number;
        /**
         * The resource has completely finished loading and is ready.
         */
        FINISHED: number;
        /**
         * The resource has failed to download.
         */
        FAILED: number;
    };
}

/**
 * Prints a message to the program log and emits {@link Script.printedMessage}.
The message logged is the message values separated by spaces.
<p>Alternatively, you can use {@link Script.print} or one of the {@link console} API methods.</p>
 * @param [message] - The message values to print.
 */
declare function print(...message: any[]): void;

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Script</code> API provides facilities for working with scripts.
 * @property context - The context that the script is running in:
    <ul>
      <li><code>"client"</code>: An Interface or avatar script.</li>
      <li><code>"entity_client"</code>: A client entity script.</li>
      <li><code>"entity_server"</code>: A server entity script.</li>
      <li><code>"agent"</code>: An assignment client script.</li>
    </ul>
    <em>Read-only.</em>
 * @property type - The type of script that is running:
    <ul>
      <li><code>"client"</code>: An Interface script.</li>
      <li><code>"entity_client"</code>: A client entity script.</li>
      <li><code>"avatar"</code>: An avatar script.</li>
      <li><code>"entity_server"</code>: A server entity script.</li>
      <li><code>"agent"</code>: An assignment client script.</li>
    </ul>
    <em>Read-only.</em>
 * @property filename - The filename of the script file.
    <em>Read-only.</em>
 * @property ExternalPaths - External resource buckets.
 */
declare namespace Script {
    /**
     * Called when an entity event occurs on an entity as registered with {@link Script.addEventHandler}.
     * @param entityID - The ID of the entity the event has occured on.
     */
    type entityEventCallback = (entityID: Uuid) => void;
    /**
     * Called when a pointer event occurs on an entity as registered with {@link Script.addEventHandler}.
     * @param entityID - The ID of the entity the event has occurred on.
     * @param pointerEvent - Details of the event.
     */
    type pointerEventCallback = (entityID: Uuid, pointerEvent: PointerEvent) => void;
    /**
     * Called when a collision event occurs on an entity as registered with {@link Script.addEventHandler}.
     * @param entityA - The ID of one entity in the collision.
     * @param entityB - The ID of the other entity in the collision.
     * @param collisionEvent - Details of the collision.
     */
    type collisionEventCallback = (entityA: Uuid, entityB: Uuid, collisionEvent: TCollision) => void;
    /**
     * <p>The name of an entity event. When the entity event occurs, any function that has been registered for that event
    via {@link Script.addEventHandler} is called with parameters per the entity event.</p>
    <table>
      <thead>
        <tr><th>Event Name</th><th>Callback Type</th><th>Entity Event</th></tr>
      </thead>
      <tbody>
        <tr><td><code>"enterEntity"</code></td><td>{@link Script.entityEventCallback|entityEventCallback}</td>
          <td>{@link Entities.enterEntity}</td></tr>
        <tr><td><code>"leaveEntity"</code></td><td>{@link Script.entityEventCallback|entityEventCallback}</td>
          <td>{@link Entities.leaveEntity}</td></tr>
        <tr><td><code>"mousePressOnEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.mousePressOnEntity}</td></tr>
        <tr><td><code>"mouseMoveOnEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.mouseMoveOnEntity}</td></tr>
        <tr><td><code>"mouseReleaseOnEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.mouseReleaseOnEntity}</td></tr>
        <tr><td><code>"clickDownOnEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.clickDownOnEntity}</td></tr>
        <tr><td><code>"holdingClickOnEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.holdingClickOnEntity}</td></tr>
        <tr><td><code>"clickReleaseOnEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.clickReleaseOnEntity}</td></tr>
        <tr><td><code>"hoverEnterEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.hoverEnterEntity}</td></tr>
        <tr><td><code>"hoverOverEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.hoverOverEntity}</td></tr>
        <tr><td><code>"hoverLeaveEntity"</code></td><td>{@link Script.pointerEventCallback|pointerEventCallback}</td>
          <td>{@link Entities.hoverLeaveEntity}</td></tr>
        <tr><td><code>"collisionWithEntity"</code><td>{@link Script.collisionEventCallback|collisionEventCallback}</td>
          </td><td>{@link Entities.collisionWithEntity}</td></tr>
      </tbody>
    </table>
     */
    type EntityEvent = string;
    /**
     * <p>An external resource bucket.</p>
    <p>The original High Fidelity used "Public", "Content", and "MPAssets" Amazon S3 buckets. The intention is that the
    community-run versions of these will keep the original data and structure, and any new additions will be made to
    Overte's "Assets" bucket. This should ease the transition from High Fidelity and ensure a clean separation.</p>
     */
    type ResourceBuckets = {
        /**
         * Overte assets.
         */
        Assets: Script.ResourceBucket;
        /**
         * Assets that used to be in High Fidelity's <code>hifi-public</code> Amazon
         * S3 bucket.
         */
        HF_Public: Script.ResourceBucket;
        /**
         * Assets that used to be in High Fidelity's <code>hifi-content</code> Amazon
         * S3 bucket.
         */
        HF_Content: Script.ResourceBucket;
        /**
         * Assets that used to be in the High Fidelity's <code>mpassets</code>
         * Amazon S3 bucket. (High Fidelity marketplace.)
         */
        HF_Marketplace: Script.ResourceBucket;
    };
    /**
     * <p>An external resource bucket.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>HF_Public</td><td>Assets that used to be in High Fidelity's <code>hifi-public</code>
          Amazon S3 bucket.</td></tr>
        <tr><td><code>1</code></td><td>HF_Content</td><td>Assets that used to be in High Fidelity's <code>hifi-content</code>
          Amazon S3 bucket.</td></tr>
        <tr><td><code>2</code></td><td>HF_Marketplace</td><td>Assets that used to be in the High Fidelity's
          <code>mpassets</code> Amazon S3 bucket. (High Fidelity marketplace.)</td></tr>
        <tr><td><code>3</code></td><td>Assets</td><td>Overte assets.</td></tr>
      </tbody>
    </table>
     */
    type ResourceBucket = number;
    /**
     * Stops and unloads the current script.
    <p><strong>Warning:</strong> If an assignment client script, the script gets restarted after stopping.</p>
     * @example
     * <caption>Stop a script after 5s.</caption>
    Script.setInterval(function () {
        print("Hello");
    }, 1000);
    
    Script.setTimeout(function () {
        Script.stop(true);
    }, 5000);
     * @param [marshal = false] - Marshal.
        <p class="important">Deprecated: This parameter is deprecated and will be removed.</p>
     */
    function stop(marshal?: boolean): void;
    /**
     * Gets the context that the script is running in: Interface/avatar, client entity, server entity, or assignment client.
     * @returns The context that the script is running in:
    <ul>
      <li><code>"client"</code>: An Interface or avatar script.</li>
      <li><code>"entity_client"</code>: A client entity script.</li>
      <li><code>"entity_server"</code>: A server entity script.</li>
      <li><code>"agent"</code>: An assignment client script.</li>
    </ul>
     */
    function getContext(): string;
    /**
     * Checks whether the script is running as an Interface or avatar script.
     * @returns <code>true</code> if the script is running as an Interface or avatar script, <code>false</code> if it
        isn't.
     */
    function isClientScript(): boolean;
    /**
     * Checks whether the application was compiled as a debug build.
     * @returns <code>true</code> if the application was compiled as a debug build, <code>false</code> if it was
        compiled as a release build.
     */
    function isDebugMode(): boolean;
    /**
     * Checks whether the script is running as a client entity script.
     * @returns <code>true</code> if the script is running as a client entity script, <code>false</code> if it isn't.
     */
    function isEntityClientScript(): boolean;
    /**
     * Checks whether the script is running as a server entity script.
     * @returns <code>true</code> if the script is running as a server entity script, <code>false</code> if it isn't.
     */
    function isEntityServerScript(): boolean;
    /**
     * Checks whether the script is running as an assignment client script.
     * @returns <code>true</code> if the script is running as an assignment client script, <code>false</code> if it
        isn't.
     */
    function isAgentScript(): boolean;
    /**
     * registers a global object by name.
     */
    function registerValue(valueName: string, value: Object): void;
    /**
     * @param exception - Exception.
     * @param inludeExtendeDetails - Include extended details.
     * @returns String.
     */
    function formatExecption(exception: any, inludeExtendeDetails: boolean): string;
    /**
     * Adds a function to the list of functions called when a particular event occurs on a particular entity.
    <p>See also, the {@link Entities} API.</p>
     * @example
     * <caption>Report when a mouse press occurs on a particular entity.</caption>
    var entityID = Entities.addEntity({
        type: "Box",
        position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),
        dimensions: { x: 0.5, y: 0.5, z: 0.5 },
        lifetime: 300  // Delete after 5 minutes.
    });
    
    function reportMousePress(entityID, event) {
        print("Mouse pressed on entity: " + JSON.stringify(event));
    }
    
    Script.addEventHandler(entityID, "mousePressOnEntity", reportMousePress);
     * @param entityID - The ID of the entity.
     * @param eventName - The name of the event.
     * @param handler - The function to
        call when the event occurs on the entity. It can be either the name of a function or an in-line definition.
     */
    function addEventHandler(entityID: Uuid, eventName: Script.EntityEvent, handler: Script.entityEventCallback | Script.pointerEventCallback | Script.collisionEventCallback): void;
    /**
     * Removes a function from the list of functions called when an entity event occurs on a particular entity.
    <p>See also, the {@link Entities} API.</p>
     * @param entityID - The ID of the entity.
     * @param eventName - The name of the entity event.
     * @param handler - The name of the function to no longer call when the entity event occurs on the entity.
     */
    function removeEventHandler(entityID: Uuid, eventName: Script.EntityEvent, handler: (...params: any[]) => any): void;
    /**
     * Starts running another script in Interface, if it isn't already running. The script is not automatically loaded next
    time Interface starts.
    <p class="availableIn"><strong>Supported Script Types:</strong> Interface Scripts &bull; Avatar Scripts</p>
    <p>See also, {@link ScriptDiscoveryService.loadScript}.</p>
     * @example
     * <caption>Load a script from another script.</caption>
    // First file: scriptA.js
    print("This is script A");
    
    // Second file: scriptB.js
    print("This is script B");
    Script.load("scriptA.js");
    
    // If you run scriptB.js you should see both scripts in the Running Scripts dialog.
    // And you should see the following output:
    // This is script B
    // This is script A
     * @param filename - The URL of the script to load. This can be relative to the current script's URL.
     */
    function load(filename: string): void;
    /**
     * Includes JavaScript from other files in the current script. If a callback is specified, the files are loaded and
    included asynchronously, otherwise they are included synchronously (i.e., script execution blocks while the files are
    included).
     * @param filenames - The URLs of the scripts to include. Each can be relative to the current script.
     * @param [callback = null] - The function to call back when the scripts have been included. It can be either the
        name of a function or an in-line definition.
     */
    function include(filenames: string[], callback?: (...params: any[]) => any): void;
    /**
     * Includes JavaScript from another file in the current script. If a callback is specified, the file is loaded and included
    asynchronously, otherwise it is included synchronously (i.e., script execution blocks while the file is included).
     * @example
     * <caption>Include a script file asynchronously.</caption>
    // First file: scriptA.js
    print("This is script A");
    
    // Second file: scriptB.js
    print("This is script B");
    Script.include("scriptA.js", function () {
        print("Script A has been included");
    });
    
    // If you run scriptB.js you should see only scriptB.js in the running scripts list.
    // And you should see the following output:
    // This is script B
    // This is script A
    // Script A has been included
     * @param filename - The URL of the script to include. It can be relative to the current script.
     * @param [callback = null] - The function to call back when the script has been included. It can be either the
        name of a function or an in-line definition.
     */
    function include(filename: string, callback?: (...params: any[]) => any): void;
    /**
     * Provides access to methods or objects provided in an external JavaScript or JSON file.
    See {@link https://docs.overte.org/script/js-tips.html} for further details.
     * @param module - The module to use. May be a JavaScript file, a JSON file, or the name of a system module such
        as <code>"appUi"</code> (i.e., the "appUi.js" system module JavaScript file).
     * @returns The value assigned to <code>module.exports</code> in the JavaScript file, or the value defined
        in the JSON file.
     */
    function require(module: string): any | any[];
    /**
     * @param [deleteScriptCache = false] - Delete script cache.
     */
    function resetModuleCache(deleteScriptCache?: boolean): void;
    /**
     * Calls a function repeatedly, at a set interval.
     * @example
     * <caption>Print a message every second.</caption>
    Script.setInterval(function () {
        print("Interval timer fired");
    }, 1000);
     * @param function - The function to call. This can be either the name of a function or an in-line definition.
     * @param interval - The interval at which to call the function, in ms.
     * @returns A handle to the interval timer. This can be used in {@link Script.clearInterval}.
     */
    function setInterval(fn: (...params: any[]) => any, interval: number): any;
    /**
     * Calls a function once, after a delay.
     * @example
     * <caption>Print a message once, after a second.</caption>
    Script.setTimeout(function () {
        print("Timeout timer fired");
    }, 1000);
     * @param function - The function to call. This can be either the name of a function or an in-line definition.
     * @param timeout - The delay after which to call the function, in ms.
     * @returns A handle to the timeout timer. This can be used in {@link Script.clearTimeout}.
     */
    function setTimeout(fn: (...params: any[]) => any, timeout: number): any;
    /**
     * Stops an interval timer set by {@link Script.setInterval|setInterval}.
     * @example
     * <caption>Stop an interval timer.</caption>
    // Print a message every second.
    var timer = Script.setInterval(function () {
        print("Interval timer fired");
    }, 1000);
    
    // Stop the timer after 10 seconds.
    Script.setTimeout(function () {
        print("Stop interval timer");
        Script.clearInterval(timer);
    }, 10000);
     * @param timer - The interval timer to stop.
     */
    function clearInterval(timer: any): void;
    /**
     * Stops a timeout timer set by {@link Script.setTimeout|setTimeout}.
     * @example
     * <caption>Stop a timeout timer.</caption>
    // Print a message after two seconds.
    var timer = Script.setTimeout(function () {
        print("Timer fired");
    }, 2000);
    
    // Uncomment the following line to stop the timer from firing.
    //Script.clearTimeout(timer);
     * @param timer - The timeout timer to stop.
     */
    function clearTimeout(timer: any): void;
    /**
     * Prints a message to the program log and emits {@link Script.printedMessage}.
    <p>Alternatively, you can use {@link print} or one of the {@link console} API methods.</p>
     * @param message - The message to print.
     */
    function print(message: string): void;
    /**
     * Resolves a relative path to an absolute path. The relative path is relative to the script's location.
     * @example
     * <caption>Report the directory and filename of the running script.</caption>
    print(Script.resolvePath(""));
     * @example
     * <caption>Report the directory of the running script.</caption>
    print(Script.resolvePath("."));
     * @example
     * <caption>Report the path to a file located relative to the running script.</caption>
    print(Script.resolvePath("../assets/sounds/hello.wav"));
     * @param path - The relative path to resolve.
     * @returns The absolute path.
     */
    function resolvePath(path: string): string;
    /**
     * Gets the path to the resources directory for QML files.
     * @returns The path to the resources directory for QML files.
     */
    function resourcesPath(): string;
    /**
     * Starts timing a section of code in order to send usage data about it to Vircadia. Shouldn't be used outside of the
    standard scripts.
     * @param label - A name that identifies the section of code.
     */
    function beginProfileRange(label: string): void;
    /**
     * Finishes timing a section of code in order to send usage data about it to Vircadia. Shouldn't be used outside of
    the standard scripts.
     * @param label - A name that identifies the section of code.
     */
    function endProfileRange(label: string): void;
    /**
     * Checks whether an entity has an entity script running.
     * @param entityID - The ID of the entity.
     * @returns <code>true</code> if the entity has an entity script running, <code>false</code> if it doesn't.
     */
    function isEntityScriptRunning(entityID: Uuid): boolean;
    /**
     * Manually runs the JavaScript garbage collector which reclaims memory by disposing of objects that are no longer
    reachable.
     */
    function requestGarbageCollection(): void;
    /**
     * Prints out current backtrace to the log.
     * @param title - Title added to the printed out backtrace.
     */
    function logBacktrace(title: string): void;
    /**
     * @param entityID - Entity ID.
     * @param script - Script.
     * @param forceRedownload - Force re-download.
     */
    function loadEntityScript(entityID: Uuid, script: string, forceRedownload: boolean): void;
    /**
     * @param entityID - Entity ID.
     * @param [shouldRemoveFromMap = false] - Should remove from map.
     */
    function unloadEntityScript(entityID: Uuid, shouldRemoveFromMap?: boolean): void;
    /**
     * @param [blockingCall = false] - Wait for completion if call moved to another thread.
     */
    function unloadAllEntityScripts(blockingCall?: boolean): void;
    /**
     * Calls a method in an entity script.
     * @param entityID - Entity ID.
     * @param methodName - Method name.
     * @param otherID - Other entity ID.
     * @param collision - Collision.
     */
    function callEntityScriptMethod(entityID: Uuid, methodName: string, otherID: Uuid, collision: TCollision): void;
    /**
     * @returns A new UUID.
     */
    function generateUUID(): Uuid;
    /**
     * Gets the URL for an asset in an external resource bucket. (The location where the bucket is hosted may change over time
    but this method will return the asset's current URL.)
     * @example
     * <caption>Report the URL of a default particle.</caption>
    print(Script.getExternalPath(Script.ExternalPaths.Assets, "Bazaar/Assets/Textures/Defaults/Interface/default_particle.png"));
     * @example
     * <caption>Report the root directory where the Vircadia assets are located.</caption>
    print(Script.getExternalPath(Script.ExternalPaths.Assets, "."));
     * @param bucket - The external resource bucket that the asset is in.
     * @param path - The path within the external resource bucket where the asset is located.
        <p>Normally, this should start with a path or filename to be appended to the bucket URL.
        Alternatively, it can be a relative path starting with <code>./</code> or <code>../</code>, to navigate within the
        resource bucket's URL.</p>
     * @returns The URL of an external asset.
     */
    function getExternalPath(bucket: Script.ResourceBucket, path: string): string;
    /**
     * <p>Object containing memory usage statistics data.</p>
    <table>
      <thead>
        <tr><th>Name</th><th>Type</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>totalHeapSize</code></td><td>{number}</td><td>Total heap size allocated by scripting engine.</td></tr>
        <tr><td><code>usedHeapSize</code></td><td>{number}</td><td></td>Amount of heap memory that is currently in use.</tr>
        <tr><td><code>totalAvailableSize</code></td><td>{number}</td><td>Amount of remaining available heap memory</td></tr>
        <tr><td><code>totalGlobalHandlesSize</code></td><td>{number}</td><td>V8-specific property</td></tr>
        <tr><td><code>usedGlobalHandlesSize</code></td><td>{number}</td><td>V8-specific property</td></tr>
      </tbody>
    </table>
     */
    type MemoryUsageData = any;
    /**
     * Returns memory usage statistics data.
     * @returns Object containing statistics about memory usage.
     */
    function getMemoryUsageStatistics(): Script.MemoryUsageData;
    /**
     * Prints heap statistics to a file. Collecting needs to first be started with Script.dumpHeapObjectStatistics().
     */
    function dumpHeapObjectStatistics(): void;
    /**
     * Create test object for garbage collector debugging.
     * @returns Test object.
     */
    function createGarbageCollectorDebuggingObject(): any;
    /**
     * @param function - Function.
     * @param [type = 2] - Connection type.
     */
    function executeOnScriptThread(fn: (...params: any[]) => any, type?: number): void;
    /**
     * @param module - Module.
     * @param [relativeTo = ""] - Relative to.
     * @returns Result.
     */
    function _requireResolve(module: string, relativeTo?: string): string;
    /**
     * @param entityID - Entity ID.
     * @param scriptOrURL - Path.
     * @param contents - Contents.
     * @param isURL - Is a URL.
     * @param success - Success.
     * @param status - Status.
     */
    function entityScriptContentAvailable(entityID: Uuid, scriptOrURL: string, contents: string, isURL: boolean, success: boolean, status: string): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Information on the scripts that are in the default scripts directory of the Interface installation. This is provided as a
property of {@link ScriptDiscoveryService}.

<p>The information provided reflects the subdirectory structure. Methods and signals are per QT's
<a href="http://doc.qt.io/qt-5/qabstractitemmodel.html">QAbstractItemModel</a> class, with the following details:</p>
<ul>
  <li>A single column of data: <code>columnCount(index)</code> returns <code>1</code>. </li>
  <li>Data is provided for the following roles:
    <table>
      <thead>
        <tr><th>Role</th><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td>Display</td><td><code>0</code></td><td>The directory or script file name.</td></tr>
        <tr><td>Path</td><td><code>256</code></td><td>The path and filename of the data item if it is a script,
        <code>undefined</code> if it is a directory.</td></tr>
      </tbody>
    </table>
  </li>
  <li>Use <code>null</code> for the root directory's index.</li>
</ul>
 * @example
 * <caption>List the first 2 levels of the scripts directory.</caption>
var MAX_DIRECTORY_LEVEL = 1;
var DISPLAY_ROLE = 0;
var PATH_ROLE = 256;

function printDirectory(parentIndex, directoryLevel, indent) {
    var numRows = ScriptDiscoveryService.scriptsModel.rowCount(parentIndex);
    for (var i = 0; i < numRows; i++) {
        var rowIndex = ScriptDiscoveryService.scriptsModel.index(i, 0, parentIndex);

        var name = ScriptDiscoveryService.scriptsModel.data(rowIndex, DISPLAY_ROLE);
        var hasChildren = ScriptDiscoveryService.scriptsModel.hasChildren(rowIndex);
        var path = hasChildren ? "" : ScriptDiscoveryService.scriptsModel.data(rowIndex, PATH_ROLE);

        print(indent + "- " + name + (hasChildren ? "" : " - " + path));

        if (hasChildren && directoryLevel < MAX_DIRECTORY_LEVEL) {
            printDirectory(rowIndex, directoryLevel + 1, indent + "    ");
        }
    }
}

print("Scripts:");
printDirectory(null, 0, "");  // null index for the root directory.
 */
declare class ScriptsModel {
    /**
     * @param newPath - New path.
     */
    static updateScriptsLocation(newPath: string): void;
    static downloadFinished(): void;
    static reloadLocalFiles(): void;
    static reloadDefaultFiles(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Sorted and filtered information on the scripts that are in the default scripts directory of the Interface installation. This
is provided as a property of {@link ScriptDiscoveryService}.

<p>The information provided reflects the subdirectory structure. Properties, methods, and signals are per QT's
<a href="https://doc.qt.io/qt-5/qsortfilterproxymodel.html">QSortFilterProxyModel</a> class, with the following details:</p>
<ul>
  <li>The rows are sorted per directory and file names.</li>
  <li>A single column of data: <code>columnCount(index)</code> returns <code>1</code>. </li>
  <li>Data is provided for the following roles:
    <table>
      <thead>
        <tr><th>Role</th><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td>Display</td><td><code>0</code></td><td>The directory or script file name.</td></tr>
        <tr><td>Path</td><td><code>256</code></td><td>The path and filename of the data item if it is a script,
        <code>undefined</code> if it is a directory.</td></tr>
      </tbody>
    </table>
  </li>
  <li>Use <code>null</code> for the root directory's index.</li>
</ul>
 * @example
 * <caption>List all scripts that include "edit" in their name.</caption>
var DISPLAY_ROLE = 0;
var PATH_ROLE = 256;

function printDirectory(parentIndex, directoryLevel, indent) {
    var numRows = ScriptDiscoveryService.scriptsModelFilter.rowCount(parentIndex);
    for (var i = 0; i < numRows; i++) {
        var rowIndex = ScriptDiscoveryService.scriptsModelFilter.index(i, 0, parentIndex);

        var name = ScriptDiscoveryService.scriptsModelFilter.data(rowIndex, DISPLAY_ROLE);
        var hasChildren = ScriptDiscoveryService.scriptsModelFilter.hasChildren(rowIndex);
        var path = hasChildren ? "" : ScriptDiscoveryService.scriptsModelFilter.data(rowIndex, PATH_ROLE);

        print(indent + "- " + name + (hasChildren ? "" : " - " + path));

        if (hasChildren) {
            printDirectory(rowIndex, directoryLevel + 1, indent + "    ");
        }
    }
}

ScriptDiscoveryService.scriptsModelFilter.filterRegExp = new RegExp("^.*edit.*$", "i");  // Set the filter.
print("Edit scripts:");
printDirectory(null, 0, "");  // null index for the root directory.
 *
 */
declare class ScriptsModelFilter {
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Uuid</code> API provides facilities for working with UUIDs.
 * @property NULL - The null UUID, <code>"{00000000-0000-0000-0000000000000000}"</code>.
 */
declare namespace Uuid {
    /**
     * Generates a UUID from a string representation of the UUID.
     * @example
     * <caption>Valid and invalid parameters.</caption>
    var uuid = Uuid.fromString("{527c27ea-6d7b-4b47-9ae2b3051d50d2cd}");
    print(uuid); // {527c27ea-6d7b-4b47-9ae2b3051d50d2cd}
    
    uuid = Uuid.fromString("527c27ea-6d7b-4b47-9ae2-b3051d50d2cd");
    print(uuid); // {527c27ea-6d7b-4b47-9ae2b3051d50d2cd}
    
    uuid = Uuid.fromString("527c27ea");
    print(uuid); // null
     * @param string - A string representation of a UUID. The curly braces are optional.
     * @returns A UUID if the given <code>string</code> is valid, <code>null</code> otherwise.
     */
    function fromString(string: string): Uuid;
    /**
     * Generates a string representation of a UUID. However, because UUIDs are represented in JavaScript as strings, this is in
    effect a no-op.
     * @param id - The UUID to generate a string from.
     * @returns - A string representation of the UUID.
     */
    function toString(id: Uuid): string;
    /**
     * Generates a new UUID.
     * @example
     * <caption>Generate a new UUID and reports its JavaScript type.</caption>
    var uuid = Uuid.generate();
    print(uuid);        // {nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnnnnnn}
    print(Class<uuid); // string
    />
     * @returns A new UUID.
     */
    function generate(): Uuid;
    /**
     * Tests whether two UUIDs are equal.
     * @example
     * <caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>
    var uuidA = Uuid.generate();
    var uuidB = Uuid.generate();
    print(Uuid.isEqual(uuidA, uuidB)); // false
    uuidB = uuidA;
    print(Uuid.isEqual(uuidA, uuidB)); // true
     * @param idA - The first UUID to compare.
     * @param idB - The second UUID to compare.
     * @returns <code>true</code> if the two UUIDs are equal, otherwise <code>false</code>.
     */
    function isEqual(idA: Uuid, idB: Uuid): boolean;
    /**
     * Tests whether a UUID is null.
     * @example
     * <caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>
    var uuid; // undefined
    print(Uuid.isNull(uuid)); // false
    uuid = Uuid.generate();
    print(Uuid.isNull(uuid)); // false
    uuid = Uuid.NULL;
    print(Uuid.isNull(uuid)); // true
    uuid = null;
    print(Uuid.isNull(uuid)); // true
     * @param id - The UUID to test.
     * @returns <code>true</code> if the UUID equals <code>Uuid.NULL</code> or is <code>null</code>, otherwise
        <code>false</code>.
     */
    function isNull(id: Uuid): boolean;
    /**
     * Prints a UUID to the program log, as a text label followed by the UUID value.
     * @example
     * <caption>Two ways of printing a label plus UUID.</caption>
    var uuid = Uuid.generate();
    Uuid.print("Generated UUID:", uuid); // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnnnnnn}
    print("Generated UUID: " + uuid);    // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnnnnnn}
     *
     * @param label - The label to print.
     * @param id - The UUID to print.
     */
    function print(label: string, id: Uuid): void;
}

/**
 * An axis-aligned cube, defined as the bottom right near (minimum axes values) corner of the cube plus the dimension of its
sides.
 */
declare type AACube = {
    /**
     * X coordinate of the brn corner of the cube.
     */
    x: number;
    /**
     * Y coordinate of the brn corner of the cube.
     */
    y: number;
    /**
     * Z coordinate of the brn corner of the cube.
     */
    z: number;
    /**
     * The dimensions of each side of the cube.
     */
    scale: number;
};

/**
 * Details of a collision between avatars and entities.
 */
declare type TCollision = {
    /**
     * The contact type of the collision event.
     */
    type: ContactEventType;
    /**
     * The ID of one of the avatars or entities in the collision.
     */
    idA: Uuid;
    /**
     * The ID of the other of the avatars or entities in the collision.
     */
    idB: Uuid;
    /**
     * The amount of penetration between the two items.
     */
    penetration: TVec3;
    /**
     * The point of contact.
     */
    contactPoint: TVec3;
    /**
     * The change in relative velocity of the two items, in m/s.
     */
    velocityChange: TVec3;
};

/**
 * A 2D size value.
 */
declare type Size = {
    /**
     * The height value.
     */
    height: number;
    /**
     * The width value.
     */
    width: number;
};

/**
 * A triangle in a mesh.
 */
declare type MeshFace = {
    /**
     * The indexes of the three vertices that make up the face.
     */
    vertices: number[];
};



declare type Vec3Pair = [[TVec3, TVec3], [TVec3, TVec3]];

/**
 * A color vector with real values. Values may also be <code>null</code>. See also the {@link TVec3(0)|Vec3} object.
 * @example
 * <caption>ColorFloats can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>
Entities.editEntity(<id>, { color: { x: 1, y: 2, z: 3 }});                 // { red: 1, green: 2, blue: 3 }
Entities.editEntity(<id>, { color: { r: 4, g: 5, b: 6 }});                 // { red: 4, green: 5, blue: 6 }
Entities.editEntity(<id>, { color: { red: 7, green: 8, blue: 9 }});        // { red: 7, green: 8, blue: 9 }
Entities.editEntity(<id>, { color: [10, 11, 12] });                        // { red: 10, green: 11, blue: 12 }
Entities.editEntity(<id>, { color: 13 });                                  // { red: 13, green: 13, blue: 13 }
var color = Entities.getEntityProperties(<id>).color;                      // { red: 13, green: 13, blue: 13 }
color.g = 14;                                                              // { red: 13, green: 14, blue: 13 }
color.blue = 15;                                                           // { red: 13, green: 14, blue: 15 }
Entities.editEntity(<id>, { color: "red"});                                // { red: 255, green: 0, blue: 0 }
Entities.editEntity(<id>, { color: "#00FF00"});                            // { red: 0, green: 255, blue: 0 }
 */
declare type ColorFloat = {
    /**
     * Red component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>r</code>, <code>x</code>.
     */
    red: number;
    /**
     * Green component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>g</code>, <code>y</code>.
     */
    green: number;
    /**
     * Blue component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>b</code>, <code>z</code>.
     */
    blue: number;
};

/**
 * Defines a rectangular portion of an image or screen, or similar.
 */
declare type Rect = {
    /**
     * Left, x-coordinate value.
     */
    x: number;
    /**
     * Top, y-coordinate value.
     */
    y: number;
    /**
     * Width of the rectangle.
     */
    width: number;
    /**
     * Height of the rectangle.
     */
    height: number;
};

/**
 * UUIDs (Universally Unique IDentifiers) are used to uniquely identify entities, avatars, and the like. They are represented
in JavaScript as strings in the format, <code>"{nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnnnnnn}"</code>, where the "n"s are
hexadecimal digits.
 */
declare type Uuid = string;

/**
 * A display or device touch event.
 * @example
 * <caption>Report the TouchEvent details when a touch event starts.</caption>
Controller.touchBeginEvent.connect(function (event) {
    print(JSON.stringify(event));
});
 *
 */
declare type TouchEvent = {
    /**
     * Integer x-coordinate of the average position of the touch events.
     */
    x: number;
    /**
     * Integer y-coordinate of the average position of the touch events.
     */
    y: number;
    /**
     * <code>true</code> if the touch point has just been pressed, otherwise <code>false</code>.
     */
    isPressed: boolean;
    /**
     * <code>true</code> if the touch point has moved, otherwise <code>false</code>.
     */
    isMoved: boolean;
    /**
     * <code>true</code> if the touch point has not moved, otherwise <code>false</code>.
     */
    isStationary: boolean;
    /**
     * <code>true</code> if the  touch point has just been released, otherwise <code>false</code>.
     */
    isReleased: boolean;
    /**
     * <code>true</code> if the Shift key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isShifted: boolean;
    /**
     * <code>true</code> if the "meta" key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "meta" key is the Windows key; on OSX it is the Control (Splat) key.
     */
    isMeta: boolean;
    /**
     * <code>true</code> if the "control" key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "control" key is the Ctrl key; on OSX it is the Command key.
     */
    isControl: boolean;
    /**
     * <code>true</code> if the Alt key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isAlt: boolean;
    /**
     * Integer number of touch points.
     */
    touchPoints: number;
    /**
     * The coordinates of the touch points.
     */
    points: TVec2[];
    /**
     * The radius of a circle centered on their average position that encompasses the touch points.
     */
    radius: number;
    /**
     * <code>true</code> if the <code>radius</code> has reduced since the most recent touch event
     * with a different <code>radius</code> value, otherwise <code>false</code>.
     */
    isPinching: boolean;
    /**
     * <code>true</code> if the <code>radius</code> has increased since the most recent touch
     * event with a different <code>radius</code> value, otherwise <code>false</code>.
     */
    isPinchOpening: boolean;
    /**
     * An angle calculated from the touch points, in degrees.
     */
    angle: number;
    /**
     * The change in the <code>angle</code> value since the previous touch event, in degrees, if
     * the number of touch points is the same, otherwise <code>0.0</code>.
     */
    deltaAngle: number;
    /**
     * The angles of each touch point about the center of all the touch points, in degrees.
     */
    angles: number[];
    /**
     * <code>true</code> if the <code>angle</code> of the touch event has changed since the
     * previous touch event and the number of touch points is the same, otherwise <code>false</code>.
     */
    isRotating: boolean;
    /**
     * <code>"clockwise"</code> or <code>"counterClockwise"</code> if the <code>angle</code> of the
     * touch event has changed since the previous touch event and the number of touch points is the same, otherwise
     * <code>"none"</code>.
     */
    rotating: string;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>Users</code> API provides features to regulate your interaction with other users.
 * @property canKick - <code>true</code> if the domain server allows the client to kick (ban) avatars, otherwise
    <code>false</code>. <em>Read-only.</em>
 * @property requestsDomainListData - <code>true</code> if the client requests extra data from the mixers (such as
    positional data of an avatar they've ignored). <em>Read-only.</em>
 * @property NO_BAN - Do not ban user. <em>Read-only.</em>
 * @property BAN_BY_USERNAME - Ban user by username. <em>Read-only.</em>
 * @property BAN_BY_FINGERPRINT - Ban user by fingerprint. <em>Read-only.</em>
 * @property BAN_BY_IP - Ban user by IP address. <em>Read-only.</em>
 */
declare namespace Users {
    /**
     * Ignores or un-ignores another avatar. Ignoring an avatar makes them disappear for you and you disappear for them.
     * @example
     * <caption>Ignore a nearby avatar for a few seconds.</caption>
    var avatars = AvatarList.getAvatarsInRange(MyAvatar.position, 1000);
    if (avatars.length > 1) {  // Skip own avatar which is provided in position 0.
        print("Ignore: " + avatars[1]);
        Users.ignore(avatars[1], true);
        Script.setTimeout(function () {
            print("Un-ignore: " + avatars[1]);
            Users.ignore(avatars[1], false);
        }, 5000);
    } else {
        print("No avatars");
    }
     * @param sessionID - The session ID of the avatar to ignore.
     * @param [enable = true] - <code>true</code> to ignore, <code>false</code> to un-ignore.
     */
    function ignore(sessionID: Uuid, enable?: boolean): void;
    /**
     * Gets whether or not you have ignored a particular avatar.
     * @param sessionID - The session ID of the avatar to get the ignore status of.
     * @returns <code>true</code> if the avatar is being ignored, <code>false</code> if it isn't.
     */
    function getIgnoreStatus(sessionID: Uuid): boolean;
    /**
     * Mutes or un-mutes another avatar. Muting makes you unable to hear them and them unable to hear you.
     * @param sessionID - The session ID of the avatar to mute.
     * @param [muteEnabled = true] - <code>true</code> to mute, <code>false</code> to un-mute.
     */
    function personalMute(sessionID: Uuid, muteEnabled?: boolean): void;
    /**
     * Gets whether or not you have muted a particular avatar.
     * @param sessionID - The session ID of the avatar to get the mute status of.
     * @returns <code>true</code> if the avatar is muted, <code>false</code> if it isn't.
     */
    function getPersonalMuteStatus(sessionID: Uuid): boolean;
    /**
     * Sets an avatar's gain (volume) for you and you only, or sets the master gain.
     * @param nodeID - The session ID of the avatar to set the gain for, or <code>null</code> to set the master gain.
     * @param gain - The gain to set, in dB.
     */
    function setAvatarGain(nodeID: Uuid, gain: number): void;
    /**
     * Gets an avatar's gain (volume) for you and you only, or gets the master gain.
     * @param nodeID - The session ID of the avatar to get the gain for, or <code>null</code> to get the master gain.
     * @returns The gain, in dB.
     */
    function getAvatarGain(nodeID: Uuid): number;
    /**
     * Kicks and bans a user. This removes them from the server and prevents them from returning. The ban is by user name (if
    available) and by machine fingerprint. The ban functionality can be controlled with flags.
    <p>This function only works if you're an administrator of the domain you're in.</p>
     * @param sessionID - The session ID of the user to kick and ban.
     * @param undefined - Preferred ban flags. <i>Bans a user by username (if available) and machine fingerprint by default.</i>
     */
    function kick(sessionID: Uuid): void;
    /**
     * Mutes a user's microphone for everyone. The mute is not permanent: the user can unmute themselves.
    <p>This function only works if you're an administrator of the domain you're in.</p>
     * @param sessionID - The session ID of the user to mute.
     */
    function mute(sessionID: Uuid): void;
    /**
     * Requests the user name and machine fingerprint associated with the given UUID. The user name is returned via a
    {@link Users.usernameFromIDReply|usernameFromIDReply} signal.
    <p>This function only works if you're an administrator of the domain you're in.</p>
     * @example
     * <caption>Report the user name and fingerprint of a nearby user.</caption>
    function onUsernameFromIDReply(sessionID, userName, machineFingerprint, isAdmin) {
        print("Session:     " + sessionID);
        print("User name:   " + userName);
        print("Fingerprint: " + machineFingerprint);
        print("Is admin:    " + isAdmin);
    }
    
    Users.usernameFromIDReply.connect(onUsernameFromIDReply);
    
    var avatars = AvatarList.getAvatarsInRange(MyAvatar.position, 1000);
    if (avatars.length > 1) {  // Skip own avatar which is provided in position 0.
        print("Request data for: " + avatars[1]);
        Users.requestUsernameFromID(avatars[1]);
    } else {
        print("No avatars");
    }
     * @param sessionID - The session ID of the user to get the user name and machine fingerprint of.
     */
    function requestUsernameFromID(sessionID: Uuid): void;
    /**
     * Gets whether the client can kick and ban users in the domain.
     * @returns <code>true</code> if the domain server allows the client to kick and ban users, otherwise
        <code>false</code>.
     */
    function getCanKick(): boolean;
    /**
     * Toggles the state of the privacy shield.
     */
    function toggleIgnoreRadius(): void;
    /**
     * Enables the privacy shield.
     */
    function enableIgnoreRadius(): void;
    /**
     * Disables the privacy shield.
     */
    function disableIgnoreRadius(): void;
    /**
     * Gets the status of the privacy shield.
     * @returns <code>true</code> if the privacy shield is enabled, <code>false</code> if it is disabled.
     */
    function getIgnoreRadiusEnabled(): boolean;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Vec3</code> API provides facilities for generating and manipulating 3-dimensional vectors. Overte uses a
right-handed Cartesian coordinate system where the y-axis is the "up" and the negative z-axis is the "front" direction.
<img alt="Overte coordinate system" src="https://apidocs.overte.org/images/opengl-coord-system.jpg" />
 * @property UNIT_X - <code>{ x: 1, y: 0, z: 0 }</code> : Unit vector in the x-axis direction. <em>Read-only.</em>
 * @property UNIT_Y - <code>{ x: 0, y: 1, z: 0 }</code> : Unit vector in the y-axis direction. <em>Read-only.</em>
 * @property UNIT_Z - <code>{ x: 0, y: 0, z: 1 }</code> : Unit vector in the z-axis direction. <em>Read-only.</em>
 * @property UNIT_NEG_X - <code>{ x: -1, y: 0, z: 0 }</code> : Unit vector in the negative x-axis direction.
    <em>Read-only.</em>
 * @property UNIT_NEG_Y - <code>{ x: 0, y: -1, z: 0 }</code> : Unit vector in the negative y-axis direction.
    <em>Read-only.</em>
 * @property UNIT_NEG_Z - <code>{ x: 0, y: 0, z: -1 }</code> : Unit vector in the negative z-axis direction.
    <em>Read-only.</em>
 * @property UNIT_XY - <code>{ x: 0.707107, y: 0.707107, z: 0 }</code> : Unit vector in the direction of the diagonal
    between the x and y axes. <em>Read-only.</em>
 * @property UNIT_XZ - <code>{ x: 0.707107, y: 0, z: 0.707107 }</code> : Unit vector in the direction of the diagonal
    between the x and z axes. <em>Read-only.</em>
 * @property UNIT_YZ - <code>{ x: 0, y: 0.707107, z: 0.707107 }</code> : Unit vector in the direction of the diagonal
    between the y and z axes. <em>Read-only.</em>
 * @property UNIT_XYZ - <code>{ x: 0.577350, y: 0.577350, z: 0.577350 }</code> : Unit vector in the direction of the
    diagonal between the x, y, and z axes. <em>Read-only.</em>
 * @property FLOAT_MAX - <code>{ x: 3.402823e+38, y: 3.402823e+38, z: 3.402823e+38 }</code> : Vector with all axis
    values set to the maximum floating point value. <em>Read-only.</em>
 * @property FLOAT_MIN - <code>{ x: -3.402823e+38, y: -3.402823e+38, z: -3.402823e+38 }</code> : Vector with all axis
    values set to the negative of the maximum floating point value. <em>Read-only.</em>
 * @property ZERO - <code>{ x: 0, y: 0, z: 0 }</code> : Vector with all axis values set to <code>0</code>.
    <em>Read-only.</em>
 * @property ONE - <code>{ x: 1, y: 1, z: 1 }</code> : Vector with all axis values set to <code>1</code>.
    <em>Read-only.</em>
 * @property TWO - <code>{ x: 2, y: 2, z: 2 }</code> : Vector with all axis values set to <code>2</code>.
    <em>Read-only.</em>
 * @property HALF - <code>{ x: 0.5, y: 0.5, z: 0.5 }</code> : Vector with all axis values set to <code>0.5</code>.
    <em>Read-only.</em>
 * @property RIGHT - <code>{ x: 1, y: 0, z: 0 }</code> : Unit vector in the "right" direction. Synonym for
    <code>UNIT_X</code>. <em>Read-only.</em>
 * @property UP - <code>{ x: 0, y: 1, z: 0 }</code> : Unit vector in the "up" direction. Synonym for
    <code>UNIT_Y</code>. <em>Read-only.</em>
 * @property FRONT - <code>{ x: 0, y: 0, z: -1 }</code> : Unit vector in the "front" direction. Synonym for
    <code>UNIT_NEG_Z</code>. <em>Read-only.</em>
 */
declare namespace Vec3 {
    /**
     * Calculates the reflection of a vector in a plane.
     * @example
     * <caption>Reflect a vector in the x-z plane.</caption>
    var v = { x: 1, y: 2, z: 3 };
    var normal = Vec3.UNIT_Y;
    var reflected = Vec3.reflect(v, normal);
    print(JSON.stringify(reflected));  // {"x":1,"y":-2,"z":3}
     * @param v - The vector to reflect.
     * @param normal - The normal of the plane.
     * @returns The vector reflected in the plane given by the normal.
     */
    function reflect(v: TVec3, normal: TVec3): TVec3;
    /**
     * Calculates the cross product of two vectors.
     * @example
     * <caption>The cross product of x and y unit vectors is the z unit vector.</caption>
    var v1 = { x: 1, y: 0, z: 0 };
    var v2 = { x: 0, y: 1, z: 0 };
    var crossProduct = Vec3.cross(v1, v2);
    print(JSON.stringify(crossProduct)); // {"x":0,"y":0,"z":1}
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns The cross product of <code>v1</code> and <code>v2</code>.
     */
    function cross(v1: TVec3, v2: TVec3): TVec3;
    /**
     * Calculates the dot product of two vectors.
     * @example
     * <caption>The dot product of vectors at right angles is <code>0</code>.</caption>
    var v1 = { x: 1, y: 0, z: 0 };
    var v2 = { x: 0, y: 1, z: 0 };
    var dotProduct = Vec3.dot(v1, v2);
    print(dotProduct); // 0
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns The dot product of <code>v1</code> and <code>v2</code>.
     */
    function dot(v1: TVec3, v2: TVec3): number;
    /**
     * Multiplies a vector by a scale factor.
     * @param scale - The scale factor.
     * @param v - The vector.
     * @returns The vector with each ordinate value multiplied by the <code>scale</code>.
     */
    function multiply(scale: number, v: TVec3): TVec3;
    /**
     * Multiplies two vectors.
     * @example
     * <caption>Multiply two vectors.</caption>
    var v1 = { x: 1, y: 2, z: 3 };
    var v2 = { x: 1, y: 2, z: 3 };
    var multiplied = Vec3.multiplyVbyV(v1, v2);
    print(JSON.stringify(multiplied));  // {"x":1,"y":4,"z":9}
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns A vector formed by multiplying the ordinates of two vectors: <code>{ x: v1.x * v2.x, y: v1.y * v2.y,
        z: v1.z * v2.z }</code>.
     */
    function multiplyVbyV(v1: TVec3, v2: TVec3): TVec3;
    /**
     * Rotates a vector.
     * @example
     * <caption>Rotate the negative z-axis by 90 degrees about the x-axis.</caption>
    var v = Vec3.UNIT_NEG_Z;
    var q = Quat.fromPitchYawRollDegrees(90, 0, 0);
    var result = Vec3.multiplyQbyV(q, v);
    print(JSON.stringify(result));  // {"x":0,"y":1.000,"z":1.19e7}
     * @param q - The rotation to apply.
     * @param v - The vector to rotate.
     * @returns <code>v</code> rotated by <code>q</code>.
     */
    function multiplyQbyV(q: TQuat, v: TVec3): TVec3;
    /**
     * Calculates the sum of two vectors.
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns The sum of the two vectors.
     */
    function sum(v1: TVec3, v2: TVec3): TVec3;
    /**
     * Calculates one vector subtracted from another.
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns The second vector subtracted from the first.
     */
    function subtract(v1: TVec3, v2: TVec3): TVec3;
    /**
     * Calculates the length of a vector
     * @param v - The vector.
     * @returns The length of the vector.
     */
    function length(v: TVec3): number;
    /**
     * Calculates the distance between two points.
     * @example
     * <caption>The distance between two points is aways positive.</caption>
    var p1 = { x: 0, y: 0, z: 0 };
    var p2 = { x: 0, y: 0, z: 10 };
    var distance = Vec3.distance(p1, p2);
    print(distance); // 10
    
    p2 = { x: 0, y: 0, z: -10 };
    distance = Vec3.distance(p1, p2);
    print(distance); // 10
     * @param p1 - The first point.
     * @param p2 - The second point.
     * @returns The distance between the two points.
     */
    function distance(p1: TVec3, p2: TVec3): number;
    /**
     * Calculates the angle of rotation from one vector onto another, with the sign depending on a reference vector.
     * @example
     * <caption>Compare <code>Vec3.getAngle()</code> and <code>Vec3.orientedAngle()</code>.</caption>
    var v1 = { x: 5, y: 0, z: 0 };
    var v2 = { x: 5, y: 0, z: 5 };
    
    var angle = Vec3.getAngle(v1, v2);
    print(angle * 180 / Math.PI);  // 45
    
    print(Vec3.orientedAngle(v1, v2, Vec3.UNIT_Y));  // -45
    print(Vec3.orientedAngle(v1, v2, Vec3.UNIT_NEG_Y));  // 45
    print(Vec3.orientedAngle(v1, v2, { x: 1, y: 2, z: -1 }));  // -45
    print(Vec3.orientedAngle(v1, v2, { x: 1, y: -2, z: -1 }));  // 45
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @param ref - Reference vector.
     * @returns The angle of rotation from the first vector to the second, in degrees. The value is positive if the
    rotation axis aligns with the reference vector (has a positive dot product), otherwise the value is negative.
     */
    function orientedAngle(v1: TVec3, v2: TVec3, ref: TVec3): number;
    /**
     * Normalizes a vector so that its length is <code>1</code>.
     * @example
     * <caption>Normalize a vector.</caption>
    var v = { x: 10, y: 10, z: 0 };
    var normalized = Vec3.normalize(v);
    print(JSON.stringify(normalized));  // {"x":0.7071,"y":0.7071,"z":0}
    print(Vec3.length(normalized));  // 1
     * @param v - The vector to normalize.
     * @returns The vector normalized to have a length of <code>1</code>.
     */
    function normalize(v: TVec3): TVec3;
    /**
     * Calculates a linear interpolation between two vectors.
     * @example
     * <caption>Linear interpolation between two vectors.</caption>
    var v1 = { x: 10, y: 0, z: 0 };
    var v2 = { x: 0, y: 10, z: 0 };
    var interpolated = Vec3.mix(v1, v2, 0.75);  // 1/4 of v1 and 3/4 of v2.
    print(JSON.stringify(interpolated));  // {"x":2.5,"y":7.5","z":0}
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @param factor - The interpolation factor, range <code>0.0</code> &ndash; <code>1.0</code>.
     * @returns The linear interpolation between the two vectors: <code>(1 - factor) * v1 + factor * v2</code>.
     */
    function mix(v1: TVec3, v2: TVec3, factor: number): TVec3;
    /**
     * Prints the vector to the program log, as a text label followed by the vector value.
     * @example
     * <caption>Two ways of printing a label and vector value.</caption>
    var v = { x: 1, y: 2, z: 3 };
    Vec3.print("Vector: ", v);  // dvec3(1.000000, 2.000000, 3.000000)
    print("Vector: " + JSON.stringify(v));  // {"x":1,"y":2,"z":3}
     * @param label - The label to print.
     * @param v - The vector value to print.
     */
    function print(label: string, v: TVec3): void;
    /**
     * Tests whether two vectors are equal.
    <p><strong>Note:</strong> The vectors must be exactly equal in order for <code>true</code> to be returned; it is often
    better to use {@link TVec3(0).withinEpsilon|withinEpsilon}.</p>
     * @example
     * <caption> Vectors are only equal if exactly the same.</caption>
    var v1 = { x: 10, y: 10, z: 10 };
    var v2 = { x: 10, y: 10, z: 10 };
    
    var equal = Vec3.equal(v1, v2);
    print(equal);  // true
    
    v2 = { x: 10, y: 10, z: 10.0005 };
    equal = Vec3.equal(v1, v2);
    print(equal);  // false
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns <code>true</code> if the two vectors are exactly equal, otherwise <code>false</code>.
     */
    function equal(v1: TVec3, v2: TVec3): boolean;
    /**
     * Tests whether two vectors are equal within a tolerance.
    <p><strong>Note:</strong> It is often better to use this function than {@link TVec3(0).equal|equal}.</p>
     * @example
     * <caption>Testing vectors for near equality.</caption>
    var v1 = { x: 10, y: 10, z: 10 };
    var v2 = { x: 10, y: 10, z: 10.0005 };
    
    var equal = Vec3.equal(v1, v2);
    print(equal);  // false
    
    equal = Vec3.withinEpsilon(v1, v2, 0.001);
    print(equal);  // true
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @param epsilon - The maximum distance between the two vectors.
     * @returns <code>true</code> if the distance between the points represented by the vectors is less than or equal
    to <code>epsilon</code>, otherwise <code>false</code>.
     */
    function withinEpsilon(v1: TVec3, v2: TVec3, epsilon: number): boolean;
    /**
     * Calculates polar coordinates (elevation, azimuth, radius) that transform the unit z-axis vector onto a point.
     * @example
     * <caption>Polar coordinates for a point.</caption>
    var v = { x: 5, y: 2.5, z: 5 };
    var polar = Vec3.toPolar(v);
    print("Elevation: " + polar.x * 180 / Math.PI);  // -19.471
    print("Azimuth: " + polar.y * 180 / Math.PI);  // 45
    print("Radius: " + polar.z);  // 7.5
     * @param p - The point to calculate the polar coordinates for.
     * @returns Vector of polar coordinates for the point: <code>x</code> elevation rotation about the x-axis in
        radians, <code>y</code> azimuth rotation about the y-axis in radians, and <code>z</code> radius.
     */
    function toPolar(p: TVec3): TVec3;
    /**
     * Calculates the unit vector corresponding to polar coordinates elevation and azimuth transformation of the unit z-axis
    vector.
     * @example
     * <caption>Polar coordinates to Cartesian coordinates.</caption>
    var elevation = -19.471 * Math.PI / 180;
    var rotation = 45 * Math.PI / 180;
    var p = Vec3.fromPolar(elevation, rotation);
    print(JSON.stringify(p));  // {"x":0.667,"y":0.333,"z":0.667}
    p = Vec3.multiply(7.5, p);
    print(JSON.stringify(p));  // {"x":5,"y":2.5,"z":5}
     * @param elevation - Rotation about the x-axis, in radians.
     * @param azimuth - Rotation about the y-axis, in radians.
     * @returns Unit vector for the direction specified by <code>elevation</code> and <code>azimuth</code>.
     */
    function fromPolar(elevation: number, azimuth: number): TVec3;
    /**
     * Calculates the angle between two vectors.
     * @example
     * <caption>Calculate the angle between two vectors.</caption>
    var v1 = { x: 10, y: 0, z: 0 };
    var v2 = { x: 0, y: 0, z: 10 };
    var angle = Vec3.getAngle(v1, v2);
    print(angle * 180 / Math.PI);  // 90
     *
     * @param v1 - The first vector.
     * @param v2 - The second vector.
     * @returns The angle between the two vectors, in radians.
     */
    function getAngle(v1: TVec3, v2: TVec3): number;
}

declare namespace WebSocket {
    /**
     * Called when the connection closes.
     * @param data - Information on the connection closure.
     */
    type onCloseCallback = (data: WebSocket.CloseData) => void;
    /**
     * Information on a connection being closed.
     */
    type CloseData = {
        /**
         * The reason why the connection was closed.
         */
        code: WebSocket.CloseCode;
        /**
         * Description of the reason why the connection was closed.
         */
        reason: string;
        /**
         * <code>true</code> if the connection closed cleanly, <code>false</code> if it didn't.
         */
        wasClean: boolean;
    };
    /**
     * Called when an error occurs.
     * @param error - The error.
     */
    type onErrorCallback = (error: WebSocket.SocketError) => void;
    /**
     * <p>The type of socket error.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>ConnectionRefusedError</td><td>The connection was refused or timed out.</td></tr>
        <tr><td><code>1</code></td><td>RemoteHostClosedError</td><td>The remote host closed the connection.</td></tr>
        <tr><td><code>2</code></td><td>HostNotFoundError</td><td>The host address was not found.</td></tr>
        <tr><td><code>3</code></td><td>SocketAccessError</td><td>The socket operation failed because the application doesn't have
          the necessary privileges.</td></tr>
        <tr><td><code>4</code></td><td>SocketResourceError</td><td>The local system ran out of resources (e.g., too many
          sockets).</td></tr>
        <tr><td><code>5</code></td><td>SocketTimeoutError</td><td>The socket operation timed out.</td></tr>
        <tr><td><code>6</code></td><td>DatagramTooLargeError</td><td>The datagram was larger than the OS's limit.</td></tr>
        <tr><td><code>7</code></td><td>NetworkError</td><td>An error occurred with the network.</td></tr>
        <tr><td><code>8</code></td><td>AddressInUseError</td><td>The is already in use and cannot be reused.</td></tr>
        <tr><td><code>9</code></td><td>SocketAddressNotAvailableError</td><td>The address specified does not belong to the
          host.</td></tr>
        <tr><td><code>10</code></td><td>UnsupportedSocketOperationError</td><td>The requested socket operation is not supported
          by the local OS.</td></tr>
        <tr><td><code>11</code></td><td>ProxyAuthenticationRequiredError</td><td>The socket is using a proxy and requires
          authentication.</td></tr>
        <tr><td><code>12</code></td><td>SslHandshakeFailedError</td><td>The SSL/TLS handshake failed.</td></tr>
        <tr><td><code>13</code></td><td>UnfinishedSocketOperationError</td><td>The last operation has not finished yet.</td></tr>
        <tr><td><code>14</code></td><td>ProxyConnectionRefusedError</td><td>Could not contact the proxy server because connection
          was denied.</td></tr>
        <tr><td><code>15</code></td><td>ProxyConnectionClosedError</td><td>The connection to the proxy server was unexpectedly
          closed.</td></tr>
        <tr><td><code>16</code></td><td>ProxyConnectionTimeoutError</td><td>The connection to the proxy server timed
          out.</td></tr>
        <tr><td><code>17</code></td><td>ProxyNotFoundError</td><td>The proxy address was not found.</td></tr>
        <tr><td><code>18</code></td><td>ProxyProtocolError</td><td>Connection to the proxy server failed because the server
          response could not be understood.</td></tr>
        <tr><td><code>19</code></td><td>OperationError</td><td>An operation failed because the socket state did not permit
          it.</td></tr>
        <tr><td><code>20</code></td><td>SslInternalError</td><td>Internal error in the SSL library being used.</td></tr>
        <tr><td><code>21</code></td><td>SslInvalidUserDataError</td><td>Error in the SSL library because of invalid
          data.</td></tr>
        <tr><td><code>22</code></td><td>TemporaryError</td><td>A temporary error occurred.</td></tr>
        <tr><td><code>-1</code></td><td>UnknownSocketError</td><td>An unknown error occurred.</td></tr>
      </tbody>
    </table>
     */
    type SocketError = number;
    /**
     * Called when a message is received.
     * @param message - The message received.
     */
    type onMessageCallback = (message: WebSocket.MessageData) => void;
    /**
     * A message received on a WebSocket connection.
     */
    type MessageData = {
        /**
         * The message content.
         */
        data: string;
    };
    /**
     * Called when the connection opens.
     */
    type onOpenCallback = () => void;
    /**
     * The state of a WebSocket connection.
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>CONNECTING</td><td>The connection is opening.</td></tr>
        <tr><td><code>1</code></td><td>OPEN</td><td>The connection is open.</td></tr>
        <tr><td><code>2</code></td><td>CLOSING</td><td>The connection is closing.</td></tr>
        <tr><td><code>3</code></td><td>CLOSED</td><td>The connection is closed.</td></tr>
      </tbody>
    </table>
     */
    type ReadyState = number;
    /**
     * The reason why the connection was closed.
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>1000</code></td><td>Normal</td><td>Normal closure.</td></tr>
        <tr><td><code>1001</code></td><td>GoingAway</td><td>Going away.</td></tr>
        <tr><td><code>1002</code></td><td>ProtocolError</td><td>Protocol error.</td></tr>
        <tr><td><code>1003</code></td><td>DatatypeNotSupported</td><td>Unsupported data.</td></tr>
        <tr><td><code>1004</code></td><td>Reserved1004</td><td>Reserved.</td></tr>
        <tr><td><code>1005</code></td><td>MissingStatusCode</td><td>No status received.</td></tr>
        <tr><td><code>1006</code></td><td>AbnormalDisconnection</td><td>abnormal closure.</td></tr>
        <tr><td><code>1007</code></td><td>WrongDatatype</td><td>Invalid frame payload data.</td></tr>
        <tr><td><code>1008</code></td><td>PolicyViolated</td><td>Policy violation.</td></tr>
        <tr><td><code>1009</code></td><td>TooMuchData</td><td>Message too big.</td></tr>
        <tr><td><code>1010</code></td><td>MissingExtension</td><td>Mandatory extension missing.</td></tr>
        <tr><td><code>1011</code></td><td>BadOperation</td><td>Internal server error.</td></tr>
        <tr><td><code>1015</code></td><td>TlsHandshakeFailed</td><td>TLS handshake failed.</td></tr>
      </tbody>
    <table>
     */
    type CloseCode = number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Provides a bi-directional, event-driven communication session between the script and another WebSocket connection. It is a
near-complete implementation of the WebSocket API described in the Mozilla docs:
<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">https://developer.mozilla.org/en-US/docs/Web/API/WebSocket</a>.

<p>Create using <code>new WebSocket(...)</code> in Interface, client entity, avatar, and server entity scripts, or the
{@link WebSocketServer} class in server entity and assignment client scripts.

<p><strong>Note:</strong> Does not support secure, <code>wss:</code> protocol.</p>
 * @example
 * <caption>Echo a message off websocket.org.</caption>
print("Create WebSocket");
var WEBSOCKET_PING_URL = "ws://echo.websocket.org";
var webSocket = new WebSocket(WEBSOCKET_PING_URL);

webSocket.onclose = function (data) {
    print("WebSocket closed");
    print("Ready state =", webSocket.readyState);  // 3
};

webSocket.onmessage = function (data) {
    print("Message received:", data.data);

    print("Close WebSocket");
    webSocket.close();
};

webSocket.onopen = function () {
    print("WebSocket opened");
    print("Ready state =", webSocket.readyState);  // 1

    print("Send a test message");
    webSocket.send("Test message");
};
 * @property binaryType - <em>Not used.</em>
 * @property bufferedAmount - <em>Not implemented.</em> <em>Read-only.</em>
 * @property extensions - <em>Not implemented.</em> <em>Read-only.</em>
 * @property onopen - Function called when the connection opens.
 * @property onmessage - Function called when a message is received.
 * @property onerror - Function called when an error occurs.
 * @property onclose - Function called when the connection closes.
 * @property protocol - <em>Not implemented.</em> <em>Read-only.</em>
 * @property readyState - The state of the connection. <em>Read-only.</em>
 * @property url - The URL to connect to. <em>Read-only.</em>
 * @property CONNECTING - The connection is opening. <em>Read-only.</em>
 * @property OPEN - The connection is open. <em>Read-only.</em>
 * @property CLOSING - The connection is closing. <em>Read-only.</em>
 * @property CLOSED - The connection is closed. <em>Read-only.</em>
 * @param urlOrWebSocket - The URL to connect to or an existing {@link WebSocket} to reuse the connection of.
 */
declare class WebSocket {
    constructor(urlOrWebSocket: string | WebSocket);
    /**
     * Sends a message on the connection.
     * @param message - The message to send. If an object, it is converted to a string.
     */
    static send(message: string | any): void;
    /**
     * Closes the connection.
     * @param [closeCode = 1000] - The reason for closing.
     * @param [reason = ""] - A description of the reason for closing.
     */
    static close(closeCode?: WebSocket.CloseCode, reason?: string): void;
    /**
     * <em>Not used.</em>
    */
    binaryType: string;
    /**
     * <em>Not implemented.</em> <em>Read-only.</em>
    */
    bufferedAmount: number;
    /**
     * <em>Not implemented.</em> <em>Read-only.</em>
    */
    extensions: string;
    /**
     * Function called when the connection opens.
    */
    onopen: WebSocket.onOpenCallback;
    /**
     * Function called when a message is received.
    */
    onmessage: WebSocket.onMessageCallback;
    /**
     * Function called when an error occurs.
    */
    onerror: WebSocket.onErrorCallback;
    /**
     * Function called when the connection closes.
    */
    onclose: WebSocket.onCloseCallback;
    /**
     * <em>Not implemented.</em> <em>Read-only.</em>
    */
    protocol: string;
    /**
     * The state of the connection. <em>Read-only.</em>
    */
    readyState: WebSocket.ReadyState;
    /**
     * The URL to connect to. <em>Read-only.</em>
    */
    url: string;
    /**
     * The connection is opening. <em>Read-only.</em>
    */
    CONNECTING: WebSocket.ReadyState;
    /**
     * The connection is open. <em>Read-only.</em>
    */
    OPEN: WebSocket.ReadyState;
    /**
     * The connection is closing. <em>Read-only.</em>
    */
    CLOSING: WebSocket.ReadyState;
    /**
     * The connection is closed. <em>Read-only.</em>
    */
    CLOSED: WebSocket.ReadyState;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Server Entity Scripts &bull; Assignment Client Scripts</p>Manages {@link WebSocket}s in server entity and assignment client scripts.

<p>Create using <code>new WebSocketServer(...)</code>.</p>
 * @example
 * <caption>Echo a message back to sender.</caption>
// Server entity script. Echoes received message back to sender.
(function () {
    print("Create WebSocketServer");
    var webSocketServer = new WebSocketServer();
    print("Server url:", webSocketServer.url);

    function onNewConnection(webSocket) {
        print("New connection");

        webSocket.onmessage = function (message) {
            print("Message received:", message.data);

            var returnMessage = message.data + " back!";
            print("Echo a message back:", returnMessage);
            webSocket.send(message.data + " back!");
        };
    }

    webSocketServer.newConnection.connect(onNewConnection);
})
 * @example
 * // Interface script. Bounces message off server entity script.
// Use the server URL reported by the server entity script.
var WEBSOCKET_PING_URL = "ws://127.0.0.1:nnnnn";
var TEST_MESSAGE = "Hello";

print("Create WebSocket");
var webSocket = new WebSocket(WEBSOCKET_PING_URL);

webSocket.onmessage = function(data) {
    print("Message received:", data.data);
};

webSocket.onopen = function() {
    print("WebSocket opened");
    print("Send test message:", TEST_MESSAGE);
    webSocket.send(TEST_MESSAGE);
};
 * @property url - The URL that the server is listening on. <em>Read-only.</em>
 * @property port - The port that the server is listening on. <em>Read-only.</em>
 * @property listening - <code>true</code> if the server is listening for incoming connections, <code>false</code> if
    it isn't. <em>Read-only.</em>
 */
declare class WebSocketServer {
    /**
     * Closes all connections and closes the WebSocketServer.
     */
    static close(): void;
    /**
     * The URL that the server is listening on. <em>Read-only.</em>
    */
    url: string;
    /**
     * The port that the server is listening on. <em>Read-only.</em>
    */
    port: number;
    /**
     * <code>true</code> if the server is listening for incoming connections, <code>false</code> if
     * it isn't. <em>Read-only.</em>
    */
    listening: boolean;
}

/**
 * A mouse wheel event.
 * @example
 * <caption>Report the WheelEvent details for each wheel rotation.</caption>
Controller.wheelEvent.connect(function (event) {
    print(JSON.stringify(event));
});
 *
 */
declare type WheelEvent = {
    /**
     * Integer x-coordinate of the event on the Interface window or HMD HUD.
     */
    x: number;
    /**
     * Integer y-coordinate of the event on the Interface window or HMD HUD.
     */
    y: number;
    /**
     * Integer number indicating the direction and speed to scroll: positive numbers to scroll up, and
     * negative numers to scroll down.
     */
    delta: number;
    /**
     * The orientation of the wheel: <code>"VERTICAL"</code> for a typical mouse;
     * <code>"HORIZONTAL"</code> for a "horizontal" wheel.
     */
    orientation: string;
    /**
     * <code>true</code> if the left button was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isLeftButton: boolean;
    /**
     * <code>true</code> if the middle button was pressed when the event was generated,
     * otherwise <code>false</code>.
     */
    isMiddleButton: boolean;
    /**
     * <code>true</code> if the right button was pressed when the event was generated,
     * otherwise <code>false</code>.
     */
    isRightButton: boolean;
    /**
     * <code>true</code> if the Shift key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isShifted: boolean;
    /**
     * <code>true</code> if the "meta" key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "meta" key is the Windows key; on OSX it is the Control (Splat) key.
     */
    isMeta: boolean;
    /**
     * <code>true</code> if the "control" key was pressed when the event was generated, otherwise
     * <code>false</code>. On Windows the "control" key is the Ctrl key; on OSX it is the Command key.
     */
    isControl: boolean;
    /**
     * <code>true</code> if the Alt key was pressed when the event was generated, otherwise
     * <code>false</code>.
     */
    isAlt: boolean;
};

declare namespace XMLHttpRequest {
    /**
     * Called when the request's ready state changes.
     */
    type onReadyStateChangeCallback = () => void;
    /**
     * Called when the request times out.
     */
    type onTimeoutCallback = () => void;
    /**
     * <p>The state of an XMLHttpRequest.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>UNSENT</td><td>Request has been created; {@link XMLHttpRequest.open} not called
          yet.</td></tr>
        <tr><td><code>1</code></td><td>OPENED</td><td>{@link XMLHttpRequest.open} has been called.</td></tr>
        <tr><td><code>2</code></td><td>HEADERS_RECEIVED</td><td>{@link XMLHttpRequest.send} has been called; headers and
          status are available.</td></tr>
        <tr><td><code>3</code></td><td>LOADING</td><td>Downloading; {@link XMLHttpRequest|XMLHttpRequest.responseText} has
          partial data.</td></tr>
        <tr><td><code>4</code></td><td>DONE</td><td>Operation complete.</td></tr>
      </tbody>
    </table>
     */
    type ReadyState = number;
    /**
     * <p>The type of network error.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Name</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>NoError</td><td>No error.</td></tr>
        <tr><td><code>1</code></td><td>ConnectionRefusedError</td><td>The server refused the connection.</td></tr>
        <tr><td><code>2</code></td><td>RemoteHostClosedError</td><td>The server closed the connection.</td></tr>
        <tr><td><code>3</code></td><td>HostNotFoundError</td><td>Host name not found.</td></tr>
        <tr><td><code>4</code></td><td>TimeoutError</td><td>Connection timed out</td></tr>
        <tr><td><code>5</code></td><td>OperationCanceledError</td><td>Operation canceled by
          {@link XMLHttpRequest.abort}.</td></tr>
        <tr><td><code>6</code></td><td>SslHandshakeFailedError</td><td>SSL/TLS handshake failed.</td></tr>
        <tr><td><code>7</code></td><td>TemporaryNetworkFailureError</td><td>Temporarily disconnected from the
          network.</td></tr>
        <tr><td><code>8</code></td><td>NetworkSessionFailedError</td><td>Disconnection from the network.</td></tr>
        <tr><td><code>9</code></td><td>BackgroundRequestNotAllowedError</td><td>Background request not allowed.</td></tr>
        <tr><td><code>10</code></td><td>TooManyRedirectsError</td><td>Too many redirects.</td></tr>
        <tr><td><code>11</code></td><td>InsecureRedirectError</td><td>Redirect from secure to insecure protocol.</td></tr>
        <tr><td><code>101</code></td><td>ProxyConnectionRefusedError</td><td>Connection to proxy server refused.</td></tr>
        <tr><td><code>102</code></td><td>ProxyConnectionClosedError</td><td>Proxy server closed the connection.</td></tr>
        <tr><td><code>103</code></td><td>ProxyNotFoundError</td><td>Proxy host name not found.</td></tr>
        <tr><td><code>104</code></td><td>ProxyTimeoutError</td><td>Proxy connection timed out.</td></tr>
        <tr><td><code>105</code></td><td>ProxyAuthenticationRequiredError</td><td>Proxy requires authentication.</td></tr>
        <tr><td><code>201</code></td><td>ContentAccessDenied</td><td>Access denied.</td></tr>
        <tr><td><code>202</code></td><td>ContentOperationNotPermittedError</td><td>Operation not permitted.</td></tr>
        <tr><td><code>203</code></td><td>ContentNotFoundError</td><td>Content not found.</td></tr>
        <tr><td><code>204</code></td><td>AuthenticationRequiredError</td><td>Authentication required.</td></tr>
        <tr><td><code>205</code></td><td>ContentReSendError</td><td>Resend failed.</td></tr>
        <tr><td><code>206</code></td><td>ContentConflictError</td><td>Resource state conflict.</td></tr>
        <tr><td><code>207</code></td><td>ContentGoneError</td><td>Resource no longer available.</td></tr>
        <tr><td><code>401</code></td><td>InternalServerError</td><td>Internal server error.</td></tr>
        <tr><td><code>402</code></td><td>OperationNotImplementedError</td><td>Operation not supported.</td></tr>
        <tr><td><code>403</code></td><td>ServiceUnavailableError</td><td>Request not able to be handled at this
          time.</td></tr>
        <tr><td><code>301</code></td><td>ProtocolUnknownError</td><td>Protocol unknown.</td></tr>
        <tr><td><code>302</code></td><td>ProtocolInvalidOperationError</td><td>Operation invalid fro protocol.</td></tr>
        <tr><td><code>99</code></td><td>UnknownNetworkError</td><td>Unknown network-related error.</td></tr>
        <tr><td><code>199</code></td><td>UnknownProxyError</td><td>Unknown proxy-related error.</td></tr>
        <tr><td><code>299</code></td><td>UnknownContentError</td><td>Unknown content-related error.</td></tr>
        <tr><td><code>399</code></td><td>ProtocolFailure</td><td>Protocol error.</td></tr>
        <tr><td><code>499</code></td><td>UnknownServerError</td><td>Unknown server response error.</td></tr>
      </tbody>
    </table>
     */
    type NetworkError = number;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Provides a means to interact with web servers. It is a near-complete implementation of the XMLHttpRequest API described in
the Mozilla docs:
<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest</a>.

<p>Create using <code>new XMLHttpRequest(...)</code>.</p>
 * @example
 * <caption>Get a web page's HTML.</caption>
var URL = "https://www.highfidelity.com/";

var req = new XMLHttpRequest();
req.onreadystatechange = function () {
    if (req.readyState === req.DONE) {
        if (req.status === 200) {
            print("Success");
            print("Content type:", req.getResponseHeader("content-type"));
            print("Content:", req.responseText.slice(0, 100), "...");

        } else {
            print("Error", req.status, req.statusText);
        }

        req = null;
    }
};

req.open("GET", URL);
req.send();
 * @example
 * <caption>Get a web page's HTML &mdash; alternative method.</caption>
var URL = "https://www.highfidelity.com/";

var req = new XMLHttpRequest();
req.requestComplete.connect(function () {
    if (req.status === 200) {
        print("Success");
        print("Content type:", req.getResponseHeader("content-type"));
        print("Content:", req.responseText.slice(0, 100), "...");

    } else {
        print("Error", req.status, req.statusText);
    }

    req = null;
});

req.open("GET", URL);
req.send();
 * @property response - The response data.
    <em>Read-only.</em>
 * @property responseText - The response data as text.
    <em>Read-only.</em>
 * @property responseType - The response type required or received (e.g., <code>"text"</code>, <code>"json"</code>,
    <code>"arraybuffer"</code>, ...).
 * @property status - The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">HTTP response status
     code</a> (<code>100</code> &ndash; <code>599</code>).
    <em>Read-only.</em>
 * @property statusText - The HTTP response status text.
    <em>Read-only.</em>
 * @property readyState - The status of the request.
    <em>Read-only.</em>
 * @property errorCode - The network result of the request: including, <code>0</code> (NoError)
    if there was no error, <code>4</code> (TimeoutError) if the request timed out.
    <em>Read-only.</em>
 * @property timeout - The time a request can take before timing out, in ms.
 * @property UNSENT - Request has been created; {@link XMLHttpRequest.open} not called yet.
    <em>Read-only.</em>
 * @property OPENED - {@link XMLHttpRequest.open} has been called.
    <em>Read-only.</em>
 * @property HEADERS_RECEIVED - {@link XMLHttpRequest.send} has been called; headers and status
    are available.
    <em>Read-only.</em>
 * @property LOADING - Downloading; {@link XMLHttpRequest|XMLHttpRequest.responseText} has partial
    data.
    <em>Read-only.</em>
 * @property DONE - Operation complete.
    <em>Read-only.</em>
 * @property ontimeout - Function called when the request times out.
    <p>Note: This is called in addition to any function set for <code>onreadystatechange</code>.</p>
 * @property onreadystatechange - Function called when the request's ready state
    changes.
 */
declare class XMLHttpRequest {
    /**
     * Aborts the request.
     */
    static abort(): void;
    /**
     * Sets the value of an HTTP request header. Must be called after {@link XMLHttpRequest.open} but before
    {@link XMLHttpRequest.send};
     * @param name - The name of the header to set.
     * @param value - The value of the header.
     */
    static setRequestHeader(name: string, value: string): void;
    /**
     * Initializes a request.
     * @param method - The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">HTTP request method</a>
        to use, e.g., <code>"GET"</code>, <code>"POST"</code>, <code>"PUT"</code>, or <code>"DELETE"</code>.
     * @param url - The URL to send the request to.
     * @param [async = true] - <code>true</code> if the method returns without waiting for the response,
        <code>false</code> if the method returns only once the request is complete.
     * @param [username = ""] - User name for authentication.
     * @param [password = ""] - Password for authentication.
     */
    static open(method: string, url: string, async?: boolean, username?: string, password?: string): void;
    /**
     * Sends the request to the server.
     * @param [data] - The data to send.
     */
    static send(data?: any): void;
    /**
     * Gets the response headers.
     * @returns The response headers, separated by <code>"\n"</code> characters.
     */
    static getAllResponseHeaders(): string;
    /**
     * Gets a response header.
     * @param name - -
     * @returns The response header.
     */
    static getResponseHeader(name: string): string;
    /**
     * The response data.
     * <em>Read-only.</em>
    */
    response: any;
    /**
     * The response data as text.
     * <em>Read-only.</em>
    */
    responseText: string;
    /**
     * The response type required or received (e.g., <code>"text"</code>, <code>"json"</code>,
     * <code>"arraybuffer"</code>, ...).
    */
    responseType: string;
    /**
     * The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">HTTP response status
     * code</a> (<code>100</code> &ndash; <code>599</code>).
     * <em>Read-only.</em>
    */
    status: number;
    /**
     * The HTTP response status text.
     * <em>Read-only.</em>
    */
    statusText: string;
    /**
     * The status of the request.
     * <em>Read-only.</em>
    */
    readyState: XMLHttpRequest.ReadyState;
    /**
     * The network result of the request: including, <code>0</code> (NoError)
     * if there was no error, <code>4</code> (TimeoutError) if the request timed out.
     * <em>Read-only.</em>
    */
    errorCode: XMLHttpRequest.NetworkError;
    /**
     * The time a request can take before timing out, in ms.
    */
    timeout: number;
    /**
     * Request has been created; {@link XMLHttpRequest.open} not called yet.
     * <em>Read-only.</em>
    */
    UNSENT: XMLHttpRequest.ReadyState;
    /**
     * {@link XMLHttpRequest.open} has been called.
     * <em>Read-only.</em>
    */
    OPENED: XMLHttpRequest.ReadyState;
    /**
     * {@link XMLHttpRequest.send} has been called; headers and status
     * are available.
     * <em>Read-only.</em>
    */
    HEADERS_RECEIVED: XMLHttpRequest.ReadyState;
    /**
     * Downloading; {@link XMLHttpRequest|XMLHttpRequest.responseText} has partial
     * data.
     * <em>Read-only.</em>
    */
    LOADING: XMLHttpRequest.ReadyState;
    /**
     * Operation complete.
     * <em>Read-only.</em>
    */
    DONE: XMLHttpRequest.ReadyState;
    /**
     * Function called when the request times out.
     * <p>Note: This is called in addition to any function set for <code>onreadystatechange</code>.</p>
    */
    ontimeout: XMLHttpRequest.onTimeoutCallback;
    /**
     * Function called when the request's ready state
     * changes.
    */
    onreadystatechange: XMLHttpRequest.onReadyStateChangeCallback;
}

/**
 * <p>How an entity is billboarded.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"none"</code></td><td>The entity will not be billboarded.</td></tr>
    <tr><td><code>"yaw"</code></td><td>The entity will yaw, but not pitch, to face the camera. Its actual rotation will be
      ignored.</td></tr>
    <tr><td><code>"full"</code></td><td>The entity will yaw and pitch to face the camera. Its actual rotation will be
      ignored.</td></tr>
  </tbody>
</table>
 */
declare type BillboardMode = string;

/**
 * <p>A <code>BoxFace</code> specifies the face of an axis-aligned (AA) box.
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"MIN_X_FACE"</code></td><td>The minimum x-axis face.</td></tr>
    <tr><td><code>"MAX_X_FACE"</code></td><td>The maximum x-axis face.</td></tr>
    <tr><td><code>"MIN_Y_FACE"</code></td><td>The minimum y-axis face.</td></tr>
    <tr><td><code>"MAX_Y_FACE"</code></td><td>The maximum y-axis face.</td></tr>
    <tr><td><code>"MIN_Z_FACE"</code></td><td>The minimum z-axis face.</td></tr>
    <tr><td><code>"MAX_Z_FACE"</code></td><td>The maximum z-axis face.</td></tr>
    <tr><td><code>"UNKNOWN_FACE"</code></td><td>Unknown value.</td></tr>
  </tbody>
</table>
 */
declare type BoxFace = string;

declare type Signal<T extends Array<any>> = {
  connect: (fn: (...args: T) => void) => {};
  disconnect: (fn: (...args: T) => void) => {};
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>DebugDraw</code> API renders debug markers and lines. These markers are only visible locally; they are not visible
to other users.
 */
declare namespace DebugDraw {
    /**
     * Draws a line in world space, visible for a single frame. To make the line visually persist, you need to repeatedly draw
    it.
     * @example
     * <caption>Draw a red ray from your initial avatar position to 10m in front of it.</caption>
    var start = MyAvatar.position;
    var end = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -10 }));
    var color = { x: 1.0, y: 0.0, z: 0.0, w: 1.0 };
    
    Script.update.connect(function () {
        DebugDraw.drawRay(start, end, color);
    });
     * @param start - The start position of the line, in world coordinates.
     * @param end - The end position of the line, in world coordinates.
     * @param color - The color of the line. Each component should be in the range <code>0.0</code> &ndash;
    <code>1.0</code>, with <code>x</code> = red, <code>y</code> = green, <code>z</code> = blue, and <code>w</code> = alpha.
     */
    function drawRay(start: TVec3, end: TVec3, color: TVec4): void;
    /**
     * Draws lines in world space, visible for a single frame. To make the lines visually persist, you need to repeatedly draw
    them.
    <p><strong>Note:</strong> Currently doesn't work.
     * @example
     * <caption>Draw a red "V" in front of your initial avatar position.</caption>
    var lines = [
        [{ x: -1, y: 0.5, z: 0 }, { x: 0, y: 0, z: 0 }],
        [{ x: 0, y: 0, z: 0 }, { x: 1, y: 0.5, z: 0 }]
    ];
    var color = { x: 1, y: 0, z: 0, w: 1 };
    var translation = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 }));
    var rotation = MyAvatar.orientation;
    
    Script.update.connect(function () {
        DebugDraw.drawRays(lines, color, translation, rotation);
    });
     * @param lines - The start and end points of the lines to draw.
     * @param color - The color of the lines. Each component should be in the range <code>0.0</code> &ndash;
    <code>1.0</code>, with <code>x</code> = red, <code>y</code> = green, <code>z</code> = blue, and <code>w</code> = alpha.
     * @param [translation = 0,0,0] - A translation applied to each line.
     * @param [rotation = Quat.IDENTITY] - A rotation applied to each line.
     */
    function drawRays(lines: Vec3Pair[], color: TVec4, translation?: TVec3, rotation?: TQuat): void;
    /**
     * Adds or updates a debug marker in world coordinates. This marker is drawn every frame until it is removed using
    {@link DebugDraw.removeMarker|removeMarker}. If a world coordinates debug marker of the specified <code>name</code>
    already exists, its parameters are updated.
     * @example
     * <caption>Briefly draw a debug marker in front of your avatar, in world coordinates.</caption>
    var MARKER_NAME = "my marker";
    DebugDraw.addMarker(
        MARKER_NAME,
        Quat.ZERO,
        Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5})),
        { red: 255, green: 0, blue: 0 },
        1.0
    );
    Script.setTimeout(function () {
        DebugDraw.removeMarker(MARKER_NAME);
    }, 5000);
     * @param key - A name that uniquely identifies the marker.
     * @param rotation - The orientation of the marker in world coordinates.
     * @param position - The position of the market in world coordinates.
     * @param color - The color of the marker.
     * @param size - A float between 0.0 and 1.0 (10 cm) to control the size of the marker.
     */
    function addMarker(key: string, rotation: TQuat, position: TVec3, color: TVec4, size: number): void;
    /**
     * Removes a debug marker that was added in world coordinates.
     * @param key - The name of the world coordinates debug marker to remove.
     */
    function removeMarker(key: string): void;
    /**
     * Adds or updates a debug marker to the world in avatar coordinates. This marker is drawn every frame until it is removed
    using {@link DebugDraw.removeMyAvatarMarker|removeMyAvatarMarker}. If an avatar coordinates debug marker of the
    specified <code>name</code> already exists, its parameters are updated. The debug marker moves with your avatar.
     * @example
     * <caption>Briefly draw a debug marker in front of your avatar, in avatar coordinates.</caption>
    var MARKER_NAME = "My avatar marker";
    DebugDraw.addMyAvatarMarker(
        MARKER_NAME,
        Quat.ZERO,
        { x: 0, y: 0, z: -5 },
        { red: 255, green: 0, blue: 0 },
        1.0
    );
    Script.setTimeout(function () {
        DebugDraw.removeMyAvatarMarker(MARKER_NAME);
    }, 5000);
     * @param key - A name that uniquely identifies the marker.
     * @param rotation - The orientation of the marker in avatar coordinates.
     * @param position - The position of the market in avatar coordinates.
     * @param color - color of the marker.
     * @param size - A number between 0.0 and 1.0 (10 cm) to control the size of the marker.
     */
    function addMyAvatarMarker(key: string, rotation: TQuat, position: TVec3, color: TVec4, size: number): void;
    /**
     * Removes a debug marker that was added in avatar coordinates.
     * @param key - The name of the avatar coordinates debug marker to remove.
     */
    function removeMyAvatarMarker(key: string): void;
}

/**
 * A triangle in a mesh.
 */
declare type Triangle = {
    /**
     * The position of vertex 0 in the triangle.
     */
    v0: TVec3;
    /**
     * The position of vertex 1 in the triangle.
     */
    v1: TVec3;
    /**
     * The position of vertex 2 in the triangle.
     */
    v2: TVec3;
};

/**
 * <p>A set of flags for moderation ban actions. The value is constructed by using the <code>|</code> (bitwise OR) operator on the
individual flag values.</p>
<table>
  <thead>
    <tr><th>Flag Name</th><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td>NO_BAN</td><td><code>0</code></td><td>Don't ban user when kicking. <em>This does not currently have an effect.</em></td></tr>
    <tr><td>BAN_BY_USERNAME</td><td><code>1</code></td><td>Ban the person by their username.</td></tr>
    <tr><td>BAN_BY_FINGERPRINT</td><td><code>2</code></td><td>Ban the person by their machine fingerprint.</td></tr>
    <tr><td>BAN_BY_IP</td><td><code>4</code></td><td>Ban the person by their IP address.</td></tr>
  </tbody>
</table>
 */
declare type BanFlags = number;

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Paths</code> API provides absolute paths to the scripts and resources directories.
 * @property defaultScripts - The path to the scripts directory. <em>Read-only.</em>
 * @property resources - The path to the resources directory. <em>Read-only.</em>
 */
declare namespace Paths { }

/**
 * <p>A collision may occur with the following types of items:</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th>
  </thead>
  <tbody>
    <tr><td><code>1</code></td><td>Static entities &mdash; non-dynamic entities with no velocity.</td></tr>
    <tr><td><code>2</code></td><td>Dynamic entities &mdash; entities that have their <code>dynamic</code> property set to
        <code>true</code>.</td></tr>
    <tr><td><code>4</code></td><td>Kinematic entities &mdash; non-dynamic entities with velocity.</td></tr>
    <tr><td><code>8</code></td><td>My avatar.</td></tr>
    <tr><td><code>16</code></td><td>Other avatars.</td></tr>
  </tbody>
</table>
<p>The values for the collision types that are enabled are added together to give the CollisionMask value. For example, a
value of <code>31</code> means that an entity will collide with all item types.</p>
 */
declare type CollisionMask = number;

/**
 * <p>A set of flags for a pick filter. The value is constructed by using the <code>|</code> (bitwise OR) operator on the
individual flag values.</p>
<table>
  <thead>
    <tr><th>Flag Name</th><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td>PICK_DOMAIN_ENTITIES</td><td><code>1</code></td><td>Include domain entities when intersecting.</td></tr>
    <tr><td>PICK_AVATAR_ENTITIES</td><td><code>2</code></td><td>Include avatar entities when intersecting.</td></tr>
    <tr><td>PICK_LOCAL_ENTITIES</td><td><code>4</code></td><td>Include local entities when intersecting.</td></tr>
    <tr><td>PICK_AVATATRS</td><td><code>8</code></td><td>Include avatars when intersecting.</td></tr>
    <tr><td>PICK_HUD</td><td><code>16</code></td><td>Include the HUD surface when intersecting in HMD mode.</td></tr>
    <tr><td>PICK_INCLUDE_VISIBLE</td><td><code>32</code></td><td>Include visible objects when intersecting.</td></tr>
    <tr><td>PICK_INCLUDE_INVISIBLE</td><td><code>64</code></td><td>Include invisible objects when intersecting.</td></tr>
    <tr><td>PICK_INCLUDE_COLLIDABLE</td><td><code>128</code></td><td>Include collidable objects when
      intersecting.</td></tr>
    <tr><td>PICK_INCLUDE_NONCOLLIDABLE</td><td><code>256</code></td><td>Include non-collidable objects when
      intersecting.</td></tr>
    <tr><td>PICK_PRECISE</td><td><code>512</code></td><td>Pick against exact meshes.</td></tr>
    <tr><td>PICK_COARSE</td><td><code>1024</code></td><td>Pick against coarse meshes.</td></tr>
    <tr><td>PICK_ALL_INTERSECTIONS</td><td><code>2048</code></td><td>Return all intersections instead of just the
      closest.</td></tr>
  </tbody>
</table>
 */
declare type FilterFlags = number;

/**
 * Details of a collision between avatars and entities.
 */
declare type Collision = {
    /**
     * The contact type of the collision event.
     */
    type: ContactEventType;
    /**
     * The ID of one of the avatars or entities in the collision.
     */
    idA: Uuid;
    /**
     * The ID of the other of the avatars or entities in the collision.
     */
    idB: Uuid;
    /**
     * The amount of penetration between the two items.
     */
    penetration: TVec3;
    /**
     * The point of contact.
     */
    contactPoint: TVec3;
    /**
     * The change in relative velocity of the two items, in m/s.
     */
    velocityChange: TVec3;
};

/**
 * A 4 x 4 matrix, typically containing a scale, rotation, and translation transform. See also the {@link TMat4(0)|Mat4} object.
 */
declare type TMat4 = {
    /**
     * Row 0, column 0 value.
     */
    r0c0: number;
    /**
     * Row 1, column 0 value.
     */
    r1c0: number;
    /**
     * Row 2, column 0 value.
     */
    r2c0: number;
    /**
     * Row 3, column 0 value.
     */
    r3c0: number;
    /**
     * Row 0, column 1 value.
     */
    r0c1: number;
    /**
     * Row 1, column 1 value.
     */
    r1c1: number;
    /**
     * Row 2, column 1 value.
     */
    r2c1: number;
    /**
     * Row 3, column 1 value.
     */
    r3c1: number;
    /**
     * Row 0, column 2 value.
     */
    r0c2: number;
    /**
     * Row 1, column 2 value.
     */
    r1c2: number;
    /**
     * Row 2, column 2 value.
     */
    r2c2: number;
    /**
     * Row 3, column 2 value.
     */
    r3c2: number;
    /**
     * Row 0, column 3 value.
     */
    r0c3: number;
    /**
     * Row 1, column 3 value.
     */
    r1c3: number;
    /**
     * Row 2, column 3 value.
     */
    r2c3: number;
    /**
     * Row 3, column 3 value.
     */
    r3c3: number;
};

/**
 * A 2-dimensional vector.
 * @example
 * <caption>Vec2s can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>
Entities.editEntity(<id>, { materialMappingPos: { x: 0.1, y: 0.2 }});          // { x: 0.1, y: 0.2 }
Entities.editEntity(<id>, { materialMappingPos: { u: 0.3, v: 0.4 }});          // { x: 0.3, y: 0.4 }
Entities.editEntity(<id>, { materialMappingPos: [0.5, 0.6] });                 // { x: 0.5, y: 0.6 }
Entities.editEntity(<id>, { materialMappingPos: 0.7 });                        // { x: 0.7, y: 0.7 }
var color = Entities.getEntityProperties(<id>).materialMappingPos;             // { x: 0.7, y: 0.7 }
color.v = 0.8;                                                                 // { x: 0.7, y: 0.8 }
 */
declare type TVec2 = {
    /**
     * X-coordinate of the vector. Synonyms: <code>u</code>.
     */
    x: number;
    /**
     * Y-coordinate of the vector. Synonyms: <code>v</code>.
     */
    y: number;
};

/**
 * A 3-dimensional vector. See also the {@link TVec3(0)|Vec3} object.
 * @example
 * <caption>Vec3 values can be set in multiple ways and modified with their aliases, but still stringify in the same
    way.</caption>
Entities.editEntity(<id>, { position: { x: 1, y: 2, z: 3 }});                 // { x: 1, y: 2, z: 3 }
Entities.editEntity(<id>, { position: { r: 4, g: 5, b: 6 }});                 // { x: 4, y: 5, z: 6 }
Entities.editEntity(<id>, { position: { red: 7, green: 8, blue: 9 }});        // { x: 7, y: 8, z: 9 }
Entities.editEntity(<id>, { position: [10, 11, 12] });                        // { x: 10, y: 11, z: 12 }
Entities.editEntity(<id>, { position: 13 });                                  // { x: 13, y: 13, z: 13 }
var position = Entities.getEntityProperties(<id>).position;                   // { x: 13, y: 13, z: 13 }
position.g = 14;                                                              // { x: 13, y: 14, z: 13 }
position.blue = 15;                                                           // { x: 13, y: 14, z: 15 }
Entities.editEntity(<id>, { position: "red"});                                // { x: 255, y: 0, z: 0 }
Entities.editEntity(<id>, { position: "#00FF00"});                            // { x: 0, y: 255, z: 0 }
 */
declare type TVec3 = {
    /**
     * X-coordinate of the vector. Synonyms: <code>r</code>, <code>red</code>.
     */
    x: number;
    /**
     * Y-coordinate of the vector. Synonyms: <code>g</code>, <code>green</code>.
     */
    y: number;
    /**
     * Z-coordinate of the vector. Synonyms: <code>b</code>, <code>blue</code>.
     */
    z: number;
};

/**
 * A color vector. See also the {@link TVec3(0)|Vec3} object.
 * @example
 * <caption>Colors can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>
Entities.editEntity(<id>, { color: { x: 1, y: 2, z: 3 }});                 // { red: 1, green: 2, blue: 3 }
Entities.editEntity(<id>, { color: { r: 4, g: 5, b: 6 }});                 // { red: 4, green: 5, blue: 6 }
Entities.editEntity(<id>, { color: { red: 7, green: 8, blue: 9 }});        // { red: 7, green: 8, blue: 9 }
Entities.editEntity(<id>, { color: [10, 11, 12] });                        // { red: 10, green: 11, blue: 12 }
Entities.editEntity(<id>, { color: 13 });                                  // { red: 13, green: 13, blue: 13 }
var color = Entities.getEntityProperties(<id>).color;                      // { red: 13, green: 13, blue: 13 }
color.g = 14;                                                              // { red: 13, green: 14, blue: 13 }
color.blue = 15;                                                           // { red: 13, green: 14, blue: 15 }
Entities.editEntity(<id>, { color: "red"});                                // { red: 255, green: 0, blue: 0 }
Entities.editEntity(<id>, { color: "#00FF00"});                            // { red: 0, green: 255, blue: 0 }
 */
declare type Color = {
    /**
     * Red component value. Integer in the range <code>0</code> - <code>255</code>.  Synonyms: <code>r</code>, <code>x</code>.
     */
    red: number;
    /**
     * Green component value. Integer in the range <code>0</code> - <code>255</code>.  Synonyms: <code>g</code>, <code>y</code>.
     */
    green: number;
    /**
     * Blue component value. Integer in the range <code>0</code> - <code>255</code>.  Synonyms: <code>b</code>, <code>z</code>.
     */
    blue: number;
};

/**
 * A color vector with real values. Values may also be <code>null</code>. See also the {@link TVec3(0)|Vec3} object.
 * @example
 * <caption>ColorFloats can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>
Entities.editEntity(<id>, { color: { x: 1, y: 2, z: 3 }});                 // { red: 1, green: 2, blue: 3 }
Entities.editEntity(<id>, { color: { r: 4, g: 5, b: 6 }});                 // { red: 4, green: 5, blue: 6 }
Entities.editEntity(<id>, { color: { red: 7, green: 8, blue: 9 }});        // { red: 7, green: 8, blue: 9 }
Entities.editEntity(<id>, { color: [10, 11, 12] });                        // { red: 10, green: 11, blue: 12 }
Entities.editEntity(<id>, { color: 13 });                                  // { red: 13, green: 13, blue: 13 }
var color = Entities.getEntityProperties(<id>).color;                      // { red: 13, green: 13, blue: 13 }
color.g = 14;                                                              // { red: 13, green: 14, blue: 13 }
color.blue = 15;                                                           // { red: 13, green: 14, blue: 15 }
Entities.editEntity(<id>, { color: "red"});                                // { red: 255, green: 0, blue: 0 }
Entities.editEntity(<id>, { color: "#00FF00"});                            // { red: 0, green: 255, blue: 0 }
 */
declare type TColorFloat = {
    /**
     * Red component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>r</code>, <code>x</code>.
     */
    red: number;
    /**
     * Green component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>g</code>, <code>y</code>.
     */
    green: number;
    /**
     * Blue component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>b</code>, <code>z</code>.
     */
    blue: number;
};

/**
 * A 4-dimensional vector.
 */
declare type TVec4 = {
    /**
     * X-coordinate of the vector.
     */
    x: number;
    /**
     * Y-coordinate of the vector.
     */
    y: number;
    /**
     * Z-coordinate of the vector.
     */
    z: number;
    /**
     * W-coordinate of the vector.
     */
    w: number;
};

/**
 * Defines a rectangular portion of an image or screen, or similar.
 */
declare type TRect = {
    /**
     * Left, x-coordinate value.
     */
    x: number;
    /**
     * Top, y-coordinate value.
     */
    y: number;
    /**
     * Width of the rectangle.
     */
    width: number;
    /**
     * Height of the rectangle.
     */
    height: number;
};

/**
 * A vector with a starting point. It is used, for example, when finding entities or avatars that lie under a mouse click or
intersect a laser beam.
 */
declare type PickRay = {
    /**
     * The starting position of the ray.
     */
    origin: TVec3;
    /**
     * The direction that the ray travels.
     */
    direction: TVec3;
};

/**
 * The tip of a stylus.
 */
declare type StylusTip = {
    /**
     * The hand that the stylus is attached to: <code>0</code> for left hand, <code>1</code> for the
     * right hand, <code>-1</code> for invalid.
     */
    side: number;
    /**
     * The position of the stylus tip relative to the body of the stylus.
     */
    tipOffset: TVec3;
    /**
     * The position of the stylus tip.
     */
    position: TVec3;
    /**
     * The orientation of the stylus.
     */
    orientation: TQuat;
    /**
     * The velocity of the stylus tip.
     */
    velocity: TVec3;
};

/**
 * A parabola defined by a starting point, initial velocity, and acceleration. It is used, for example, when finding entities or
avatars that intersect a parabolic beam.
 */
declare type PickParabola = {
    /**
     * The starting position of the parabola, i.e., the initial position of a virtual projectile whose
     * trajectory defines the parabola.
     */
    origin: TVec3;
    /**
     * The starting velocity of the parabola in m/s, i.e., the initial speed of a virtual projectile
     * whose trajectory defines the parabola.
     */
    velocity: TVec3;
    /**
     * The acceleration that the parabola experiences in m/s<sup>2</sup>, i.e., the acceleration of
     * a virtual projectile whose trajectory defines the parabola, both magnitude and direction.
     */
    acceleration: TVec3;
};

/**
 * A volume for checking collisions in the physics simulation.
 */
declare type CollisionRegion = {
    /**
     * The collision region's shape and size. Dimensions are in world coordinates, but scale with the
     * parent if defined.
     */
    shape: Shape;
    /**
     * <code>true</code> if the <code>shape</code> has no model, or has a model and it is loaded,
     * <code>false</code> if otherwise.
     */
    loaded: boolean;
    /**
     * The position of the collision region, relative to the parent if defined.
     */
    position: TVec3;
    /**
     * The orientation of the collision region, relative to the parent if defined.
     */
    orientation: TQuat;
    /**
     * The approximate minimum penetration depth for a test object to be considered in contact with
     * the collision region. The depth is in world coordinates but scales with the parent if defined.
     */
    threshold: number;
    /**
     * The type of objects the collision region collides as. Objects whose collision
     * masks overlap with the region's collision group are considered to be colliding with the region.
     * @defaultValue 8
     */
    collisionGroup?: CollisionMask;
};

/**
 * A physical volume.
 */
declare type Shape = {
    /**
     * The type of shape.
     * @defaultValue "none"
     */
    shapeType: ShapeType;
    /**
     * The model to load to for the shape if <code>shapeType</code> is one of
     * <code>"compound"</code>, <code>"simple-hull"</code>, <code>"simple-compound"</code>, or <code>"static-mesh"</code>.
     * @defaultValue ""
     */
    modelUrl?: string;
    /**
     * The dimensions of the shape.
     */
    dimensions: TVec3;
};

/**
 * <p>The type of a collision contact event.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>0</code></td><td>Start of the collision.</td></tr>
    <tr><td><code>1</code></td><td>Continuation of the collision.</td></tr>
    <tr><td><code>2</code></td><td>End of the collision.</td></tr>
  </tbody>
</table>
 */
declare type ContactEventType = number;

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>A mesh, such as returned by {@link Entities.getMeshes} or {@link Model} API functions.
 */
declare class MeshProxy {
    /**
     * Gets the number of vertices in the mesh.
     * @returns Integer number of vertices in the mesh.
     */
    getNumVertices(): number;
    /**
     * Gets the position of a vertex in the mesh.
     * @param index - Integer index of the vertex.
     * @returns Local position of the vertex relative to the mesh.
     */
    getPos(index: number): TVec3;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>ResourceRequestObserver</code> API provides notifications when an observable resource request is made.
 */
declare namespace ResourceRequestObserver {
    /**
     * Information about a resource request.
     */
    type ResourceRequest = {
        /**
         * The URL of the resource request.
         */
        url: string;
        /**
         * An ID identifying the request.
         */
        callerId: number;
        /**
         * Extra information about the request.
         */
        extra: string;
    };
}

/**
 * <p>Defines the shape used for collisions or zones.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"none"</code></td><td>No shape.</td></tr>
    <tr><td><code>"box"</code></td><td>A cube.</td></tr>
    <tr><td><code>"sphere"</code></td><td>A sphere.</td></tr>
    <tr><td><code>"capsule-x"</code></td><td>A capsule (cylinder with spherical ends) oriented on the x-axis.</td></tr>
    <tr><td><code>"capsule-y"</code></td><td>A capsule (cylinder with spherical ends) oriented on the y-axis.</td></tr>
    <tr><td><code>"capsule-z"</code></td><td>A capsule (cylinder with spherical ends) oriented on the z-axis.</td></tr>
    <tr><td><code>"cylinder-x"</code></td><td>A cylinder oriented on the x-axis.</td></tr>
    <tr><td><code>"cylinder-y"</code></td><td>A cylinder oriented on the y-axis.</td></tr>
    <tr><td><code>"cylinder-z"</code></td><td>A cylinder oriented on the z-axis.</td></tr>
    <tr><td><code>"hull"</code></td><td><em>Not used.</em></td></tr>
    <tr><td><code>"compound"</code></td><td>A compound convex hull specified in an OBJ file.</td></tr>
    <tr><td><code>"simple-hull"</code></td><td>A convex hull automatically generated from the model.</td></tr>
    <tr><td><code>"simple-compound"</code></td><td>A compound convex hull automatically generated from the model, using
        sub-meshes.</td></tr>
    <tr><td><code>"static-mesh"</code></td><td>The exact shape of the model.</td></tr>
    <tr><td><code>"plane"</code></td><td>A plane.</td></tr>
    <tr><td><code>"ellipsoid"</code></td><td>An ellipsoid.</td></tr>
    <tr><td><code>"circle"</code></td><td>A circle.</td></tr>
    <tr><td><code>"multisphere"</code></td><td>A convex hull generated from a set of spheres.</td></tr>
  </tbody>
</table>
 */
declare type ShapeType = string;

/**
 * <p>Specifies how a web surface processes events.</p>
<table>
  <thead>
    <tr><th>Value</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td><code>"touch"</code></td><td>Events are processed as touch events.</td></tr>
    <tr><td><code>"mouse"</code></td><td>Events are processed as mouse events.</td></tr>
  </tbody>
</table>
 */
declare type WebInputMode = string;

/**
 * A ViewFrustum has a "keyhole" shape: a regular frustum for stuff that is visible plus a central sphere for stuff that is
nearby (for physics simulation).
 */
declare type ViewFrustum = {
    /**
     * The location of the frustum's apex.
     */
    position: TVec3;
    /**
     * The direction that the frustum is looking at.
     */
    orientation: TQuat;
    /**
     * Center radius of the keyhole in meters.
     */
    centerRadius: number;
    /**
     * Horizontal field of view in degrees.
     */
    fieldOfView: number;
    /**
     * Aspect ratio of the frustum.
     */
    aspectRatio: number;
    /**
     * The projection matrix for the view defined by the frustum.
     */
    projection: TMat4;
};

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>
 * @property cpuRunTime - <em>Read-only.</em>
 */
declare namespace Workload {
    function toJSON(): string;
    function load(json: any): void;
    function getConfig(name: string): any;
    function isTask(): boolean;
    function isSwitch(): boolean;
    function getSubConfigs(): object[];
    function getNumSubs(): number;
    function getSubConfig(index: number): any;
    function refresh(): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>OffscreenFlags</code> API enables gamepad joystick navigation of UI.

<p><em>This API currently has no effect and is not used.</em></p>
 * @property navigationFocused - <code>true</code> if UI has joystick navigation focus, <code>false</code> if it
    doesn't.
 * @property navigationFocusDisabled - <code>true</code> if UI joystick navigation focus is disabled,
    <code>false</code> if it isn't.
 */
declare namespace OffscreenFlags { }

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A <code>OverlayWebWindow</code> displays an HTML window inside Interface.

<p>Create using <code>new OverlayWebWindow(...)</code>.</p>
 * @property url - The URL of the HTML displayed in the window. <em>Read-only.</em>
 * @property position - The position of the window, in pixels.
 * @property size - The size of the window interior, in pixels.
 * @property visible - <code>true</code> if the window is visible, <code>false</code> if it isn't.
 * @param [titleOrProperties = "WebWindow"] - The window's title or initial property values.
 * @param [source = "about:blank"] - The URL of the HTML to display. Not used unless the first parameter is the window
    title.
 * @param [width = 0] - The width of the window interior, in pixels. Not used unless the first parameter is the window
    title.
 * @param [height = 0] - The height of the window interior, in pixels. Not used unless the first parameter is the
    window title.
 */
declare class OverlayWebWindow {
    constructor(titleOrProperties?: string | OverlayWindow.Properties, source?: string, width?: number, height?: number);
    static clearDebugWindow(): void;
    /**
     * @param message - Message.
     */
    static sendToQML(message: string | any): void;
    /**
     * Sends a message to the HTML page. To receive the message, the HTML page's script must connect to the <code>EventBridge</code>
    that is automatically provided for the script:
    <pre class="prettyprint"><code>EventBridge.scriptEventReceived.connect(function(message) {
        ...
    });</code></pre>
     * @example
     * <caption>Send and receive messages with an HTML window.</caption>
    // JavaScript file.
    
    var overlayWebWindow = new OverlayWebWindow({
        title: "Overlay Web Window",
        source: Script.resolvePath("OverlayWebWindow.html"),
        width: 400,
        height: 300
    });
    
    overlayWebWindow.webEventReceived.connect(function (message) {
        print("Message received: " + message);
    });
    
    Script.setTimeout(function () {
        overlayWebWindow.emitScriptEvent("Hello world!");
    }, 2000);
     * @example
     * // HTML file, "OverlayWebWindow.html".
    
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8" />
    </head>
    <body>
        <p id="hello">...</p>
    </body>
    <script>
        EventBridge.scriptEventReceived.connect(function (message) {
            document.getElementById("hello").innerHTML = message;
            EventBridge.emitWebEvent("Hello back!");
        });
    </script>
    </html>
     * @param message - The message to send to the embedded HTML page.
     */
    static emitScriptEvent(message: string | any): void;
    /**
     * Gets the URL of the HTML displayed.
     * @returns - The URL of the HTML page displayed.
     */
    static getURL(): string;
    /**
     * Loads HTML into the window, replacing current window content.
     * @param url - The URL of the HTML to display.
     */
    static setURL(url: string): void;
    /**
     * Injects a script into the HTML page, replacing any currently injected script.
     * @param url - The URL of the script to inject.
     */
    static setScriptURL(url: string): void;
    /**
     * @param properties - Properties.
     */
    static initQml(properties: OverlayWindow.Properties): void;
    /**
     * Gets whether the window is shown or hidden.
     * @returns code>true</code> if the window is shown, <code>false</code> if it is hidden.
     */
    static isVisible(): boolean;
    /**
     * Shows or hides the window.
     * @param visible - code>true</code> to show the window, <code>false</code> to hide it.
     */
    static setVisible(visible: boolean): void;
    /**
     * Gets the position of the window.
     * @returns The position of the window, in pixels.
     */
    static getPosition(): TVec2;
    /**
     * Sets the position of the window, from a pair of numbers.
     * @param x - The x position of the window, in pixels.
     * @param y - The y position of the window, in pixels.
     */
    static setPosition(x: number, y: number): void;
    /**
     * Gets the size of the window interior.
     * @returns The size of the window interior, in pixels.
     */
    static getSize(): TVec2;
    /**
     * Sets the size of the window interior, from a pair of numbers.
     * @param width - The width of the window interior, in pixels.
     * @param height - The height of the window interior, in pixels.
     */
    static setSize(width: number, height: number): void;
    /**
     * Sets the window title.
     * @param title - The window title.
     */
    static setTitle(title: string): void;
    /**
     * Raises the window to the top.
     */
    static raise(): void;
    /**
     * Closes the window.
    <p>Note: The window also closes when the script ends.</p>
     */
    static close(): void;
    /**
     * @returns Object.
     */
    static getEventBridge(): any;
    /**
     * @param message - The message.
     */
    static emitWebEvent(message: any | string): void;
    /**
     * @param position - Position.
     */
    static hasMoved(position: TVec2): void;
    static hasClosed(): void;
    /**
     * @param message - Message.
     */
    static qmlToScript(message: any): void;
    /**
     * The URL of the HTML displayed in the window. <em>Read-only.</em>
    */
    url: string;
    /**
     * The position of the window, in pixels.
    */
    position: TVec2;
    /**
     * The size of the window interior, in pixels.
    */
    size: TVec2;
    /**
     * <code>true</code> if the window is visible, <code>false</code> if it isn't.
    */
    visible: boolean;
}

declare namespace OverlayWindow {
    /**
     * Properties used to initialize an {@link OverlayWindow} or {@link OverlayWebWindow}.
     */
    type Properties = {
        /**
         * The window title.
         * @defaultValue "WebWindow
         */
        title?: string;
        /**
         * The source of the QML or HTML to display.
         */
        source?: string;
        /**
         * The width of the window interior, in pixels.
         */
        width?: number;
        /**
         * The height of the window interior, in pixels.
         */
        height?: number;
        /**
         * <code>true</codE> if the window should be visible, <code>false</code> if it shouldn't.
         * @defaultValue true
         */
        visible?: boolean;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A <code>OverlayWindow</code> displays a QML window inside Interface.

<p>The QML can optionally include a <code>WebView</code> control that embeds an HTML-based windows. (The <code>WebView</code>
control is defined by a "WebView.qml" file included in the Interface install.) Alternatively, an {@link OverlayWebWindow}
can be used for HTML-based windows.</p>

<p>Create using <code>new OverlayWindow(...)</code>.</p>
 * @property position - The position of the window, in pixels.
 * @property size - The size of the window interior, in pixels.
 * @property visible - <code>true</code> if the window is visible, <code>false</code> if it isn't.
 * @param [titleOrProperties = "WebWindow"] - The window's title or initial property values.
 * @param [source] - The source of the QML to display. Not used unless the first parameter is the window title.
 * @param [width = 0] - The width of the window interior, in pixels. Not used unless the first parameter is the window
    title.
 * @param [height = 0] - The height of the window interior, in pixels. Not used unless the first parameter is the
    window title.
 */
declare class OverlayWindow {
    constructor(titleOrProperties?: string | OverlayWindow.Properties, source?: string, width?: number, height?: number);
    /**
     * @param properties - Properties.
     */
    static initQml(properties: OverlayWindow.Properties): void;
    /**
     * Gets whether the window is shown or hidden.
     * @returns code>true</code> if the window is shown, <code>false</code> if it is hidden.
     */
    static isVisible(): boolean;
    /**
     * Shows or hides the window.
     * @param visible - code>true</code> to show the window, <code>false</code> to hide it.
     */
    static setVisible(visible: boolean): void;
    /**
     * Gets the position of the window.
     * @returns The position of the window, in pixels.
     */
    static getPosition(): TVec2;
    /**
     * Sets the position of the window, from a pair of numbers.
     * @param x - The x position of the window, in pixels.
     * @param y - The y position of the window, in pixels.
     */
    static setPosition(x: number, y: number): void;
    /**
     * Gets the size of the window interior.
     * @returns The size of the window interior, in pixels.
     */
    static getSize(): TVec2;
    /**
     * Sets the size of the window interior, from a pair of numbers.
     * @param width - The width of the window interior, in pixels.
     * @param height - The height of the window interior, in pixels.
     */
    static setSize(width: number, height: number): void;
    /**
     * Sets the window title.
     * @param title - The window title.
     */
    static setTitle(title: string): void;
    /**
     * Raises the window to the top.
     */
    static raise(): void;
    /**
     * Closes the window.
    <p>Note: The window also closes when the script ends.</p>
     */
    static close(): void;
    /**
     * @returns Object.
     */
    static getEventBridge(): any;
    /**
     * Sends a message to the QML. To receive the message, the QML must implement a fn:
    <pre class="prettyprint"><code>function fromScript(message) {
      ...
    }</code></pre>
     * @example
     * <caption>Send and receive messages with a QML window.</caption>
    // JavaScript file.
    
    var overlayWindow = new OverlayWindow({
        title: "Overlay Window",
        source: Script.resolvePath("OverlayWindow.qml"),
        width: 400,
        height: 300
    });
    
    overlayWindow.fromQml.connect(function (message) {
        print("Message received: " + message);
    });
    
    Script.setTimeout(function () {
        overlayWindow.sendToQml("Hello world!");
    }, 2000);
     * @example
     * // QML file, "OverlayWindow.qml".
    
    import QtQuick 2.5
    import QtQuick.Controls 1.4
    
    Rectangle {
        width: parent.width
        height: parent.height
    
        function fromScript(message) {
            text.text = message;
            sendToScript("Hello back!");
        }
    
        Label{
            id: text
            anchors.centerIn : parent
            text : "..."
        }
    }
     * @param message - The message to send to the QML.
     */
    static sendToQml(message: string | any): void;
    /**
     * Calls a <code>clearWindow()</code> function if present in the QML.
     */
    static clearDebugWindow(): void;
    /**
     * Sends a message to an embedded HTML web page. To receive the message, the HTML page's script must connect to the
    <code>EventBridge</code> that is automatically provided for the script:
    <pre class="prettyprint"><code>EventBridge.scriptEventReceived.connect(function(message) {
        ...
    });</code></pre>
     * @param message - The message to send to the embedded HTML page.
     */
    static emitScriptEvent(message: string | any): void;
    /**
     * @param message - The message.
     */
    static emitWebEvent(message: any | string): void;
    /**
     * @param position - Position.
     */
    static hasMoved(position: TVec2): void;
    static hasClosed(): void;
    /**
     * @param message - Message.
     */
    static qmlToScript(message: any): void;
    /**
     * The position of the window, in pixels.
    */
    position: TVec2;
    /**
     * The size of the window interior, in pixels.
    */
    size: TVec2;
    /**
     * <code>true</code> if the window is visible, <code>false</code> if it isn't.
    */
    visible: boolean;
}

declare namespace TabletButtonProxy {
    /**
     * Properties of a tablet button.
     */
    type ButtonProperties = {
        /**
         * The button ID. <em>Read-only.</em>
         */
        uuid: Uuid;
        /**
         * Synonym for <code>uuid</code>.
         */
        objectName: Uuid;
        /**
         * The order in which the button was created: each button created gets a value incremented by
         * one.
         */
        stableOrder: number;
        /**
         * The url of the default button icon displayed. (50 x 50 pixels. SVG, PNG, or other image format.)
         */
        icon: string;
        /**
         * The url of the button icon displayed when the button is hovered and not active.
         */
        hoverIcon: string;
        /**
         * The url of the button icon displayed when the button is active.
         */
        activeIcon: string;
        /**
         * The url of the button icon displayed when the button is hovered and active.
         */
        activeHoverIcon: string;
        /**
         * The button caption.
         */
        text: string;
        /**
         * The button caption when the button is hovered and not active.
         */
        hoverText: string;
        /**
         * The button caption when the button is active.
         */
        activeText: string;
        /**
         * The button caption when the button is hovered and active.
         */
        activeHoverText: string;
        /**
         * The color of the button caption.
         * @defaultValue "#ffffff"
         */
        captionColor: string;
        /**
         * <code>true</code> if the button is active, <code>false</code> if it isn't.
         */
        isActive: boolean;
        /**
         * <code>true</code> if the button is being hovered, <code>false</code> if it isn't.
         */
        isEntered: boolean;
        /**
         * <code>true</code> if the button is enabled, <code>false</code> if it is disabled.
         * @defaultValue true
         */
        buttonEnabled: boolean;
        /**
         * Determines the order of the buttons: buttons with lower numbers appear before buttons
         * with larger numbers.
         * @defaultValue 100
         */
        sortOrder: number;
        /**
         * If <code>true</code> and the tablet is being used, the button's <code>isActive</code>
         * state toggles each time the button is clicked. <em>Tablet only.</em>
         */
        inDebugMode: boolean;
        /**
         * Internal tablet-only property.
         */
        flickable: any;
        /**
         * Internal tablet-only property.
         */
        gridView: any;
        /**
         * Internal tablet-only property.
         */
        buttonIndex: number;
    };
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Tablet</code> API provides the facilities to work with the system or other tablet. In toolbar mode (see Developer
&gt; UI options), the tablet's menu buttons are displayed in a toolbar and other tablet content is displayed in a dialog.

<p>See also the {@link Toolbars} API for working with toolbars.</p>
 */
declare namespace Tablet {
    /**
     * <p>Standard tablet sounds.</p>
    <table>
      <thead>
        <tr><th>Value</th><th>Description</th></tr>
      </thead>
      <tbody>
        <tr><td><code>0</code></td><td>Button click.</td></tr>
        <tr><td><code>1</code></td><td>Button hover.</td></tr>
        <tr><td><code>2</code></td><td>Tablet open.</td></tr>
        <tr><td><code>3</code></td><td>Tablet hands in.</td></tr>
        <tr><td><code>4</code></td><td>Tablet hands out.</td></tr>
      </tbody>
    </table>
     */
    type AudioEvents = number;
    /**
     * Gets an instance of a tablet. A new tablet is created if one with the specified name doesn't already exist.
     * @example
     * <caption>Display the Overte home page on the system tablet.</caption>
    var tablet = Tablet.getTablet("com.highfidelity.interface.tablet.system");
    tablet.gotoWebScreen("https://overte.org/");
     * @param name - A unique name that identifies the tablet.
     * @returns The tablet instance.
     */
    function getTablet(name: string): TabletProxy;
    /**
     * Plays a standard tablet sound. The sound is played locally (only the user running the script hears it) without a
    position.
     * @example
     * <caption>Play a tablet sound.</caption>
    var TABLET_BUTTON_CLICK = 0;
    Tablet.playSound(TABLET_BUTTON_CLICK);
     * @param sound - The tablet sound to play.
     */
    function playSound(sound: Tablet.AudioEvents): void;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>tabletInterface</code> API provides the facilities to work with the system or other tablet.
 */
declare namespace tabletInterface {
    /**
     * Gets an instance of a tablet. A new tablet is created if one with the specified name doesn't already exist.
     * @example
     * <caption>Display the Overte home page on the system tablet.</caption>
    var tablet = Tablet.getTablet("com.highfidelity.interface.tablet.system");
    tablet.gotoWebScreen("https://overte.org/");
     * @param name - A unique name that identifies the tablet.
     * @returns The tablet instance.
     */
    function getTablet(name: string): TabletProxy;
    /**
     * Plays a standard tablet sound. The sound is played locally (only the user running the script hears it) without a
    position.
     * @example
     * <caption>Play a tablet sound.</caption>
    var TABLET_BUTTON_CLICK = 0;
    Tablet.playSound(TABLET_BUTTON_CLICK);
     * @param sound - The tablet sound to play.
     */
    function playSound(sound: Tablet.AudioEvents): void;
}

declare namespace TabletProxy {
    /**
     * Information on the buttons in the tablet main menu (toolbar in toolbar mode) for use in QML. Has properties and functions
    per <a href="http://doc.qt.io/qt-5/qabstractlistmodel.html">http://doc.qt.io/qt-5/qabstractlistmodel.html</a>.
     */
    type TabletButtonListModel = any;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>An instance of a tablet. In toolbar mode (see Developer &gt; UI options), the tablet's menu buttons are displayed in a
toolbar and other tablet content is displayed in a dialog.

<p>Retrieve an existing tablet or create a new tablet using {@link Tablet.getTablet}.</p>
 * @property name - A unique name that identifies the tablet. <em>Read-only.</em>
 * @property toolbarMode - <code>true</code> if the tablet is in toolbar mode, <code>false</code> if it isn't.
 * @property landscape - <code>true</code> if the tablet is displayed in landscape mode, <code>false</code> if it is
    displayed in portrait mode.
    <p>Note: This property isn't used in toolbar mode.</p>
 * @property tabletShown - <code>true</code> if the tablet is currently displayed, <code>false</code> if it isn't.
    <p>Note: This property isn't used in toolbar mode.</p>
 * @property buttons - Information on the buttons in the tablet main menu (or toolbar in
    toolbar mode) for use in QML. <em>Read-only.</em>
 */
declare class TabletProxy {
    /**
     * Displays the tablet menu. The tablet is opened if it isn't already open.
     * @example
     * <caption>Go to the "View" menu.</caption>
    tablet.gotoMenuScreen("View");
     * @param [submenu = ""] - The name of a submenu to display, if any.
     */
    gotoMenuScreen(submenu?: string): void;
    /**
     * @param url - URL.
     */
    initialScreen(url: string): void;
    /**
     * Displays the tablet home screen, if the tablet is open.
     */
    gotoHomeScreen(): void;
    /**
     * Opens a web app or page in addition to any current app. In tablet mode, the app or page is displayed over the top of the
    current app; in toolbar mode, the app is opened in a new window that replaces any current window open. If in tablet
    mode, the app or page can be closed using {@link TabletProxy#returnToPreviousApp}.
     * @param url - The URL of the web page or app.
     * @param [injectedJavaScriptUrl = ""] - The URL of JavaScript to inject into the web page.
     * @param [loadOtherBase = false] - If <code>true</code>, the web page or app is displayed in a frame with "back"
    and "close" buttons.
    <p class="important">Deprecated: This parameter is deprecated and will be removed.</p>
     */
    gotoWebScreen(url: string, injectedJavaScriptUrl?: string, loadOtherBase?: boolean): void;
    /**
     * Opens a QML app or dialog on the tablet.
     * @param path - The path of the QML app or dialog.
     * @param [resizable = false] - <code>true</code> to make the dialog resizable in toolbar mode, <code>false</code>
        to have it not resizable.
     */
    loadQMLSource(path: string, resizable?: boolean): void;
    loadQMLSourceImpl(): void;
    loadHTMLSourceOnTopImpl(): void;
    returnToPreviousAppImpl(): void;
    loadQMLOnTopImpl(): void;
    /**
     * Displays a QML dialog over the top of the current dialog, without closing the current dialog. Use
    {@link TabletProxy#popFromStack|popFromStack} to close the dialog.
    <p>If the current dialog or its ancestors contain a QML <code>StackView</code> with <code>objectName: "stack"</code> and
    function <code>pushSource(path)</code>, that function is called; otherwise,
    {@link TabletProxy#loadQMLSource|loadQMLSource} is called. The Create app provides an example of using a QML
    <code>StackView</code>.</p>
     * @param path - The path to the dialog's QML.
     * @returns <code>true</code> if the dialog was successfully opened, <code>false</code> if it wasn't.
     */
    pushOntoStack(path: string): boolean;
    /**
     * Closes a QML dialog that was displayed using {@link Tablet#pushOntoStack|pushOntoStack} with a dialog implementing a QML
    <code>StackView</code>; otherwise, no action is taken.
    <p>If using a QML <code>StackView</code>, its <code>popSource()</code> function is called.</p>
     */
    popFromStack(): void;
    /**
     * Opens a QML app or dialog in addition to any current app. In tablet mode, the app or dialog is displayed over the top of
    the current app; in toolbar mode, the app or dialog is opened in a new window. If in tablet mode, the app can be closed
    using {@link TabletProxy#returnToPreviousApp}.
     * @param path - The path to the app's QML.
     */
    loadQMLOnTop(path: string): void;
    /**
     * Opens a web app or page in addition to any current app. In tablet mode, the app or page is displayed over the top of the
    current app; in toolbar mode, the app is opened in a new window that replaces any current window open. If in tablet
    mode, the app or page can be closed using {@link TabletProxy#returnToPreviousApp}.
     * @param path - The URL of the web page or HTML app.
     * @param [injectedJavaScriptURL = ""] - The URL of JavaScript to inject into the web page.
     */
    loadWebScreenOnTop(path: string, injectedJavaScriptURL?: string): void;
    /**
     * Closes the current app and returns to the previous app, if in tablet mode and the current app was loaded using
    {@link TabletProxy#loadQMLOnTop|loadQMLOnTop} or {@link TabletProxy#loadWebScreenOnTop|loadWebScreenOnTop}.
     */
    returnToPreviousApp(): void;
    /**
     * Checks if the tablet has a modal, non-modal, or message dialog open.
     * @returns <code>true</code> if a modal, non-modal, or message dialog is open, <code>false</code> if there isn't.
     */
    isMessageDialogOpen(): boolean;
    /**
     * Closes any open modal, non-modal, or message dialog, opened by {@link Window.prompt}, {@link Window.promptAsync},
    {@link Window.openMessageBox}, or similar.
     */
    closeDialog(): void;
    /**
     * Adds a new button to the tablet menu.
     * @example
     * <caption>Add a menu button.</caption>
    var tablet = Tablet.getTablet("com.highfidelity.interface.tablet.system");
    var button = tablet.addButton({ text: "TEST" });
    
    button.clicked.connect(function () {
        print("TEST button clicked");
    });
    
    Script.scriptEnding.connect(function () {
        tablet.removeButton(button);
    });
     * @param properties - Button properties.
     * @returns The button added.
     */
    addButton(properties: TabletButtonProxy.ButtonProperties): TabletButtonProxy;
    /**
     * Removes a button from the tablet menu.
     * @param button - The button to remove.
     */
    removeButton(button: TabletButtonProxy): void;
    /**
     * Sends a message to the current web page. To receive the message, the web page's script must connect to the
    <code>EventBridge</code> that is automatically provided to the script:
    <pre class="prettyprint"><code>EventBridge.scriptEventReceived.connect(function(message) {
        ...
    });</code></pre>
    <p><strong>Warning:</strong> The <code>EventBridge</code> object is not necessarily set up immediately ready for the web
    page's script to use. A simple workaround that normally works is to add a delay before calling
    <code>EventBridge.scriptEventReceived.connect(...)</code>. A better solution is to periodically call
    <code>EventBridge.scriptEventReceived.connect(...)</code> and then <code>EventBridge.emitWebEvent(...)</code> to send a
    message to the Interface script, and have that send a message back using <code>emitScriptEvent(...)</code>; when the
    return message is received, the <codE>EventBridge</code> is ready for use.</p>
     * @param message - The message to send to the web page.
     */
    emitScriptEvent(message: string | any): void;
    /**
     * Sends a message to the current QML page. To receive the message, the QML page must implement a fn:
    <pre class="prettyprint"><code>function fromScript(message) {
      ...
    }</code></pre>
     * @param message - The message to send to the QML page.
     */
    sendToQml(message: string | any): void;
    /**
     * Checks if the tablet is on the home screen.
     * @returns <code>true</code> if the tablet is on the home screen, <code>false</code> if it isn't.
     */
    onHomeScreen(): boolean;
    /**
     * Sets whether the tablet is displayed in landscape or portrait mode.
    <p>Note: The setting isn't used in toolbar mode.</p>
     * @param landscape - <code>true</code> to display the tablet in landscape mode, <code>false</code> to display it
        in portrait mode.
     */
    setLandscape(landscape: boolean): void;
    /**
     * Gets whether the tablet is displayed in landscape or portrait mode.
    <p>Note: The setting isn't used in toolbar mode.</p>
     * @returns <code>true</code> if the tablet is displayed in landscape mode, <code>false</code> if it is displayed
        in portrait mode.
     */
    getLandscape(): boolean;
    /**
     * Checks if a path is the current app or dialog displayed.
     * @param path - The path to test.
     * @returns <code>true</code> if <code>path</code> is the current app or dialog, <code>false</code> if it isn't.
     */
    isPathLoaded(path: string): boolean;
    desktopWindowClosed(): void;
    /**
     * @param message - Message
     */
    emitWebEvent(message: any | string): void;
    onTabletShown(): void;
    /**
     * A unique name that identifies the tablet. <em>Read-only.</em>
    */
    name: string;
    /**
     * <code>true</code> if the tablet is in toolbar mode, <code>false</code> if it isn't.
    */
    toolbarMode: boolean;
    /**
     * <code>true</code> if the tablet is displayed in landscape mode, <code>false</code> if it is
     * displayed in portrait mode.
     * <p>Note: This property isn't used in toolbar mode.</p>
    */
    landscape: boolean;
    /**
     * <code>true</code> if the tablet is currently displayed, <code>false</code> if it isn't.
     * <p>Note: This property isn't used in toolbar mode.</p>
    */
    tabletShown: boolean;
    /**
     * Information on the buttons in the tablet main menu (or toolbar in
     * toolbar mode) for use in QML. <em>Read-only.</em>
    */
    buttons: TabletProxy.TabletButtonListModel;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A tablet button. In toolbar mode (Developer &gt; UI &gt; Tablet Becomes Toolbar), the tablet button is displayed on the
toolbar.

<p>Create a new button using {@link TabletProxy#addButton}.</p>
 * @property uuid - The ID of the button. <em>Read-only.</em>
 * @property properties - The current values of the button's properties. Only properties
    that have been set during button creation or subsequently edited are returned. <em>Read-only.</em>
 */
declare class TabletButtonProxy {
    /**
     * Gets the current values of the button's properties. Only properties that have been set during button creation or
    subsequently edited are returned.
     * @example
     * <caption>Report a test button's properties.</caption>
    var tablet = Tablet.getTablet("com.highfidelity.interface.tablet.system");
    var button = tablet.addButton({ text: "TEST" });
    
    var properties = button.getProperties();
    print("TEST button properties: " + JSON.stringify(properties));
    
    Script.scriptEnding.connect(function () {
        tablet.removeButton(button);
    });
     * @returns The button properties.
     */
    getProperties(): TabletButtonProxy.ButtonProperties;
    /**
     * Changes the values of the button's properties.
     * @example
     * <caption>Set a button's hover text after a delay.</caption>
    var tablet = Tablet.getTablet("com.highfidelity.interface.tablet.system");
    var button = tablet.addButton({ text: "TEST" });
    
    button.propertiesChanged.connect(function () {
        print("TEST button properties changed");
    });
    
    Script.setTimeout(function () {
        button.editProperties({ text: "CHANGED" });
    }, 2000);
    
    Script.scriptEnding.connect(function () {
        tablet.removeButton(button);
    });
     * @param properties - The properties to change.
     */
    editProperties(properties: TabletButtonProxy.ButtonProperties): void;
    /**
     * The ID of the button. <em>Read-only.</em>
    */
    uuid: Uuid;
    /**
     * The current values of the button's properties. Only properties
     * that have been set during button creation or subsequently edited are returned. <em>Read-only.</em>
    */
    properties: TabletButtonProxy.ButtonProperties;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>An instance of a toolbar.

<p>Retrieve an existing toolbar or create a new toolbar using {@link Toolbars.getToolbar}.</p>
 */
declare class ToolbarProxy {
    /**
     * <em>Currently doesn't work.</em>
     * @param properties - Button properties
     * @returns The button added.
     */
    addButton(properties: any): any;
    /**
     * <em>Currently doesn't work.</em>
     * @param name - Button name.
     */
    removeButton(name: string): void;
    /**
     * Sets the value of a toolbar property. A property is added to the toolbar if the named property doesn't already
    exist.
     * @param propertyValue - The value of the property.
     */
    writeProperty(propertyValue: any): void;
    /**
     * Sets the values of toolbar properties. A property is added to the toolbar if a named property doesn't already
    exist.
     * @param properties - The names and values of the properties to set. Toolbar properties are those in the QML
        implementation of the toolbar.
     */
    writeProperties(properties: any): void;
    /**
     * Gets the value of a toolbar property.
     * @param propertyName - The property name. Toolbar properties are those in the QML implementation of the toolbar.
     * @returns The value of the property if the property name is valid, otherwise <code>undefined</code>.
     */
    readProperty(propertyName: string): any;
    /**
     * Gets the values of toolbar properties.
     * @param propertyList - The names of the properties to get the values of. Toolbar properties are those in the
        QML implementation of the toolbar.
     * @returns The names and values of the specified properties. If the toolbar doesn't have a particular property
        then the result doesn't include that property.
     */
    readProperties(propertyList: string[]): any;
}

/**
 * <p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Toolbars</code> API provides facilities to work with the system or other toolbar.

<p>See also the {@link Tablet} API for use of the system tablet and toolbar in desktop and HMD modes.</p>
 */
declare namespace Toolbars {
    /**
     * Gets an instance of a toolbar. A new toolbar is created if one with the specified name doesn't already exist.
     * @param name - A unique name that identifies the toolbar.
     * @returns The toolbar instance.
     */
    function getToolbar(name: string): ToolbarProxy;
}

